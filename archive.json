{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-03-20T01:54:51.620462+00:00",
  "repo": "core-wg/href",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "Patch available",
      "description": "",
      "color": "5319E7"
    },
    {
      "name": "has-pr",
      "description": "",
      "color": "b60205"
    },
    {
      "name": "test vectors",
      "description": "",
      "color": "1dd6db"
    },
    {
      "name": "not in scope",
      "description": "Not in scope of the current document",
      "color": "576671"
    }
  ],
  "issues": [
    {
      "number": 5,
      "id": "I_kwDOFyeisM48dq5Q",
      "title": "\u00a72.C2 unclear para",
      "url": "https://github.com/core-wg/href/issues/5",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "```\r\n         [...] The authority can be absent; in\r\n         [RFC3986], in this case the path can be rootless or, as when he\r\n         authority is present, begin with a root (\"/\"); this is modelled\r\n         by two different values for an absent authority.\r\n```\r\n\r\nespecially _\"in [RFC3986], in this case [...]\"_ is pretty hard to parse.",
      "createdAt": "2021-10-03T14:19:46Z",
      "updatedAt": "2021-10-04T00:24:23Z",
      "closedAt": "2021-10-04T00:24:23Z",
      "comments": []
    },
    {
      "number": 6,
      "id": "I_kwDOFyeisM48drT9",
      "title": "\u00a72.C5 clarify what \"empty\" port means",
      "url": "https://github.com/core-wg/href/issues/6",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "```\r\nEmpty ports or ports outside this range are not supported.\r\n```\r\n\r\nIt is not clear to me what \"empty\" means in this context.  I would drop it and just leave the _\"ports outside this range are not supported.\"_ bit.",
      "createdAt": "2021-10-03T14:25:24Z",
      "updatedAt": "2021-10-04T00:24:48Z",
      "closedAt": "2021-10-04T00:24:48Z",
      "comments": []
    },
    {
      "number": 9,
      "id": "I_kwDOFyeisM48g63l",
      "title": "CDDL doesn't handle null suppression for authority",
      "url": "https://github.com/core-wg/href/issues/9",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "MEMBER",
      "assignees": [
        "cabo"
      ],
      "labels": [],
      "body": "The CDDL in the appendix fails to handle null suppression at least in case a null authority is elided:\r\n```\r\n[\"a\"] (i.e., \"a:\")\r\n```\r\n",
      "createdAt": "2021-10-04T14:34:54Z",
      "updatedAt": "2021-11-19T13:40:05Z",
      "closedAt": "2021-11-19T13:40:05Z",
      "comments": [
        {
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "body": "As discussed, a simple fix would be to remove the CDDL in appendix and tighten the text in Section 5.1 from \"Trailing null values are removed, [...]\" to \"Trailing null values MUST be removed, [...]\"",
          "createdAt": "2021-10-08T12:56:07Z",
          "updatedAt": "2021-10-08T12:56:27Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "Closed in a303800",
          "createdAt": "2021-11-19T13:40:05Z",
          "updatedAt": "2021-11-19T13:40:05Z"
        }
      ]
    },
    {
      "number": 11,
      "id": "I_kwDOFyeisM49hYMq",
      "title": "Revisit whether we do need authority-less support",
      "url": "https://github.com/core-wg/href/issues/11",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [
        "chrysn"
      ],
      "labels": [],
      "body": "(Yes I know, I brought this up initially... but we've come some way in CoRAL since then, and I'd like to reflect whether we're on the right track still).\r\n\r\nSupporting URIs with no authority (\"URN-style URIs\"?) brings some complexity. Does that carry its weight?\r\n\r\nI hope to come to a way forward within a few minutes today, and conclude this.\r\n\r\n---\r\n\r\nScratchpad notes (primarily for design team meeting):\r\n\r\n* note: The cases of inexpressible URIs (<coap://host/user%40domain.com> can not be expressed in CoAP, only <coap://host/user@domain.com> can be) might be more wide-spread in non-CoAP URIs than assumed due to [file scheme thread](https://mailarchive.ietf.org/arch/msg/art/U3aGPqA5ZeGu4afknVjzMcoO5ho/)), possibly we'd want to allow `32(\"mailto:me@my.domain\")` in all CRI positions for these cases and completeness' sake. (With profiles ruling them out for many applications).\r\n* note: I don't see how we'd proxy to .\r\n* argument to keep: CRIs can be used in mixed namespaces to build incompletely compressed vocabularies (compressing the CURIE part and spelling out the detail). Will we use that? Is it better than concatenating onto 32()s?\r\n* argument to drop: If constrained applications would likely not do anything useful with them, they can just as well be URIs.\r\n* argument to keep-but-not-implement: We should probably say something anyway so that processing assumed-invalid CRIs is no show-stopper but just \"distinct from other CRIs\" (and you usually compare only to known CRIs).",
      "createdAt": "2021-10-21T07:36:26Z",
      "updatedAt": "2021-11-19T15:09:30Z",
      "closedAt": "2021-11-19T13:39:24Z",
      "comments": [
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "\"did\" (W3C d-something ID) is a URN-form URI that we probably need to support more, not less",
          "createdAt": "2021-10-21T08:08:31Z",
          "updatedAt": "2021-10-21T08:08:31Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Looking at their syntax, they should really have put the method-name:method-specific-id into the authority component :-/\r\n\r\nNow they have URLish identifiers (with their own path structure importing path-abempty after their prefix) but can't use discard-all.\r\n\r\n*sigh*\r\n\r\nI guess that settles it.",
          "createdAt": "2021-10-21T08:21:46Z",
          "updatedAt": "2021-10-21T08:21:46Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Summarizing further discussion: For DID URLs (they are used in both forms, but both are authority-less) CRI URNs do provide useful preprocessing. It's not clear yet how useful DID URLs will really be, but if they will, support in CRIs will be helpful.\r\n\r\nThus URNs stay in CRIs for now; implementers can still skip them if they don't plan ever dereferencing or storing them.",
          "createdAt": "2021-10-22T12:59:39Z",
          "updatedAt": "2021-10-22T12:59:39Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "Based on the agreement that we want to support URN-style URIs like DID, I think we can close this now.",
          "createdAt": "2021-11-19T13:39:24Z",
          "updatedAt": "2021-11-19T13:39:24Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "I'm not fully sold here. The complexity we'd have to allow in to capture *ever* CRI is substantial.\r\n\r\nThere's two values in CRIs: Providing a model that's easier to deal with than URIs, and serializing that model for CoAP URIs. Pushing the model to be all-encompassing threatens the simplicity of the CoAP serialization. A solution for DIDs might be to have URNs in the model (there limited to what a particular DID variation can do), and have serializations for DIDs and CoAP URIs that share parts of the model but not the full insanity.",
          "createdAt": "2021-11-19T14:17:12Z",
          "updatedAt": "2021-11-19T14:17:12Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "From today's discussion: Complexity is there in the model, `.feature \"extended-cri\"` makes that visible to whoever wants to use anything that needs it. OK with me.",
          "createdAt": "2021-11-19T15:09:30Z",
          "updatedAt": "2021-11-19T15:09:30Z"
        }
      ]
    },
    {
      "number": 16,
      "id": "I_kwDOFyeisM4_GX5w",
      "title": "Add feature flag for non-authority CRIs",
      "url": "https://github.com/core-wg/href/issues/16",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [
        "chrysn"
      ],
      "labels": [],
      "body": "#11's complexity could be hidden from constrained devices more easily if no-authority (true / null) CRIs were annotated with a feature like pet.",
      "createdAt": "2021-11-19T15:12:55Z",
      "updatedAt": "2021-12-08T00:38:05Z",
      "closedAt": "2021-12-08T00:38:05Z",
      "comments": []
    },
    {
      "number": 17,
      "id": "I_kwDOFyeisM4_IXay",
      "title": "PET: P can be binary",
      "url": "https://github.com/core-wg/href/issues/17",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Now that we use PET for non-ideally-encoded data, we might just as well use bstr for the pet. This will allow expressing URIs like `http://example.com/NonUtf8%FFEncoding`. (We already list them in \"constraints by example\", and https://www.bittorrent.org/beps/bep_0017.html is a practical example of how they'd come to be).",
      "createdAt": "2021-11-20T14:34:31Z",
      "updatedAt": "2021-11-22T12:58:10Z",
      "closedAt": "2021-11-22T12:58:10Z",
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "By the way, can CDDL say something like `pet = bytes .size (1..)` to indicate a minimum but no maximum size? (Just because empty pets would be a denormalized for of text-or-pet easily caught with such an expression).",
          "createdAt": "2021-11-20T15:17:00Z",
          "updatedAt": "2021-11-20T15:17:00Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "Simpler would be\r\n\r\n```\r\npet = bytes .ne ''\r\n```\r\n",
          "createdAt": "2021-11-20T17:53:17Z",
          "updatedAt": "2021-11-20T17:53:30Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Thanks, good point.\r\n\r\nObjections to me making that into a combined PR?",
          "createdAt": "2021-11-20T17:54:54Z",
          "updatedAt": "2021-11-20T17:54:54Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "Looks good to me.",
          "createdAt": "2021-11-20T18:05:23Z",
          "updatedAt": "2021-11-20T18:05:23Z"
        }
      ]
    },
    {
      "number": 18,
      "id": "I_kwDOFyeisM4_IZmB",
      "title": "CBOR array vs. stream",
      "url": "https://github.com/core-wg/href/issues/18",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [
        "chrysn"
      ],
      "labels": [],
      "body": "I vaguely remembered that we had the preferred encoding for CRIs (both for general use and in CoRAL) as a byte string that encodes a CBOR stream. Current text and examples always talk of CBOR arrays.\r\n\r\nWas that something we consciously decided on? I remember that it did play a role in the discussion of devices' ability to skip over CRIs they don't need, and to a smaller extent concerning easy comparability. (It doesn't help that I found nothing pertaining to streams in the earlier notes).\r\n\r\n(By the way, me thinking of encoded CRIs as byte strings may explain some of last Friday's confusion when I suggested CURIE style templating based on the byte representation -- that only makes sense (but is still ugly) when done on byte strings).\r\n\r\nNot trying to argue for any version here yet, just trying to understand where I diverged.",
      "createdAt": "2021-11-20T15:19:38Z",
      "updatedAt": "2022-01-14T14:35:30Z",
      "closedAt": "2022-01-14T14:35:30Z",
      "comments": [
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "Is this issue ready for closing?\r\n",
          "createdAt": "2021-12-08T00:42:54Z",
          "updatedAt": "2021-12-08T00:42:54Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Yes, I think we can conclude that to be \"arrays\".",
          "createdAt": "2022-01-14T14:35:30Z",
          "updatedAt": "2022-01-14T14:35:30Z"
        }
      ]
    },
    {
      "number": 20,
      "id": "I_kwDOFyeisM4_Na9-",
      "title": "text-or-pet for fragment",
      "url": "https://github.com/core-wg/href/issues/20",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "As we now aim for complete coverage of URIs, we'll need text-or-pet for the fragment just as well; the fragment may contain subdelims and \"@\", \":\", \"/\" and \"?\" in unencoded form, so `#@` is distinct from `#%40` because \"@\" is reserved.\r\n\r\nUnlike the other text-or-pet this has no delimiter it's split up from, but `#`, `[` and `]` would probably still have their percent-encoded forms map to parts of the non-pet text because they *can* be there (because like with host names, we should strive for consistency with path and query where our mapping is fixed already in 7252).",
      "createdAt": "2021-11-22T18:46:16Z",
      "updatedAt": "2021-12-08T00:22:05Z",
      "closedAt": "2021-12-08T00:22:05Z",
      "comments": []
    },
    {
      "number": 21,
      "id": "I_kwDOFyeisM4_RHl1",
      "title": "ambiguous \"otherwise\" in path rules",
      "url": "https://github.com/core-wg/href/issues/21",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "In \u00a76.1, path rules, we say:\r\n```\r\nIf the CRI reference contains a discard item of value true, the\r\npath component is prefixed by a slash (\"/\") character.  If it\r\ncontains a discard item of value 0 and the path item is present,\r\nthe conversion fails.  Otherwise, the path component is prefixed\r\nby as many \"../\" components as the discard value minus one\r\nindicates.\r\n```\r\nthe \"Otherwise\" introducing the last sentence is slightly ambiguous.\r\n\r\nI suggest using the more explicit _\"If it contains a discard item of positive value, the path component [...]\"_ instead.\r\n",
      "createdAt": "2021-11-23T15:58:07Z",
      "updatedAt": "2021-12-07T23:39:37Z",
      "closedAt": "2021-12-07T23:39:37Z",
      "comments": []
    },
    {
      "number": 22,
      "id": "I_kwDOFyeisM5AAjFV",
      "title": "path [\"\"] == path [] is special to HTTP/CoAP; we should not mandate that",
      "url": "https://github.com/core-wg/href/issues/22",
      "state": "CLOSED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-12-08T00:43:42Z",
      "updatedAt": "2022-01-24T13:57:20Z",
      "closedAt": "2022-01-15T23:08:04Z",
      "comments": [
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "This should now be covered by #23",
          "createdAt": "2022-01-15T23:08:03Z",
          "updatedAt": "2022-01-15T23:08:03Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Brief note on the theme of \"maybe we should have done it that way in CoAP as well\", because I'm just coming across it: If we had, \"Location-Path: /\" could be distinguished from not having a Location-Path at all. (Not that it'd be a typical outcome of a POST action, but hey, if the server knows the client will be interacting with a resource a lot, that *could* be a good short name to use).\r\n\r\nRead: I'm growing more and more fond of this.",
          "createdAt": "2022-01-24T09:19:00Z",
          "updatedAt": "2022-01-24T09:19:00Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "On 2022-01-24, at 10:19, chrysn ***@***.***> wrote:\n> \n> \"maybe we should have done it that way in CoAP as well\u201d\n\nIndeed.  We were trying to emulate HTTP here, and maybe that was a wart we didn\u2019t need to copy.  But that is water under the bridge...\n\nGr\u00fc\u00dfe, Carsten\n\n",
          "createdAt": "2022-01-24T13:57:20Z",
          "updatedAt": "2022-01-24T13:57:20Z"
        }
      ]
    },
    {
      "number": 24,
      "id": "I_kwDOFyeisM5BycSI",
      "title": "Examples: The good one for the text, the bad ones for the appendix",
      "url": "https://github.com/core-wg/href/issues/24",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "There are corner cases that are explained, but they'd be easier understood with examples.\r\n\r\nBut these examples distract the reader -- we don't *want* a user to see `coap://x/%2F/` anywhere but in the cabinet of curiosities.\r\n\r\nSuggeston: Have a list of odd cases of URIs ('scheme://foo///') and invalid CRIs (no authority and then empty path) at end of document, which then the corner case descriptions can point to rather than have a figure of their own each (flooding the user with bad examples on a thing that should be straightforward and easy).",
      "createdAt": "2022-01-14T14:50:47Z",
      "updatedAt": "2022-03-07T22:16:38Z",
      "closedAt": "2022-03-07T22:16:38Z",
      "comments": [
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "Started this with appendix A in -09, more work needed.",
          "createdAt": "2022-01-15T23:08:27Z",
          "updatedAt": "2022-01-15T23:08:27Z"
        }
      ]
    },
    {
      "number": 25,
      "id": "I_kwDOFyeisM5CnH4Z",
      "title": "inconsistent definition of reg-name?",
      "url": "https://github.com/core-wg/href/issues/25",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "reg-name is one or more here:\r\n```\r\nC4.   A registered name is a sequence of one or more _labels_ [...]\r\n```\r\nbut zero or more here:\r\n```\r\nhost-name   = (*text) ; lowercase, NFC labels\r\n```\r\n",
      "createdAt": "2022-01-28T15:46:25Z",
      "updatedAt": "2022-03-05T22:05:52Z",
      "closedAt": "2022-03-05T22:05:52Z",
      "comments": [
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "3986 allows empty hostnames:\r\n\r\n```\r\n   reg-name      = *( unreserved / pct-encoded / sub-delims )\r\n```\r\n\r\nSo it seems to me that C4 needs to be relaxed.",
          "createdAt": "2022-01-28T16:11:36Z",
          "updatedAt": "2022-01-28T16:11:36Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "The constraints will need some overhaul in general when we're through with the mechanisms (esp. as they are barely constraints any more).",
          "createdAt": "2022-02-11T14:33:19Z",
          "updatedAt": "2022-02-11T14:33:19Z"
        }
      ]
    },
    {
      "number": 26,
      "id": "I_kwDOFyeisM5DCiR7",
      "title": "Path rules of Section 6.1 possibly incorrect ",
      "url": "https://github.com/core-wg/href/issues/26",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "Patch available"
      ],
      "body": "In \u00a76.1 (CRI to URI conversion) when defining the path rules we say (note the \"Otherwise\"):\r\n\r\n_If the discard item is not present and the CRI reference contains an authority that is true, the path component of the URI reference is prefixed by the zero-length string. **Otherwise**, the path component is prefixed by a slash (`/`) character._\r\n\r\nSo, it'd seem that prefixing with `/` applies to the `null` authority as well as a _real_ authority.  Following this interpretation `[null, [\"a\"]]` would convert into `//a/`, whilst what we probably want is `//a` instead?\r\n\r\n\r\n",
      "createdAt": "2022-02-05T00:28:22Z",
      "updatedAt": "2022-02-21T15:39:43Z",
      "closedAt": "2022-02-21T15:39:43Z",
      "comments": []
    },
    {
      "number": 28,
      "id": "I_kwDOFyeisM5DEgX-",
      "title": "Reference resolution section: ambiguous prose",
      "url": "https://github.com/core-wg/href/issues/28",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "In [Section 5.3, third bullet](https://www.ietf.org/archive/id/draft-ietf-core-href-09.html#section-5.3-3.3), we say (note the last sentence):\r\n\r\n_\"If the value of discard is true in the CRI reference, replace the path in the buffer with the empty array, unset query and fragment, and set a true authority to null. If the value of discard is an unsigned number, remove as many elements from the end of the path array; if it is non-zero, unset query and fragment. **Set discard to true in the buffer.**\"_\r\n\r\nIt is not clear whether setting discard to true is triggered by matching the first condition (_\"If the value of discard is true in the CRI reference\"_), the second (_\"If the value of discard is an unsigned number\"_), or maybe even its sub-clause (_\"if it is non-zero\"_).\r\n\r\n",
      "createdAt": "2022-02-06T16:51:49Z",
      "updatedAt": "2022-02-07T00:29:38Z",
      "closedAt": "2022-02-07T00:29:38Z",
      "comments": [
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "This is meant to be unconditional.  Discard is always true after step 3.  I made a small edit to make this more obvious in #29",
          "createdAt": "2022-02-06T17:39:18Z",
          "updatedAt": "2022-02-06T17:39:18Z"
        }
      ]
    },
    {
      "number": 30,
      "id": "I_kwDOFyeisM5DEmZw",
      "title": "Reference resolution section: funny text in point 5",
      "url": "https://github.com/core-wg/href/issues/30",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "In [point 5 of Section 5.3](https://www.ietf.org/archive/id/draft-ietf-core-href-09.html#section-5.3-3.5), we say:\r\n\r\n_\"Apart from the path and discard, copy all non-null sections from the CRI reference to the buffer in sequence; **unset fragment if query is non-null and thus copied.**\"_\r\n\r\nI find the \"and thus copied\" a bit funny.  Is this saying that \"if query is non-null in the reference, the fragment is to be unset in the resolved CRI\"?",
      "createdAt": "2022-02-06T18:29:59Z",
      "updatedAt": "2022-03-05T22:05:37Z",
      "closedAt": "2022-03-05T22:05:37Z",
      "comments": []
    },
    {
      "number": 31,
      "id": "I_kwDOFyeisM5DEovu",
      "title": "Reference resolution section: instructions may be incorrect?",
      "url": "https://github.com/core-wg/href/issues/31",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Given the following:\r\n\r\n* base `[-2, [\"foo\", 4711], [\"pa\", \"th\"], [\"query\"], \"frag\"]`, and\r\n* ref `[null, [\"a\"]]`\r\n\r\nthe resolved reference would be `[-2, [\"a\"]]`, right?\r\n\r\nIf so, I am not sure how following 1-5 in Section 5.3 this can be achieved.  In particular, what would prompt us to drop path, query and fragment from the base?\r\n\r\n(See also how [my code](https://github.com/thomas-fossati/href/blob/31bb29a8c3bf6da01834ffc449ea489f7cfc3e27/cri.go#L280) attempts at translating the prose from Section 5.3.)",
      "createdAt": "2022-02-06T19:11:18Z",
      "updatedAt": "2022-02-25T14:50:05Z",
      "closedAt": "2022-02-25T14:50:05Z",
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "The discard value, even though not serialized when there is a scheme and/or authority, is implicitly DISCARD-ALL (true) in item 3 of 5.3. This is due to section 5.1 (\"which in CRI references never carry a discard section (the value of discard defaults to true).\"), but could be made a bit more explicit there, eg. with\r\n\r\n> If the value of discard is true in the CRI reference **(which is implicitly the case when scheme and authority are present in the reference)**, ...\"",
          "createdAt": "2022-02-11T13:58:48Z",
          "updatedAt": "2022-02-11T13:58:48Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "body": "\r\n\r\n\r\n\r\n> The discard value, even though not serialized when there is a scheme and/or authority, is implicitly DISCARD-ALL (true) in item 3 of 5.3. This is due to section 5.1 (\"which in CRI references never carry a discard section (the value of discard defaults to true).\"), but could be made a bit more explicit there, eg. with\r\n> \r\n> > If the value of discard is true in the CRI reference **(which is implicitly the case when scheme and authority are present in the reference)**, ...\"\r\n\r\nThanks @chrysn for the clarification.  I reckon the text you proposed would be a useful addition.",
          "createdAt": "2022-02-21T16:25:31Z",
          "updatedAt": "2022-02-21T16:25:31Z"
        }
      ]
    },
    {
      "number": 32,
      "id": "I_kwDOFyeisM5ETwgu",
      "title": "CDDL for absolute CRIs",
      "url": "https://github.com/core-wg/href/issues/32",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "It'd be convenient to have CDDL that represents an `Absolute-CRI` alongside the existing `CRI-Reference`.\r\n\r\nThat'd make life easier for specifications that depend on the absolute form (e.g., EAT's profile claim).",
      "createdAt": "2022-02-21T16:50:46Z",
      "updatedAt": "2022-03-05T22:06:46Z",
      "closedAt": "2022-03-05T22:06:46Z",
      "comments": []
    },
    {
      "number": 34,
      "id": "I_kwDOFyeisM5Ek9Dz",
      "title": "Explain DISCARD",
      "url": "https://github.com/core-wg/href/issues/34",
      "state": "CLOSED",
      "author": "thomas-fossati",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "The semantics of discard is not clearly explained and that may lead to confusions.\r\n\r\nWe should have a small section (nearby 5.1) where the concept is clearly explained, which can be referenced from other places (e.g., when the resolution algorithm is explained).",
      "createdAt": "2022-02-25T14:52:17Z",
      "updatedAt": "2022-03-08T01:21:30Z",
      "closedAt": "2022-03-08T01:21:30Z",
      "comments": [
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "Has been closed by #39 ",
          "createdAt": "2022-03-08T01:21:30Z",
          "updatedAt": "2022-03-08T01:21:30Z"
        }
      ]
    },
    {
      "number": 40,
      "id": "I_kwDOFyeisM5FKmNW",
      "title": "User information",
      "url": "https://github.com/core-wg/href/issues/40",
      "state": "CLOSED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "While user information with passwords is deprecated, simple user information (alice@example.com) is very much alive.\r\n\r\nCan we retrofit this?",
      "createdAt": "2022-03-05T17:31:46Z",
      "updatedAt": "2022-03-07T22:17:38Z",
      "closedAt": "2022-03-07T22:17:38Z",
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Note that mailto:alice@example.com is *not* userinfo, it is merely a path component of a URN.",
          "createdAt": "2022-03-06T08:40:56Z",
          "updatedAt": "2022-03-06T08:40:56Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "Of course. This is about userinfo in an authority; the full example is https://alice@example.com\r\n",
          "createdAt": "2022-03-06T09:31:33Z",
          "updatedAt": "2022-03-06T09:31:33Z"
        }
      ]
    },
    {
      "number": 43,
      "id": "I_kwDOFyeisM5Fks8o",
      "title": "Can't have overscaped dots",
      "url": "https://github.com/core-wg/href/issues/43",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "> Any character in the elements of a host-name item that is a dot (\".\"), or not in\u2026\r\n\r\nIt's a nice idea to escape dots (and consistent with the other delimited values), but a dot is unreserved, and thus\r\n* would be normalized back into dots on the syntax level (RFC3986 section 2.3 and 6.2.2.2, \"URIs that differ in the replacement of an unreserved character with its corresponding percent-encoded US-ASCII octet are equivalent\")\r\n* therefore also, \"percent-encoded octets in the ranges of ALPHA (%41-%5A and %61-%7A), [...], period (%2E), [...] should not be created by URI producers\" (RFC3986 section 2.3)\r\n\r\nI think we should avoid ways to create different CRI representations of the same URI, and only produce preferred URIs.\r\n\r\nSuggestion: remove the \"that is a dot\" part, and forbid dots from being present in the host parts (both in strings and byte strings).",
      "createdAt": "2022-03-12T10:29:15Z",
      "updatedAt": "2023-05-10T13:25:10Z",
      "closedAt": "2023-05-10T13:25:10Z",
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Note: There's a line `https://interior%2edot/` somewhere around, which would then probably turn into a note that this is not a normalized URI, and after normalizing the URI things are easier.",
          "createdAt": "2023-01-20T16:10:26Z",
          "updatedAt": "2023-01-20T16:10:26Z"
        }
      ]
    },
    {
      "number": 44,
      "id": "I_kwDOFyeisM5FkvWE",
      "title": "Allowed over-PETting",
      "url": "https://github.com/core-wg/href/issues/44",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Do we allow bytes in PET strings that are not necessarily PET? (All examples will only deal in patsh)\r\n\r\nThere are two kinds of them:\r\n\r\n* Unreserved characters (or characters that are reserved and not on the exclusion list)\r\n\r\n  Examples: `[\"a\", [\"b\", 'c']]` would produce `a/b%63` which is equivalent under syntax normalization to `a/bc` and thus `[\"a\", \"bc\"]`, `[\"a, [\"b\", '/']]` is `a/b%2F` but so is `[\"a\", \"b/\"]`\r\n\r\n* Byte sequences that accidentally form valid UTF8 pairs\r\n\r\n  Examples: `[\"hash\", [\"\", h'fff09f98acfe']]` could also be `[\"hash\", [\"\", h'ff', \"\ud83d\ude2c\", h'fe']]`\r\n\r\nIt'd be easy to \"just specify\" that PET bytes must only be used to the minimal possible extent, but that means that someone producing one of these weird URIs that contain binary data not only needs to decide byte-by-byte if it's maybe an unreserved (or allowed) character -- that is easy --, but also whether a sequence of bytes might accidentally be valid UTF-8, and that needs looking ahead. (It doesn't need backtracking thanks to the construction of UTF-8, but it's still heavy, especially as not all that loos like UTF-8 really is valid Unicode code points).\r\n\r\nEven if we required hard checking in the producers (which realistically would be converters, for nobody with CRIs in mind will use binary URIs), constrained nodes that pass on CRIs will likely not verify those details, and thus pass them on...\r\n\r\nUnlike other complexities of PET, this one is not on URIs but on the URI-to-IRI conversion of [RFC3987 section 3.2](https://datatracker.ietf.org/doc/html/rfc3987#section-3.2) -- but people won't like procedural requirements based on that. (Especially because \"strictly legal UTF-8 sequence\" is not a simple definition, and because IRIs go on forbidding some Unicode characters like the RIGHT-TO-LEFT OVERRIDE of the 3.2.1 example, unlike CoAP which allows \"any character\"). Hmpf... \ud83e\udd14",
      "createdAt": "2022-03-12T11:18:23Z",
      "updatedAt": "2023-06-23T10:56:07Z",
      "closedAt": "2023-06-23T10:56:07Z",
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "It could be argued that the effort for checking all the UTF-8 stuff is not too bad, as the user already needs a CBOR implementation. A CBOR processor needs to be able to tell whether a byte sequence is legal UTF-8 when doing str processing -- but only if it checks for validity and not only wellformedness.",
          "createdAt": "2022-03-12T11:24:37Z",
          "updatedAt": "2022-03-12T11:24:37Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Brief correction to an earlier point: I don't think now that this is related to the IRI conversion; the complexity is \"only\" from the CoAP (and CBOR because we equate CoAP's string with CBOR's tstr) requirement of having Net-Unicode UTF-8 data. Bad enough, given that the simple high-bits decoding of UTF-8 into a numeric code point is not enough -- the sequence of valid Unicode points has holes (to make UTF-16 work).\r\n\r\nBy the way, string vs tstr spins off *another* subtlety -- a CoAP option can't contain \"\\u0082\" (part of the \"C1 controls\" CoAP's Net-Unicode requirement rules out), whereas CBOR's tstr can have that, and CoAP options can't start with \"\\ufeff\", the zero width no-breaking space, or, pardon my language, the BOM, nor unassigned characters in the current Unicode version) -- not sure how to broach this.\r\n\r\nMy working assumption will be that any CBOR text string in CRIs is limited to Net-Unicode (to keep the conversion to CoAP working), but that many users will just take whatever is in a CBOR text string (be it non-Net-Unicode or even non-UTF-8) and stuff it into CoAP options anyway.\r\n\r\n---\r\n\r\nBecause of the general complexity, and the newly discovered point of being really Unicode version dependent, I suggest\r\n\r\n* allow over-PET-ting (although it SHOULD NOT be done, except when a system can not afford the computational complexity -- but we can't make it a MUST as that'd break when different Unicode standards are in use)\r\n* state that over-PET-ted CRIs (and, thus, for many systems, potentially any PET URI) is denormalized, and their comparison has the usual consequences of comparing denormalized things.\r\n* point out that hard decisions about PET characters are only necessary for applications that convert arbitrary URIs (and IRIs) to CRIs -- systems that build CRIs from data they know to be Net-Unicode just need to decide what to do with the reserved set. (Of course this only works for systems that can be sure their internal data is valid Unicode).\r\n\r\n(And this is all only about systems that work with PET URIs, which IMO will not be constrained systems anyway because to them these CRIs are opaque).\r\n\r\n---\r\n\r\nThe alternative is to allow all UTF-8 (i.e. everything that is a valid code point; no surrogates, but unassigned or C1 is OK) in CRIs. That's reasonably easy to produce for a URI-to-CRI converter.\r\n\r\nThe downside would be that some non-PET CRIs are inexpressible in CoAP -- although practically I doubt that this is or can be enforced, and if the server thinks that the data is not Net-Unicode, it'll reject it just as if the request was bad in any other way.\r\n\r\n... and by the way, `ccdl ... verify` is way too friendly, it should spit out all kinds of unholy non-Net-Unicode outputs just to make this visible.",
          "createdAt": "2022-04-08T10:56:06Z",
          "updatedAt": "2022-04-08T10:56:06Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "> Do we allow bytes in PET strings that are not necessarily PET?\r\n\r\nI would prefer to minimize (normalize) this.\r\n\r\nI would also like to reduce the impact that the details of net-unicode have on this conversion.\r\n\r\nSo I think I'm on the side of \"the alternative\".\r\n\r\nI would prefer to be able to phrase this in a single-pass linear algorithm (look at the first byte of a byte string.  If that stands for unreserved ASCII, or starts a valid UTF-8 character \u2265 U+0080, move this over to the preceding text string.).  No examination from behind :-)",
          "createdAt": "2022-07-04T19:50:47Z",
          "updatedAt": "2022-07-04T19:50:47Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "\"Any UTF-8\" sounds good to me; the consequence of subtly nudging CoAP to accept non-Net-Unicode is fine with me.\r\n\r\nIn which direction do we want to shape expectations when it comes to violating these rules? Would we ask of a CRI processor (that takes CRIs as semi-trusted input from third parties and forwards them) to verify this, or may they get away with claiming that this was what they got so this is what they pass on? (How's that on the CBOR side? If a device receives a text string that contains invalid bytes and forwards it unchecked, is it assisting in an attack or is that permissible?).\r\n",
          "createdAt": "2022-09-16T14:24:50Z",
          "updatedAt": "2022-09-16T14:24:50Z"
        },
        {
          "author": "henkbirkholz",
          "authorAssociation": "COLLABORATOR",
          "body": "That \"passing\"really depends on the application? If \"passing\" involves a CBOR parser that detects invalid CBOR and still passes it on, that seems like aiding and abetting, I believe?",
          "createdAt": "2022-09-16T14:28:01Z",
          "updatedAt": "2022-09-16T14:28:01Z"
        },
        {
          "author": "henkbirkholz",
          "authorAssociation": "COLLABORATOR",
          "body": "Depends on the application again, I think. If is is important to the actual recipient to self-determine that a CBOR message was invalid, then passing it on by forwarding+parsing parties seem okay - that would be intentional in such a case.",
          "createdAt": "2022-09-16T14:31:05Z",
          "updatedAt": "2022-09-16T14:31:05Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "A statement could be that \"Recipients that rely on the validity of UTF-8 inside text strings or the PET to be encoded precisely need to verify that property themselves (as highly constrained devices might not able to verify these details in data they pass on).\"",
          "createdAt": "2022-09-16T14:40:26Z",
          "updatedAt": "2022-09-16T14:40:26Z"
        },
        {
          "author": "henkbirkholz",
          "authorAssociation": "COLLABORATOR",
          "body": "sounds good to me, in non-normative text",
          "createdAt": "2022-09-16T14:42:41Z",
          "updatedAt": "2022-09-16T14:42:41Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "This is partially addressed by #64 but probably needs more text extracted and added about the actual PET generation requirements.",
          "createdAt": "2023-05-10T13:27:55Z",
          "updatedAt": "2023-05-10T13:27:55Z"
        }
      ]
    },
    {
      "number": 46,
      "id": "I_kwDOFyeisM5Fk6s_",
      "title": "Empty paths with the two no-authority versions",
      "url": "https://github.com/core-wg/href/issues/46",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "There is something odd about `a:` (which is in the examples): it is both the URI representation of `[\"a\", null]` (= `[\"a\"]`) and `[\"a\", true]`, because the NOAUTHORITY-LEADINGSLASH doesn't produce a leading slash on its own. That does in a sense match what we do with the slash of URL-style CRIs, but having two representations that both convert to the same URI is weird because\r\n\r\na. that makes the URI-to-CRI conversion ambiguous, and\r\n\r\nb. resolving a `foo` (`[/discard/ 1, [\"foo\"]]`) against that gives different results depending on how the base is expressed.\r\n\r\nA mitigation for b would be to turn discard > 1 on a NOAUTHORITY-NOSLASH into a NOAUTHORITY-LEADINGSLASH (that might be necessary anyway to make `foo:bar` + `../baz` which AIU resolves to `foo:/baz` resolve correctly) -- but maybe there is a better more comprehensive solution.\r\n\r\n(I have, briefly, through that our current trailing slash approach for URL-style CRIs makes the need for the distinguished noauthorities go away -- but it doesn't, at least not on its own.)",
      "createdAt": "2022-03-12T14:36:02Z",
      "updatedAt": "2023-01-20T15:06:38Z",
      "closedAt": "2023-01-20T15:06:37Z",
      "comments": [
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "To me, it would be more orthogonal to have `a:` be [\"a\"].  That makes the name \"LEADINGSLASH\" suboptimal.\r\n",
          "createdAt": "2022-07-15T14:02:34Z",
          "updatedAt": "2022-07-15T14:02:34Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "So [\"a\", true] would be malformed.",
          "createdAt": "2022-07-15T14:04:30Z",
          "updatedAt": "2022-07-15T14:04:30Z"
        }
      ]
    },
    {
      "number": 48,
      "id": "I_kwDOFyeisM5Fk73x",
      "title": "Some CRI references need `./` in their URI references",
      "url": "https://github.com/core-wg/href/issues/48",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "Current conversion rules from CRIs to URIs don't peek into the first path segment -- but they should: `[1, [\"foo\"]]` can be converted to `foo`, but `[1, [\"foo:bar\"]]` needs to be expressed as `./foo:bar` to avoid ambiguity against scheme \"foo\".\r\n\r\nI think such a rule is missing (but I don't quite get all of the implications of the various \"..., the conversion fails\" statements, as they're expressed in terminology of the target syntax and thus very hard to apply to the object one has at hand when interpreting them).\r\n\r\nExample is in the lastentry of https://github.com/core-wg/href/pull/47\r\n\r\nAlternative is to fail conversion for such references altogether (but given it is a goal to convert URI references where possible, we should try to make it happen -- even though I'm not a big fan of that goal itself).",
      "createdAt": "2022-03-12T14:56:08Z",
      "updatedAt": "2022-09-07T19:57:43Z",
      "closedAt": "2022-09-07T19:57:43Z",
      "comments": []
    },
    {
      "number": 50,
      "id": "I_kwDOFyeisM5Fk8Y2",
      "title": "Questions and oddities found updated micrurus implementation",
      "url": "https://github.com/core-wg/href/issues/50",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Most has gone into issues, some are not really standalone issues but more curious observations I'd like to check with you:\r\n\r\n* [x] I've had a few test cases like `[[\"path-component\"]]`, had to turn them into `[True, [\"path-component\"]]` because discard is not optional any more. I think that's part of the \"we do things simpler to ease implementations\" changes, I just want to be sure we're happy with that extra. (We likely are: The relative references about whose size I care most are those with discard=1 that correspond to URI references like \"path-component\", and that wouldn't have been the default anyway).\r\n\r\n* [ ] Relatedly, the empty CRI reference `[]` is currently valid, but not very useful (it reuses the base's scheme but sets the authority to NOAUTH-LEADINGSLASH) and thus goes to `coap:` in the examples (yes, no slash, see https://github.com/core-wg/href/issues/46). Also, just checking whether we're happy with that.\r\n\r\n* [x] Is there, in a (full) CRI, a difference between path being null and path being an empty list? (I currently force both into an empty list unless discard = 0 where it does make a difference, otherwise I see equivalent forms of full CRIs where one has [] and one null as a path).\r\n\r\n  [edit: Is now https://github.com/core-wg/href/issues/59]\r\n\r\n* [x] The building of the host is the only place where we create a text-or-PET list not from an actual CBOR array, but from iteration-until-a-condition-is-met on the tail of a array. I've briefly checked whether this precedent would allow us to save a byte somewhere again, but probably not. (Paths were given an array length for good reason, and the item following queries is just a text-or-pet again).\r\n\r\n  [edit: I think I'm just OK with this]",
      "createdAt": "2022-03-12T15:05:17Z",
      "updatedAt": "2023-05-10T13:37:27Z",
      "closedAt": "2023-05-10T13:37:27Z",
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "1 is just a remnant of my implementation.\r\n\r\nplan for 2: not allow that as a CRI\r\n\r\nplan for 3: allow null as path only when essential.\r\n\r\n4: think more.",
          "createdAt": "2022-04-08T14:50:42Z",
          "updatedAt": "2022-04-08T14:50:42Z"
        }
      ]
    },
    {
      "number": 51,
      "id": "I_kwDOFyeisM5MLHRC",
      "title": "PET: Counter-intuitive on irregular separators (or: \"Maybe 3986 was right recommending escaping\")",
      "url": "https://github.com/core-wg/href/issues/51",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "This is one of the \"let's briefly think about it, but probably we can't do much about it, at most maybe point it out in the document\" issues.\r\n\r\nFor slashes (the subdelim we chose to be our distinguished one following CoAP which followed URI references) -- thus, anyone using it to structure their data gets nice semantic separation: `/bands/AC%2FDC/tours/2022` gets nicely split into `[\"bands\", \"AC/DC\", \"tours\", \"2022\"]`.\r\n\r\nOnce we get into PET territory, roles are reversed, because we put as much as possible into text strings: `series;Steins%3BGate;episode;1` becomes `[[\"series;Steins\", ';', \"Gate;episode;1\"]]`, which is just *not* split on the semantic boundaries.\r\n\r\nGiven that URIs don't tell us which delimiter they choose for meaning, and that they might mix and match them (`series(2);Steins%3BGate;episode;I%20could%20%28But%20I%20Won't%29`[^1]), I think that's acceptable -- after all, PETs *are* an afterthought to ensure we get full URI coverage, and our hand is forced by the choices of CoAP, whose options we want to preserve 1:1 in CRIs. We *could* pick a different structure for PETs[^2], but that'd sacrifice the nicely consistent property that a PET sequence containing only one text1 element behaves exactly like the text choice.\r\n\r\nI have a hunch that this would all have been a bit easier if CoAP had taken [what could be read as a 3986 recommendation](https://mailarchive.ietf.org/arch/msg/art/R0svkWaoUCE2C-q9OmgE-gKzlss/) and made subdelims in a Uri-Path option always produce the corresponding percent encoded point (and not just on neither-reserved-nor-unreserved characters and slashes) -- but that ship has sailed.\r\n\r\nIf it's even worth a mention, a line could say that\r\n\r\n> Unlike the text elements of a path or a query, which through CoAP's heritage are designed to be processable element-wise, a `text-pet-sequence` does not usually produce semantically meaningful array elements. This is a consequence of the flexibility in delimiters offered in URIs. Applications designed for using CRIs should avoid using the extended-cri feature. Applications using existing URI structures that contain `text-pet-sequence` elements typically need to process them byte by byte.\r\n\r\n[^1]: The series \"Steins;Gate\" sadly has no episode with actual parentheses in the title -- after all, the choice in lemmata containing subdelims is limited.\r\n[^2]: Eg. such that it would be `[[\"series\", '(', \"2\", ');', \"Steins;Gate\", ';', \"episode, ';', \"I could (But I Won't)\"]]`",
      "createdAt": "2022-06-21T06:59:22Z",
      "updatedAt": "2022-09-07T19:58:20Z",
      "closedAt": "2022-09-07T19:58:20Z",
      "comments": []
    },
    {
      "number": 52,
      "id": "I_kwDOFyeisM5MhVHx",
      "title": "vectors: Annotate with required features",
      "url": "https://github.com/core-wg/href/issues/52",
      "state": "OPEN",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [
        "chrysn"
      ],
      "labels": [
        "test vectors"
      ],
      "body": "Rough idea:\r\n* Require at CI time that vectors are some normalized JSON\r\n* Add small tool that orchestrates the CDDL gem to determine which features are used in a CRI and rewrites the vectors\r\n* Assert that this doesn't leave a diff at CI time\r\n\r\n@cabo could leave me a pointer to the right cddl invocaton",
      "createdAt": "2022-06-24T14:13:56Z",
      "updatedAt": "2022-07-04T19:02:15Z",
      "closedAt": null,
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Nulls need some extra work, and we don't have a a full CDDL description of CRIs yet.",
          "createdAt": "2022-06-24T14:19:20Z",
          "updatedAt": "2022-06-24T14:19:20Z"
        }
      ]
    },
    {
      "number": 53,
      "id": "I_kwDOFyeisM5MhhHw",
      "title": "Appendix A (and outside): Add selected test vectors",
      "url": "https://github.com/core-wg/href/issues/53",
      "state": "OPEN",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "test vectors"
      ],
      "body": "We should have\r\n* very few good examples\r\n* an example for each of the small print items\r\n\r\npicked from the vectors into the text",
      "createdAt": "2022-06-24T14:59:26Z",
      "updatedAt": "2022-07-04T19:01:53Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 59,
      "id": "I_kwDOFyeisM5cc8vD",
      "title": "CRIs allow ambiguous encodings for empty path list",
      "url": "https://github.com/core-wg/href/issues/59",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "While it makes a difference for CRI-Ref, for a CRI there is no difference between `path = []` and a `null` in that place.\r\n\r\nI think we should make a decision which of those is the normal one, and forbid the other.  (Probably in prose -- forbidding it in CBOR would make it local-part differ between CRI and CRI-ref).",
      "createdAt": "2023-01-20T16:00:09Z",
      "updatedAt": "2023-05-10T12:36:10Z",
      "closedAt": "2023-05-10T12:36:10Z",
      "comments": []
    },
    {
      "number": 60,
      "id": "I_kwDOFyeisM5fXAp6",
      "title": "[late suggestion] Considering binary paths",
      "url": "https://github.com/core-wg/href/issues/60",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "I know it's late in the design process, but here's an idea I'd like to run by you all. I'm fine if it's turned down, but I do see some merits.\r\n\r\nSo far, we're taking CoAP's stance that Uri-Path (and -Query and -Fragment) are UTF-8 encoded strings. This is consistent with the CoAP model and with readable URIs.\r\n\r\nBut thinking at CoAP protocols, there are time and again places where it would have been great if we had binary paths. A-ReaLiSt (don't quote me on the capitalization) avoided putting things in path components purely because they couldn't count there. The OSCORE option could just as well have been a path segments with some squinting if it could be enumerated / counted data. So maybe on the path to a CoAP Internet Standard, we might loosen up a bit on the encoding requirements there. UTF-8 would still be the recommendation, but if someone wants to make their path %00%00%00%01, let them. (This would be consistent with the general trend to not work in terms of IRIs again, as the display convention of \"if it's UTF-8, show it as that\" works reasonably well in browser practice).\r\n\r\nSo let's consider not putting another nail in that door, and making our URI components binary. What would change?\r\n\r\nLegal (by today's proposed standards) CoAP URIs would stay single component. Some single-component CRIs would not be expressible in CoAP, but that's already the case now (looking at the net-unicode discussion). And after all, it's the server that is the authority on what is a valid URI, so on a CoAP scheme these wouldn't be minted so far anyway.\r\n\r\nText-or-PET would become Binary-or-percent-encoded-subdelim, simplifying the rules dramatically in that what used-to-be PET is now percent-encoded-subdelim, and the valid range of that is easily characterized.\r\n\r\nThe two large downsides I see are:\r\n* Somewhat loosened identity to CoAP (but not on a topic where that's critical)\r\n* Doesn't look that clean in diagnostic notation (and is often semantically not what is meant)\r\n* It'd be a late change\r\n\r\nBut I like the upsides:\r\n\r\n* Deciding what goes where going from a URI to Text-or-PET is much easier\r\n* Text-or-PET would be used even less (in particular, those BitTorrent URIs that have binary data in there can transport them trivially now, provided they took the \"right\" side of the question of how to express the byte that happens to represent subdelimiters)\r\n* Door stays open for using with protocols that allow binary URI components, without hindering protocols that think in terms of UTF-8 encoded URI components.",
      "createdAt": "2023-02-25T23:03:01Z",
      "updatedAt": "2023-03-03T15:52:07Z",
      "closedAt": "2023-03-03T15:52:07Z",
      "comments": [
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "I had similar thoughts about a dozen times before and after CoAP was approved in 2013.  My way to quell them was FETCH...\r\n",
          "createdAt": "2023-02-25T23:44:05Z",
          "updatedAt": "2023-02-25T23:44:05Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Resolution: We leave things as-is.\r\n\r\nIf CoAP ever changes, we can introduce a CRI extension that opens up a `/ bstr` in the same place as text-or-pet. Servers would use that when they announce their binary path segments (but probably stick with tstr for others, especially given they probably offer alternative longer URIs for clients that can't). Applications that use binary data would also use it that way then (provided they're happy with what it does to delimiters).",
          "createdAt": "2023-03-03T15:51:58Z",
          "updatedAt": "2023-03-03T15:51:58Z"
        }
      ]
    },
    {
      "number": 61,
      "id": "I_kwDOFyeisM5f5V8y",
      "title": "Future compatibility: State unparsable CRIs are like NaN",
      "url": "https://github.com/core-wg/href/issues/61",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [
        "chrysn"
      ],
      "labels": [],
      "body": "Ensure that we require processors to properly process \"invalid\" CRIs (because of extensions they don't know, such as any possible bstr in a path or query as in #60, which is to be closed).\r\n\r\nFailure boundary is CRI. We could use text comparing it to NaNs (as long as we don't normatively reference IEEE ;-) ).\r\n\r\nIn the same area, we should promise we won't have indefinite-length components even in extensions (for those can not be skipped trivially).",
      "createdAt": "2023-03-03T15:48:06Z",
      "updatedAt": "2023-05-09T21:09:45Z",
      "closedAt": "2023-05-09T21:09:45Z",
      "comments": []
    },
    {
      "number": 69,
      "id": "I_kwDOFyeisM5oUhT8",
      "title": " CRIs allow ambiguous encodings for empty query",
      "url": "https://github.com/core-wg/href/issues/69",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Implementing CRI to CoAP options conversion I noticed that IIUC we have the same situation as in #59 for the query component as well:\r\n\r\nA URI with an absent query (eg. `http://x/p#f`) could be expressed with a `null` or a `[]` CBOR item. Note that this is in contrast to the URI with an empty query, eg. `http://x/p?#f`, is encoded as `[\"\"]`: There, the empty trailing list item represents a trailing delimiter character. (At least that's the rules of 7252; I didn't check with the current wording in href. If that has different rules, we should fix it).\r\n\r\nWe have two apparent options that are both not ideal:\r\n* Prescribe that a (full) CRI with absent query always has the query encoded as `[]`. This is consistent with what we do for the path, but means one more byte for most encoded CRIs because it negates trailing-null-removal.\r\n* Prescribe that such a CRI always has the query encoded as `null`. This saves the byte but is inconsistent with the path handling.\r\n\r\n... and two more daring ones:\r\n* Flip the coin on #63 and say that a full CRI never has the empty list in the path either. More processing, but more consistency.\r\n* Do something clever about the elision rules. Like, say that it's always lists in full CRIs, but on full CRIs the empty items are elided just as the nulls are. This one is clearly not thought through, but is listed as it may give both consistency and efficiency if we find a good wording.",
      "createdAt": "2023-06-09T16:48:08Z",
      "updatedAt": "2023-07-10T18:32:19Z",
      "closedAt": "2023-07-10T18:32:19Z",
      "comments": [
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "Actually, Section 5.1 says:\r\n\r\n```\r\n* an empty path in a `CRI` MUST be represented as the empty array `[]`\r\n  (note that for `CRI-Reference` there is a difference between empty\r\n  and absent paths, represented by `[]` and `null`, respectively),\r\n```\r\n\r\nso consistent would be to encode absent as `null` (which will be the common case), and empty (`?` present) as `[]`.\r\n",
          "createdAt": "2023-06-23T14:25:18Z",
          "updatedAt": "2023-06-23T14:27:52Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "If we encode `?` as [], do we still encode `?&` as, `[\"\", \"\"]` to conform to\r\n\r\n> the query component of the URI reference consists of the value of each item, separated by an ampersand (\"&\") character\r\n\r\n? That sounds like it'd bring us into the same trouble we have with the Uri-Path option (where CRIs go the other way and distringuish between `[]` and `[\"\"]`.\r\n\r\nDoing the IMO consistent thing (no query = `[]`, `?` = `[\"\"]`, `?&` = `[\"\", \"\"]`) has the interesting property that path=null,query=[] in a CRI reference strips the query part from a CRI, which is something URI references can not do (just as they can't do discard=0).",
          "createdAt": "2023-06-28T07:11:15Z",
          "updatedAt": "2023-06-28T07:11:15Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "The vast majority of CRIs will not have a query part.  Encoding an absent query as a null saves one byte for each of these, so this probably does not need a coin flip.\r\n\r\n\u2794 represent absent query with null, disallow [] in CRI.\r\n\r\nCRI-References:\r\nlocal part for #frag = [null, null, fragment]\r\nURIs cannot express [null, [], null], this would remove the query, which then turns into a null in the CRI",
          "createdAt": "2023-07-07T14:14:46Z",
          "updatedAt": "2023-07-07T14:14:46Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "So in the CDDL,\r\n\r\nquery       = [*text]\r\n\r\nthe * is used for CRI-References only.\r\nFor CRIs, this could say [+text], but that would complicate the CDDL first.",
          "createdAt": "2023-07-07T14:17:00Z",
          "updatedAt": "2023-07-07T14:17:00Z"
        }
      ]
    },
    {
      "number": 70,
      "id": "I_kwDOFyeisM5olnYw",
      "title": "Revisiting the just-slash and no-slash in URIs with authority",
      "url": "https://github.com/core-wg/href/issues/70",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "I'm in the process of aligning aiocoap with the CRI draft; essentially, I'd like to avoid that URI string processing happens unless the user explicitly gives something in form of a URI. (For context, inside a server resource paths are stored as lists, so the handler for `/time/current/` is placed with a key of `[\"time\", \"current\", \"\"]` already).\r\n\r\nThe good thing is that for this purpose I can ignore all the advanced CRI features as I can't convert them anyway.\r\n\r\nThe bad thing is that path conversion is only trivial for *most* cases. I've assembled a table of a few relevant and illustrative cases, only looking at the list of Uri-Path and path items:\r\n\r\n|                                     | CoAP                                  | CRI             |\r\n|-------------------------------------|---------------------------------------|-----------------|\r\n| coap://x                            | []                                    | []              |\r\n| coap://x/                           | []                                    | [\"\"]            |\r\n| coap://x/a                          | [\"a\"]                                 | [\"a\"]           |\r\n| coap://x/a/                         | [\"a\", \"\"]                             | [\"a\", \"\"]       |\r\n| coap://x//a                         | [\"\", \"a\"]                             | [\"\", \"a\"]       |\r\n| coap://x//                          | [\"\"]                                  | [\"\", \"\"]        |\r\n| coap://x//a/                        | [\"\", \"a\", \"\"]                          | [\"\", \"a\", \"\"]    |\r\n\r\n(No query or fragment parts are shown because they're fully orthogonal; same for relative references.)\r\n\r\nIf this table is correct, the CoAP option list and CRI are distinct if the CRI list consists exclusively of empty strings. Interoperability has already been hurt often enough by people ignoring empty path segments, so I'd like to avoid giving this as general implementor advice, and the precise rule is tricky (\"CRI has one more empty path segment if all the path segments are empty\"). This is made worse by the normalized form (according to [7252 Section 6.3](https://datatracker.ietf.org/doc/html/rfc7252#section-6.3), also [7230 Section 2.7.3](https://www.rfc-editor.org/rfc/rfc7230#section-2.7.3)) of the pathless URI being the one *with* the slash.\r\n\r\n## Proposal\r\n\r\nIt's not fully thought through, but here's an idea:\r\n\r\n*Let's alter the rules of path assembly to be exactly those of CoAP.*\r\n\r\nThe reason we didn't do this is that if we want to express every URI, we'll have to distinguish empty-path from just-a-slash (for schemes that don't have the normalization that CoAP and HTTP have). So we'll still have to provide that -- but it can be a feature, eg.\r\n\r\n```\r\nAUTH-NOSLASH = false .feature \"empty-path\"\r\npath /= AUTH-NOSLASH\r\n```\r\n\r\n(I didn't check whether the `false` value would produce any ambiguity, but I'm confident there is a value that does not).\r\n\r\n## Upsides\r\n\r\n* Easier interconversion between CRIs and CoAP options (this is the one I think we care about most)\r\n* Conversion from CRIs to URIs is easier (when not implementing the feature)\r\n\r\n## Downsides\r\n\r\n* Converters from URIs should be aware of the HTTP and CoAP normalization rules, and do the normalization step before emitting a CRI that needs a feature.\r\n* Alternatively, if we think that's unfeasible because converters may not know to which schemes that applies (but they gotta have the list anyway!), we could make it not feature gated and converters would just happily emit path = AUTH-NOSLASH; CRI-CoAP converters would know that value to mean the same as an empty list (and never emit it). It'd still be a net simplification, especially on the embedded side.",
      "createdAt": "2023-06-13T11:43:11Z",
      "updatedAt": "2023-07-10T11:27:10Z",
      "closedAt": "2023-07-10T11:27:10Z",
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Hm, I found why I *did* like that approach: Dealing with sub-sites is easier that way. If there is *always* an empty component on a trailing slash, you can have the same processing on all requests (serving from the root) or all requests that start with [\"path\",\"to\", \"resource\"] after those are stripped -- and in both cases the handler needs to be prepared for either an empty component (to serve the \"index\") or a series of path components.\r\n\r\nI'll go into a session of banging my head on the desk to find out what that means for multiple empty components, and whether that allows us to give out more practical advice to implementers.",
          "createdAt": "2023-06-13T14:43:57Z",
          "updatedAt": "2023-06-13T14:43:57Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "One more thought in delense of the current scheme: This might encourage application authors who use CRIs from the start to not have `/sensors/` and `/sensors/1` (as one would with URIs to make relative references neat) but just `/sensors` and `/sensors/1` because CRI references can discard 0. Works out in that mindset, but once media types using URI refs are used, baeargh.\r\n\r\nQuestion is: do we want to encourage it?",
          "createdAt": "2023-06-22T09:17:52Z",
          "updatedAt": "2023-06-22T09:17:52Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Just noticed my last post is quite a non-sequitur without emphasizing what that means for implementations of the style I think practical (i.e., applications get all requests that contain some path prefix, and then process the remaining path and other options):\r\n\r\nSwitching styles to not have a trailing slash makes them work easily no matter whether they're on the root or under some non-empty prefix.\r\n\r\nAt least in terms of CoAP options.\r\n\r\nIn URI options, it's weird again b/c 7252 chose trailing slash to be normalized for empty paths. That also translates to weirdness to CRI though *cries in rage at the topic's elusiveness*",
          "createdAt": "2023-06-22T13:33:21Z",
          "updatedAt": "2023-06-22T13:33:21Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "``` \r\ncoap://x// | [\"\"] | [\"\", \"\"]\r\n``` \r\n\r\nWhy?\r\n(See RFC 7252, 6.4, step 8.)\r\n\r\nI thought that coap://x/ is the only case where CRI keeps the empty segment while CoAP discards it.",
          "createdAt": "2023-06-23T09:39:30Z",
          "updatedAt": "2023-06-23T09:41:41Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "If it were, how would coap://x// be represented? AFAIR normalization doesn't remove that.\n",
          "createdAt": "2023-06-23T11:55:25Z",
          "updatedAt": "2023-06-23T11:55:25Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "> If it were, how would coap://x// be represented? AFAIR normalization doesn't remove that.\r\n\r\nTwo empty Uri-Path options in CoAP, two empty Path segments in CRI.",
          "createdAt": "2023-06-23T12:19:57Z",
          "updatedAt": "2023-06-23T12:19:57Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "\u2794 So we'll mention anomaly in table row 2, but take no other change.",
          "createdAt": "2023-07-07T14:05:25Z",
          "updatedAt": "2023-07-07T14:05:25Z"
        }
      ]
    },
    {
      "number": 76,
      "id": "I_kwDOFyeisM5sf2zu",
      "title": "Changes from -09 to -13",
      "url": "https://github.com/core-wg/href/issues/76",
      "state": "CLOSED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "``` \r\n* Would it be possible to have an aggregated entry \"Changes from -09 to -13\" ?\r\n```\r\n",
      "createdAt": "2023-07-25T12:59:12Z",
      "updatedAt": "2023-11-14T13:44:49Z",
      "closedAt": "2023-11-14T13:44:49Z",
      "comments": []
    },
    {
      "number": 77,
      "id": "I_kwDOFyeisM5sf34s",
      "title": "Add test vector for [null, true, ...]",
      "url": "https://github.com/core-wg/href/issues/77",
      "state": "OPEN",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "test vectors"
      ],
      "body": "> [Section 5.1]\r\n>\r\n> * \"two leading null values (scheme and authority both not given) MUST be represented by using the discard alternative instead, and\"\r\n>\r\n>   Is this actually the only case where to use discard?\r\n>\r\n>   Scheme and authority are both not given also in case the first two elements in the outer array are null (absent scheme) and true (absent authority followed by rootless path). Shouldn't discard be used also in this case?\r\n\r\n[_]\r\nIn some cases, you would use [1, [some-path]] instead of  [null, true, [some-path]], but not when you want to explicitly make the CRI rootless.\r\n(We don't have an example where this would make sense, but it currently is possible.)\r\nIn any case, using discard would make it impossible to select NOAUTH-ROOTLESS.\r\n\u2794 add a test vector\r\n",
      "createdAt": "2023-07-25T13:01:32Z",
      "updatedAt": "2023-07-25T13:01:32Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 82,
      "id": "I_kwDOFyeisM58oAua",
      "title": "Determinism goals",
      "url": "https://github.com/core-wg/href/issues/82",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "It's a goal of CRIs to be deterministic (I don't know off my head if we have any caveats to that).\r\n\r\nFor CRI references, we don't aspire to do that (as there are usually at least options of discarding more and re-populating it, and evaluation depends on the base anyway).",
      "createdAt": "2024-01-19T16:16:09Z",
      "updatedAt": "2025-02-03T13:21:50Z",
      "closedAt": "2025-02-03T13:21:50Z",
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "One part we need to do here is narrow down the use of \"equivalence\" in the conversion rules. Maybe \"equal under syntax based normalization\" (RFC3986) can be helpful, or the conversion result already needs to be syntax normalized and thus needs to be byte-wise identical.",
          "createdAt": "2024-04-05T14:52:24Z",
          "updatedAt": "2024-04-05T14:52:24Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Can we prove that no two correct CRIs produce the same URI? With which tools?\r\n\r\n(And personally I don't care too much, because the one important usecase is block-listing, and that's a mistake of its own; other use cases cabo mentioned are more useful diagnostics, but maybe it's not *that* important)",
          "createdAt": "2024-04-05T14:56:21Z",
          "updatedAt": "2024-04-05T14:56:21Z"
        }
      ]
    },
    {
      "number": 86,
      "id": "I_kwDOFyeisM6H4ngi",
      "title": "Add test vector for zone identifier",
      "url": "https://github.com/core-wg/href/issues/86",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "The latest soon-to-be-merged test vectors do not contain a test for the zone identifier.\r\n\r\nNo need to include that there now. This issue exists to make sure we have something before release.",
      "createdAt": "2024-05-05T22:29:44Z",
      "updatedAt": "2025-02-03T13:21:50Z",
      "closedAt": "2025-02-03T13:21:50Z",
      "comments": []
    },
    {
      "number": 89,
      "id": "I_kwDOFyeisM6WmdkN",
      "title": "RFC6874 and 6874bis",
      "url": "https://github.com/core-wg/href/issues/89",
      "state": "CLOSED",
      "author": "becarpenter",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "The 6man WG has abandoned the 6874bis draft and the current [draft-ietf-6man-zone-ui](https://datatracker.ietf.org/doc/draft-ietf-6man-zone-ui/) will, if approved, obsolete RFC 6874 without replacement. It seems that everything about Zone IDs needs to be revisited.",
      "createdAt": "2024-09-15T00:08:19Z",
      "updatedAt": "2025-02-03T13:21:50Z",
      "closedAt": "2025-02-03T13:21:50Z",
      "comments": []
    },
    {
      "number": 90,
      "id": "I_kwDOFyeisM6a0xd8",
      "title": "IDNA considerations",
      "url": "https://github.com/core-wg/href/issues/90",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "I'm reading IDNA (rfc5890 and -bis) right now through an ART-ART assignment \u2026 wow, that's headaches.\r\n\r\nWe're currently describing labels to be turned into percent encoded URIs, so that a CRI that contains `\"\u00fcbergr\u00f6\u00dfentr\u00e4ger\", \"example\", \"com\"` as a host name would be converted to `http://%C3%BCbergr%C3%B6%C3%9Fentr%C3%A4ger.example.com/`.\r\n\r\nIDNA post-dates RFC3986 (even 3987) but still talks of URIs as not taking non-ASCII labels.\r\n\r\nI'd hate to see any punycode stuff creeping up on us here, so I hope that either\r\n* we find a reference that uses URIs in such a way so it's all fine, or\r\n* we find a place to say that our host components permit non-ASCII labels and are thus IDNA-aware for the purpose of IDNA. (The latter clause probably matters because not all uses of the URI hostname field are necessarily DNS backed, even if there are dots in it, and justifies passing them around without any larger concern for IDNA when not resolving).",
      "createdAt": "2024-10-18T13:29:24Z",
      "updatedAt": "2025-02-03T13:21:51Z",
      "closedAt": "2025-02-03T13:21:51Z",
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Next step here is to look at https://datatracker.ietf.org/doc/draft-klensin-idna-rfc5891bis/ and related documents whether there's anything to support our notion of \"it's really a different layer and doesn't concern us\". (Inconveniently, 3987 explicitly mentions IDNA, and not just saying that it's DNS's business how they encode their labels).",
          "createdAt": "2024-11-22T16:22:21Z",
          "updatedAt": "2024-11-22T16:22:21Z"
        }
      ]
    },
    {
      "number": 91,
      "id": "I_kwDOFyeisM6f9rf2",
      "title": "Talk about packed / tags",
      "url": "https://github.com/core-wg/href/issues/91",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [
        "cabo"
      ],
      "labels": [
        "has-pr"
      ],
      "body": "In early phases of CRIs we talked about potential optimizations for particular URI patterns, eg. `coap+sms://001555112358132134` into a more binary friendly format, https://base32stuff.onion/foo/bar as actual binary data or encoding LwM2M's paths like /1/2/3/3/1/5. We postponed that until the final stages, which we are now in.\r\n\r\nAt very least we probably want to say something about that CBOR packed is expected to be used in combination with CRIs.\r\n\r\nI'm unsure on whether there will be many cases where there would be tags *inside* a CRI, especially because tags and packed don't do so well expanding to multiple items (although \u2026 could a packed table entry contain a CBOR sequence, and multiple items would expand like a CDDL group in an array? Wreaks havoc with parsers that use array length to decide content, but that's not how CDDL works).\r\n\r\nExamples:\r\n* `http://base32ofbinarystuff.onion/foo/bar` -> `12345(['binarystuff', [true, [\"foo\", \"bar\"]]])`, with a tag expanding the binary stuff to a base URI and then having a 2nd item that is a CRI reference relative to it, or `12345(['binarystuff', [\"foo\", \"bar\"]])` whose CDDL would reach deeper into the CRI reference syntax\r\n* `coap://[2001:db8::1]/1/1/2/3` -> `[0, ip'2001:db8::1', 64(h'01010203')]` reusing an allocated tag because it does just the right thing, at least when pulled into a stand-in for array-of-strings?",
      "createdAt": "2024-11-22T16:20:21Z",
      "updatedAt": "2025-02-03T13:21:51Z",
      "closedAt": "2025-02-03T13:21:51Z",
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "I think that the choice of whether any particular use of a CRI. Unless agreed on differently, packing and tags should not be expected to be supported (but maybe someone still tries if they have a way of recovery).",
          "createdAt": "2025-01-24T14:11:04Z",
          "updatedAt": "2025-01-24T14:11:04Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Another example of a tag we'll want to use are tags 21..23 (\"expected conversation to base\u2026\").\n\nThese examples seem to encourage using the stand-in concept is helpful here.",
          "createdAt": "2025-01-24T14:14:14Z",
          "updatedAt": "2025-01-24T14:14:14Z"
        }
      ]
    },
    {
      "number": 92,
      "id": "I_kwDOFyeisM6iUe21",
      "title": "Add example (appendix?) on CRIs in AIF",
      "url": "https://github.com/core-wg/href/issues/92",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [
        "chrysn"
      ],
      "labels": [
        "has-pr"
      ],
      "body": "AIF's Toid have a default value of URIs; could use CRIs there too.\r\n\r\nI can provide text on that.\r\n\r\nnb: New AIF parameters are specification-required; if we add the example here it'd have to register too.",
      "createdAt": "2024-12-06T15:09:27Z",
      "updatedAt": "2025-02-03T13:21:52Z",
      "closedAt": "2025-02-03T13:21:52Z",
      "comments": []
    },
    {
      "number": 93,
      "id": "I_kwDOFyeisM6iUg3L",
      "title": "Composability",
      "url": "https://github.com/core-wg/href/issues/93",
      "state": "OPEN",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "not in scope"
      ],
      "body": "We discussed composability of CRIs.\r\n\r\nWhile there are dozens of ways to embed a URI in another URI, there's one straightforward way for CRIs:\r\n\r\nFor something that's vaguely URI template-ish `http://compare-texts.example.com/{first}/{second}/?html`:\r\n\r\n```edn\r\n[e'http', [\"compare-texts\", \"example\", \"com\"], [cri'urn:document1', cri'https://example.net/doc2'], [\"html\"]]\r\n```\r\n\r\nexpands to\r\n\r\n```edn\r\n[e'http', [\"compare-texts\", \"example\", \"com\"], [\"urn:document1\", \"https://example.net/doc2\"], [\"html\"]]\r\n```\r\n\r\nor eventually\r\n\r\n```\r\nhttp://compare-texts.example.com/urn:document1/https:%2F%2Fexample.net%2Fdoc2/?html\r\n```\r\n\r\n(but can be well-usable in the top form)\r\n\r\nSpinning off there, this would indicate that CRI templates are way easier to do \u2013 possibly with less flexibility thatn URI templates, but then also easier to use. A possible expression is using packed: `[e'http', [\"compare-texts\", \"example\", \"com\"], [simple(0), simple(1)], [\"html\"]]`.",
      "createdAt": "2024-12-06T15:13:34Z",
      "updatedAt": "2025-02-03T13:03:11Z",
      "closedAt": null,
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "A caveat is that composability of this style only works when there are no constraints on the characters permissible in a component, and there is no normalization on that component.\r\n\r\nPersonally I'd love if there was a straightforward way to put a URI into the authority component (no matter whether inner URI is than a DID, a nih or any other identifier), but those strings are subject to lowercasing, can't have inner dots (not sure about other characters) and (in some implementations) severe length limits.\r\n\r\nAlso, this doesn't work easily for the fragment (like I've used in single page web apps): only one string can be expanded into that.",
          "createdAt": "2024-12-06T16:03:57Z",
          "updatedAt": "2024-12-06T16:03:57Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "We discussed this in the 2025-01-29 interim and determined that this discussion is interesting, but not in scope for the current document.",
          "createdAt": "2025-02-03T13:02:51Z",
          "updatedAt": "2025-02-03T13:02:51Z"
        }
      ]
    },
    {
      "number": 102,
      "id": "I_kwDOFyeisM6pZDro",
      "title": "Abstract sentence unclear: \"describes cooperates\" ?",
      "url": "https://github.com/core-wg/href/issues/102",
      "state": "CLOSED",
      "author": "EskoDijk",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "> This RFC updates RFC 7595 to add a note on how the URI Schemes registry RFC 7595 **describes cooperates** with the CRI Scheme Numbers registry created by the present RFC.\n\n",
      "createdAt": "2025-02-10T10:01:57Z",
      "updatedAt": "2025-02-20T16:01:53Z",
      "closedAt": "2025-02-20T16:01:53Z",
      "comments": []
    },
    {
      "number": 103,
      "id": "I_kwDOFyeisM6qDc9j",
      "title": "Section 8.2.2 in -18 has a \"TO DO\" line - needs to be removed",
      "url": "https://github.com/core-wg/href/issues/103",
      "state": "CLOSED",
      "author": "EskoDijk",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-02-14T08:45:34Z",
      "updatedAt": "2025-02-20T16:01:54Z",
      "closedAt": "2025-02-20T16:01:54Z",
      "comments": []
    },
    {
      "number": 104,
      "id": "I_kwDOFyeisM6qDi0n",
      "title": "Section 8.2.2 to add precedence rules for Proxy-Scheme / Proxy-Scheme-Number joint usage",
      "url": "https://github.com/core-wg/href/issues/104",
      "state": "CLOSED",
      "author": "EskoDijk",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "Similar as in 8.2.1 normative rules.\n\nAlso for completeness we might indicate that a CoAP server that doesn't support the Proxy-CRI option, may well support the Proxy-Scheme-Number option on its own? I.e. as a quick and easy replacement for \"Proxy-Scheme\" to save some bytes. ",
      "createdAt": "2025-02-14T08:56:35Z",
      "updatedAt": "2025-03-03T21:49:15Z",
      "closedAt": "2025-03-03T21:49:15Z",
      "comments": []
    },
    {
      "number": 105,
      "id": "I_kwDOFyeisM6qDo_v",
      "title": "Section 11.1.2: requesting more details for \"Reference\" field contents",
      "url": "https://github.com/core-wg/href/issues/105",
      "state": "CLOSED",
      "author": "EskoDijk",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "Section 11.1.2 has for the \"Reference\" field: \"a reference to a document, if available, or the registrant\" -> maybe better to clarify to \"a reference to a document requesting the registration, if available, or the registrant\"\n\n  Is this intended? The initial registry contents only have \"RFC-XXXX\" as the reference which is the document requesting the registration, not the document describing the scheme semantics.\n\n  If the Designated Expert at own initiative requests the registration per 11.1.1 , what would the \"Reference\" field contain then? The name of the expert or the RFC number that defines the new scheme?\n\n",
      "createdAt": "2025-02-14T09:07:53Z",
      "updatedAt": "2025-03-03T16:45:19Z",
      "closedAt": "2025-03-03T16:45:19Z",
      "comments": [
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "The document would be the *reference* document, not the IANA form for a registration request.\nThe purpose is to document what the registration is about.  Generally, this will be copied from the URI Scheme registration, unless there indeed is a separate document.  The initial registration is a bit of a special case, because we won't fill in all that information for hundreds of schemes...",
          "createdAt": "2025-02-14T10:19:21Z",
          "updatedAt": "2025-02-14T10:19:21Z"
        },
        {
          "author": "EskoDijk",
          "authorAssociation": "NONE",
          "body": "Ok, clear, in that case it's best to state the expected contents for all future/upcoming registrations: e.g.\n\n> a reference to a document defining the scheme, if available, or the registrant\"\n\nThen it's also clear what the designated expert should put in this field: the document reference for the newly registered scheme.",
          "createdAt": "2025-02-14T10:36:38Z",
          "updatedAt": "2025-02-14T10:36:38Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "> > a reference to a document defining the scheme, if available, or the registrant\"\n\nThat may not always exist, but *something* may, that's why we left this a bit open (i.e., recurred to the general purpose of a \"reference\" column in an IANA registration).",
          "createdAt": "2025-02-14T10:40:58Z",
          "updatedAt": "2025-02-14T10:40:58Z"
        },
        {
          "author": "EskoDijk",
          "authorAssociation": "NONE",
          "body": "Ok so that could also be:\n\n> a reference to a document, if available, or the registrant. A document that describes the scheme should preferably be referenced.\n\nJust as sanity check: if an IETF stream document requests IANA to add an existing scheme \"foo\" to the CRI Scheme Numbers registry, then the RFC number of this document will not appear in the registry so it's not possible to trace back who made the registration or what document did?\n\n\n\n",
          "createdAt": "2025-02-14T14:15:45Z",
          "updatedAt": "2025-02-14T14:15:45Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "I'm wondering how much of this needs to be in the document.  I would normally expect IANA to put useful reference information in there (original scheme registration, potentially document that applies this to the CRI space).  For the Schemes in Appendix A, the reference currently is RFC-XXXX.",
          "createdAt": "2025-02-26T12:40:48Z",
          "updatedAt": "2025-02-26T12:40:48Z"
        },
        {
          "author": "EskoDijk",
          "authorAssociation": "NONE",
          "body": "Possibly by default IANA would just include the name of the registrant there, if the registrant doesn't supply any document link in the registration request. (That's allowed given the current text.)\n\nSince it's expert review we could also expect the Designated Expert to complete references?\n\nFor example if someone registers CRI for scheme \"example\" which doesn't exist at the time, and it gets approved, and 2 years later an RFC defines scheme \"example\" then the expert should notice this according to 11.1.1 and the CRI registry entry can be updated with the reference.\n\nOr do the same if the registrant forgot to include a reference to the RFC defining the scheme. (and IANA didn't ask for a reference)\n\nOk for me to leave the text as is, if we don't want to be too restrictive. My last text proposal was just a hint to the registrant what \"a document\" should be.",
          "createdAt": "2025-03-03T11:16:15Z",
          "updatedAt": "2025-03-03T11:16:15Z"
        }
      ]
    },
    {
      "number": 114,
      "id": "I_kwDOFyeisM6sPKjk",
      "title": "NFC requirement for text values",
      "url": "https://github.com/core-wg/href/issues/114",
      "state": "CLOSED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "@chrysn (Archived-At: <https://mailarchive.ietf.org/arch/msg/core/nteOp0w6Cj9ZWe52qqD1_lXIeTo>):\n\n* Some constraints talk of NFC. That term is only later used as a \"MAY\"\n for converting from user input -- but then it's not a constraint at\n all.\n\n (And please don't resolve this into an actual requirement: the\n stability guarantee on normalization[1] only makes promises on\n characters from a given version of Unicode, so a URI-to-CRI converter\n that sees %f0%9f%ab%be%f0%9f%ab%bf may not have that in its table and\n express it as \"\\u{1fafe}\\u{1faff}\", while another converter may know\n some more Unicode and would then either convert it to\n \"\\u{whateverthatcombinesto}\" or as PET)\n",
      "createdAt": "2025-03-02T16:45:38Z",
      "updatedAt": "2025-03-03T21:50:18Z",
      "closedAt": "2025-03-03T21:50:18Z",
      "comments": [
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "The NFC constraint was added in draft-ietf-core-href-03, 2020-03-09 (five years minus a week ago).\nI don't think it has changed since then.\nGoing away from this constraint would be a big step now.\n\nIt seems that the last actual addition to the Unicode rules was around 2010.\n\nBut we need to be prepared for future additions.  The question here is what the effect of the NFC constraint should be.\nThe scenario you describe assumes some processing that satisfies this constraint.  Do we have to mandate that?",
          "createdAt": "2025-03-02T17:12:27Z",
          "updatedAt": "2025-03-02T17:12:27Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "Some additional information can be found in https://www.ietf.org/archive/id/draft-bormann-dispatch-modern-network-unicode-05.html#name-normalization and the recommendations in that guide about NFC constraints.\n",
          "createdAt": "2025-03-02T17:16:01Z",
          "updatedAt": "2025-03-02T17:16:01Z"
        }
      ]
    },
    {
      "number": 124,
      "id": "I_kwDOFyeisM6t2AXU",
      "title": "Reconsider query CRI after introducing defaults",
      "url": "https://github.com/core-wg/href/issues/124",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [
        "cabo"
      ],
      "labels": [],
      "body": "Query is currently described as `[+text]` and sometimes has `null` and sometimes `[]` as alternatives, with `null` meaning \"no query\" and `[]` meaning \"really no query, I'm stating this here explicitly\".\n\nThis was necessary in earlier versions to enable the removal of trailing nulls, but now that we have defaults, we can think of what is more intuitive:\n\nWe should consider whether `query` should just be `[*text]`, have `[]` as its default, and `null` is just the for CRI references that are fragment-only.\n\nAFAIR this wouldn't be a change to the relatively sensitive conversion rules (they treat it through presence either way, and I found that my implementation didn't get the distinction between \"strip the query\" and \"just set the fragment\" right)\n\nI see several upsides and no downsides:\n* Processing outside of CRI references is more straightforward: It is iterating over a possibly empty list, rather than having the empty case special.\n* More consistency in CRI references: We don't have to make rules for whether when a path is set there needs to be a `null` or `[]` in the query position, there is an obvious choice of `[]` (which is the one in the CRI; this also makes it easy to splice a resolved CRI)\n* It makes query and path behave more similarly (esp. useful when sharing code that's just generic over the text-or-pet's character sets)\n* it would simplify the CDDL esier to understand because there are fewer \"or something special\" cases:\n\n```patch\n CRI = [\n   scheme,\n   authority / no-authority,\n   path,                         ; use [] for empty path\n+  query / null,\n+  query,\n   fragment / null\n ]\n\n\n CRI-Reference = [\n   ((scheme / null, authority / no-authority)\n    // discard),                 ; relative reference\n   path / null,\n-  query / [] / null,            ; [] is explicit unset\n+  query / null,            ; null keeps the query (only allowed when discard=0 and path=null)\n   fragment / null\n ]\n\n-query       = [+text]\n+query       = [*text]\n```\n\nThe null cases for path and query could also be explained consistently in the CRI reference in that\n\n> The value null for path and query are only allowed if discard=0, and, for query, if path=null.\n\n(not sure which text that replaces, but I'm pretty sure there is some on when path may be null)\n\n*Context:* We briefly talked about having some alternative CDDL forms on the side, now at https://github.com/core-wg/href/wiki/Useful-variations-of-the-CDDL, and writing that, the rules looked a bit odd. ",
      "createdAt": "2025-03-13T10:19:13Z",
      "updatedAt": "2025-03-16T14:49:46Z",
      "closedAt": "2025-03-16T14:49:46Z",
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "By the way, one step of thought I took and discarded while writing the Useful-variations wiki entry was this: \"Given URIs can't express stripping the query and not even leaving a single `?`, do we need to?\". But as having a (possibly empty) query is more intuitively `[]` and we need a \"don't touch the query\" value anyway to set just the fragment, just unsetting the query is fine too.\n\n(Actually, if we *don't* go with this issue's proposal and leave `null` as the representation of not having any query, then we could just drop the `[]` explicit unset unset if we wanted to -- but I think that this issue's proposal makes sense, and then the ability to go \"up\" to the URI without query is a nice gift).",
          "createdAt": "2025-03-13T23:28:16Z",
          "updatedAt": "2025-03-13T23:28:16Z"
        }
      ]
    },
    {
      "number": 125,
      "id": "I_kwDOFyeisM6uJopg",
      "title": "C5 should mention labels need to be dotless",
      "url": "https://github.com/core-wg/href/issues/125",
      "state": "CLOSED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "https://github.com/core-wg/href/pull/122#pullrequestreview-2687344379",
      "createdAt": "2025-03-15T05:26:03Z",
      "updatedAt": "2025-03-15T13:26:12Z",
      "closedAt": "2025-03-15T13:26:12Z",
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "MDExOlB1bGxSZXF1ZXN0Njk1NzY2Mzc2",
      "title": "Simplified syntax",
      "url": "https://github.com/core-wg/href/pull/1",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This branch is the basis for -05 and will now be updated for -06",
      "createdAt": "2021-07-23T08:32:27Z",
      "updatedAt": "2024-06-02T16:07:36Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "b41a1f5a81840911d1684ed00436378e2db92845",
      "headRepository": "core-wg/href",
      "headRefName": "simplified-syntax",
      "headRefOid": "9ca3d0972683ebcd07badb53176fdd1be53cd951",
      "closedAt": "2021-07-24T23:49:22Z",
      "mergedAt": "2021-07-24T23:49:22Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "ed6b65b3ac4c1337a73eee3201ff8c211521ab17"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 2,
      "id": "MDExOlB1bGxSZXF1ZXN0Njk2NDI4NzQx",
      "title": "Ietf111",
      "url": "https://github.com/core-wg/href/pull/2",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "* rework authority:\r\n  * split reg-names at dots;\r\n  * add optional zone identifiers {{-zone}} to IP addresses\r\n",
      "createdAt": "2021-07-25T01:44:53Z",
      "updatedAt": "2024-06-02T16:07:40Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "ed6b65b3ac4c1337a73eee3201ff8c211521ab17",
      "headRepository": "core-wg/href",
      "headRefName": "ietf111",
      "headRefOid": "e827cd3b17981a75704c016283c0c7dcfc402832",
      "closedAt": "2021-07-25T11:24:59Z",
      "mergedAt": "2021-07-25T11:24:59Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "9e6fe90620dee38fa06ee954af27a75882def989"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 3,
      "id": "MDExOlB1bGxSZXF1ZXN0Njk4ODE3MTQz",
      "title": "Add subsection on constraints-by-example",
      "url": "https://github.com/core-wg/href/pull/3",
      "state": "MERGED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This tries to make the constraints more relatable and understandable.\r\n\r\nIt's currently phrased as examples. I can imagine that at one point we'd like to rephrase the constraints themselves (possibly along with introducing the information model, which is currently a bit mixe into the constraints), at which point we may or may not try to merge in the examples.",
      "createdAt": "2021-07-28T15:54:55Z",
      "updatedAt": "2021-11-20T18:06:27Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "9e6fe90620dee38fa06ee954af27a75882def989",
      "headRepository": "core-wg/href",
      "headRefName": "constraints-in-practice",
      "headRefOid": "79a0e1577b704c98197b174f43be166b3456f132",
      "closedAt": "2021-10-25T21:50:33Z",
      "mergedAt": "2021-10-25T21:50:33Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "f4085b5e9632fef6d121b261001f5fcc1713505c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM4vAeOL",
          "commit": {
            "abbreviatedOid": "79a0e15"
          },
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T21:50:27Z",
          "updatedAt": "2021-10-25T21:50:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 4,
      "id": "PR_kwDOFyeisM4smpPi",
      "title": "grammar",
      "url": "https://github.com/core-wg/href/pull/4",
      "state": "MERGED",
      "author": "thomas-fossati",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-03T14:03:58Z",
      "updatedAt": "2021-10-03T16:32:43Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "9e6fe90620dee38fa06ee954af27a75882def989",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "0aece93f839f43977cef3a8a06980a6b45787b99",
      "closedAt": "2021-10-03T16:32:43Z",
      "mergedAt": "2021-10-03T16:32:43Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "dc7d1508a28224079c96833de1c5427fc476c1ba"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 7,
      "id": "PR_kwDOFyeisM4smw6H",
      "title": "Close #6, address redundant leading zeros as well.",
      "url": "https://github.com/core-wg/href/pull/7",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-03T16:45:13Z",
      "updatedAt": "2024-06-02T16:07:42Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "dc7d1508a28224079c96833de1c5427fc476c1ba",
      "headRepository": "core-wg/href",
      "headRefName": "empty-ports",
      "headRefOid": "bcbc1ffc41c2eb0fd80cffd75b3c6658b44ea27a",
      "closedAt": "2021-10-04T00:24:47Z",
      "mergedAt": "2021-10-04T00:24:47Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "6647c3cf76c02e77f45e881d9d617eddb076cb14"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM4t30pR",
          "commit": {
            "abbreviatedOid": "bcbc1ff"
          },
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "LGTM, thanks!",
          "createdAt": "2021-10-03T17:11:32Z",
          "updatedAt": "2021-10-03T17:11:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 8,
      "id": "PR_kwDOFyeisM4smxc2",
      "title": "Clarify absent authority; close #5",
      "url": "https://github.com/core-wg/href/pull/8",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-03T16:58:04Z",
      "updatedAt": "2024-06-02T16:07:43Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "dc7d1508a28224079c96833de1c5427fc476c1ba",
      "headRepository": "core-wg/href",
      "headRefName": "absent-authority",
      "headRefOid": "39efdefe21f1b3c24585ce44092a3a9afb83eced",
      "closedAt": "2021-10-04T00:24:23Z",
      "mergedAt": "2021-10-04T00:24:23Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "ec8982ee3427d3267187653f0735601e2ea1e183"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM4t30tQ",
          "commit": {
            "abbreviatedOid": "39efdef"
          },
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-03T17:14:26Z",
          "updatedAt": "2021-10-03T17:14:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 10,
      "id": "PR_kwDOFyeisM4tQS1Q",
      "title": "Give names to sentinel values in the CDDL",
      "url": "https://github.com/core-wg/href/pull/10",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "What \"null\" and \"true\" means in terms of authority has caused confusion (eg. in the test vectors).\r\n\r\nThis gives more explicit names to them by defining constants.\r\n\r\nDefining the constants for scheme and discard too might be excessive; I can cut that back again.\r\n\r\n(What this does make more complicated is understanding why all the alternatives are mutually exclusive, not sure we can do that w/o going for hungarian notation.)",
      "createdAt": "2021-10-15T14:18:32Z",
      "updatedAt": "2021-10-21T07:08:03Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "6647c3cf76c02e77f45e881d9d617eddb076cb14",
      "headRepository": "core-wg/href",
      "headRefName": "explicit-names-for-variants",
      "headRefOid": "eb4cf0b5ea3db3b8f4d25d0b70586ef105cda06e",
      "closedAt": "2021-10-21T07:07:03Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "for keep-scheme the value is really absent, and nullability makes sense here. I can add it back if you prefer, but unlike the distinct null and true variations, I think that the null here is on the high level obvious enough, and on the detail and implementation level it has good explanations, also when it comes to stripping the leading nulls.\r\n\r\nBut yes I missed reverting the keep-scheme use (and then also upper-casing it).",
          "createdAt": "2021-10-21T07:00:45Z",
          "updatedAt": "2021-10-21T07:00:45Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "Thanks!\r\n",
          "createdAt": "2021-10-21T07:04:05Z",
          "updatedAt": "2021-10-21T07:04:05Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "It's actually merged; github seems not to recognize merges any more if they're explicitly announced in the commit.",
          "createdAt": "2021-10-21T07:08:03Z",
          "updatedAt": "2021-10-21T07:08:03Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM4ujNB0",
          "commit": {
            "abbreviatedOid": "8f4b072"
          },
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-15T15:34:28Z",
          "updatedAt": "2021-10-15T15:34:28Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "* Sentinel is something slightly different...\r\n* The constants should be close to their alternates, e.g., keep-scheme with scheme\r\n* We shouldn't bloat this to unrecognizability, neither in the number of unhelpful comments, nor in the length of the names.\r\n* I have this tendency to write constants in ALL-UPPER-CASE...",
              "createdAt": "2021-10-15T15:34:28Z",
              "updatedAt": "2021-10-15T15:34:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM4uzlxi",
          "commit": {
            "abbreviatedOid": "da6a101"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-21T06:55:53Z",
          "updatedAt": "2021-10-21T06:55:54Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Better like this?\r\n* No comments that'd label them \"sentinel\"\r\n* Grouping\r\n* No name for the \"null\" scheme because it's the most self-explanatory (to reduce bloat)\r\n* Names shortened and put into upper kebab case.",
              "createdAt": "2021-10-21T06:55:53Z",
              "updatedAt": "2021-10-21T06:55:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM4uzl_O",
          "commit": {
            "abbreviatedOid": "da6a101"
          },
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-21T06:57:01Z",
          "updatedAt": "2021-10-21T06:57:01Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Yes!\r\n",
              "createdAt": "2021-10-21T06:57:01Z",
              "updatedAt": "2021-10-21T06:57:01Z"
            }
          ]
        }
      ]
    },
    {
      "number": 12,
      "id": "PR_kwDOFyeisM4t2OJd",
      "title": "test vectors: initial commit",
      "url": "https://github.com/core-wg/href/pull/12",
      "state": "MERGED",
      "author": "thomas-fossati",
      "authorAssociation": "MEMBER",
      "assignees": [
        "thomas-fossati"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-29T12:17:37Z",
      "updatedAt": "2022-03-05T15:50:11Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "f9f4dc925e2cf94f8ef89ca57f0a285a37983168",
      "headRepository": null,
      "headRefName": "main",
      "headRefOid": "071103cbe92af30c269492f37185616ff0c57565",
      "closedAt": "2022-03-05T15:50:11Z",
      "mergedAt": "2022-03-05T15:50:11Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "d57228de8cbe33ed21d4e39f1c32b242ea4bade1"
      },
      "comments": [
        {
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "body": "@cabo @chrysn @marco-tiloca-sics @henkbirkholz please review & merge -- I don't have the commit bits on this repo.",
          "createdAt": "2021-10-29T12:19:15Z",
          "updatedAt": "2021-10-29T12:19:15Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "I think it might help to have another field that tells us whether we expect normalization to change the \"uri\" into a normalized \"uri-from-cri\".  E.g., at the moment that is true for:\r\n\r\n     69:[:norm, \"\\\"a/./b\\\"\", \"\\\"a/b\\\"\"]\r\n     75:[:norm, \"\\\"./a/b\\\"\", \"\\\"a/b\\\"\"]\r\n     81:[:norm, \"\\\"../a\\\"\", \"\\\"a\\\"\"]\r\n     87:[:norm, \"\\\"../a/b/../c/.\\\"\", \"\\\"a/c\\\"\"]\r\n\r\nNote that the third and fourth example are missing the initial \"../\", which should survive a URI-ref\u2794CRI-ref\u2794URI-ref cycle.",
          "createdAt": "2022-01-27T21:10:12Z",
          "updatedAt": "2022-01-27T21:10:12Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "And there are still 37 hosts not in an array:\r\n\r\n```\r\n37 matches for \":_CRI\" in buffer: *Shell Command Output*\r\n     17:[:_CRI_IN_OUT, \"[null, \\\"a\\\"]\", \"[null, [\\\"a\\\"]]\"]\r\n     26:[:_CRI_IN_OUT, \"[null, h'C0A80061']\", \"[null, [h'C0A80061']]\"]\r\n     99:[:_CRI_IN_OUT, \"[\\\"a\\\", \\\"b\\\"]\", \"[\\\"a\\\", [\\\"b\\\"]]\"]\r\n    108:[:_CRI_IN_OUT, \"[\\\"a\\\", h'C0A80062']\", \"[\\\"a\\\", [h'C0A80062']]\"]\r\n    147:[:_CRI_IN_OUT, \"[null, \\\"a\\\"]\", \"[null, [\\\"a\\\"]]\"]\r\n    156:[:_CRI_IN_OUT, \"[null, \\\"a\\\", [\\\"\\\"]]\", \"[null, [\\\"a\\\"], [\\\"\\\"]]\"]\r\n    165:[:_CRI_IN_OUT, \"[null, \\\"a\\\", [\\\"b\\\"]]\", \"[null, [\\\"a\\\"], [\\\"b\\\"]]\"]\r\n    174:[:_CRI_IN_OUT, \"[null, \\\"a\\\", null, [\\\"b\\\"]]\", \"[null, [\\\"a\\\"], null, [\\\"b\\\"]]\"]\r\n    183:[:_CRI_IN_OUT, \"[null, \\\"a\\\", null, null, \\\"b\\\"]\", \"[null, [\\\"a\\\"], null, null, \\\"b\\\"]\"]\r\n    197:[:_CRI_IN_OUT, \"[null, h'C0A80061', [\\\"\\\"]]\", \"[null, [h'C0A80061'], [\\\"\\\"]]\"]\r\n    206:[:_CRI_IN_OUT, \"[null, h'C0A80061', [\\\"b\\\"]]\", \"[null, [h'C0A80061'], [\\\"b\\\"]]\"]\r\n    215:[:_CRI_IN_OUT, \"[null, h'C0A80061', null, [\\\"b\\\"]]\", \"[null, [h'C0A80061'], null, [\\\"b\\\"]]\"]\r\n    224:[:_CRI_IN_OUT, \"[null, h'C0A80061', null, null, \\\"b\\\"]\", \"[null, [h'C0A80061'], null, null, \\\"b\\\"]\"]\r\n    283:[:_CRI_IN_OUT, \"[\\\"a\\\", \\\"b\\\", [\\\"\\\"]]\", \"[\\\"a\\\", [\\\"b\\\"], [\\\"\\\"]]\"]\r\n    292:[:_CRI_IN_OUT, \"[\\\"a\\\", \\\"b\\\", [\\\"c\\\"]]\", \"[\\\"a\\\", [\\\"b\\\"], [\\\"c\\\"]]\"]\r\n    301:[:_CRI_IN_OUT, \"[\\\"a\\\", \\\"b\\\", null, [\\\"c\\\"]]\", \"[\\\"a\\\", [\\\"b\\\"], null, [\\\"c\\\"]]\"]\r\n    310:[:_CRI_IN_OUT, \"[\\\"a\\\", \\\"b\\\", null, null, \\\"c\\\"]\", \"[\\\"a\\\", [\\\"b\\\"], null, null, \\\"c\\\"]\"]\r\n    324:[:_CRI_IN_OUT, \"[\\\"a\\\", h'C0A80062', [\\\"\\\"]]\", \"[\\\"a\\\", [h'C0A80062'], [\\\"\\\"]]\"]\r\n    333:[:_CRI_IN_OUT, \"[\\\"a\\\", h'C0A80062', [\\\"c\\\"]]\", \"[\\\"a\\\", [h'C0A80062'], [\\\"c\\\"]]\"]\r\n    342:[:_CRI_IN_OUT, \"[\\\"a\\\", h'C0A80062', null, [\\\"c\\\"]]\", \"[\\\"a\\\", [h'C0A80062'], null, [\\\"c\\\"]]\"]\r\n    351:[:_CRI_IN_OUT, \"[\\\"a\\\", h'C0A80062', null, null, \\\"c\\\"]\", \"[\\\"a\\\", [h'C0A80062'], null, null, \\\"c\\\"]\"]\r\n    430:[:_CRI_IN_OUT, \"[null, \\\"a\\\", [\\\"\\\"], [\\\"c\\\"]]\", \"[null, [\\\"a\\\"], [\\\"\\\"], [\\\"c\\\"]]\"]\r\n    439:[:_CRI_IN_OUT, \"[null, \\\"a\\\", [\\\"\\\"], null, \\\"c\\\"]\", \"[null, [\\\"a\\\"], [\\\"\\\"], null, \\\"c\\\"]\"]\r\n    448:[:_CRI_IN_OUT, \"[null, \\\"a\\\", [\\\"b\\\", \\\"\\\"]]\", \"[null, [\\\"a\\\"], [\\\"b\\\", \\\"\\\"]]\"]\r\n    457:[:_CRI_IN_OUT, \"[null, \\\"a\\\", [\\\"b\\\", \\\"c\\\"]]\", \"[null, [\\\"a\\\"], [\\\"b\\\", \\\"c\\\"]]\"]\r\n    466:[:_CRI_IN_OUT, \"[null, \\\"a\\\", [\\\"b\\\"], [\\\"c\\\"]]\", \"[null, [\\\"a\\\"], [\\\"b\\\"], [\\\"c\\\"]]\"]\r\n    475:[:_CRI_IN_OUT, \"[null, \\\"a\\\", [\\\"b\\\"], null, \\\"c\\\"]\", \"[null, [\\\"a\\\"], [\\\"b\\\"], null, \\\"c\\\"]\"]\r\n    484:[:_CRI_IN_OUT, \"[null, \\\"a\\\", null, [\\\"b\\\", \\\"c\\\"]]\", \"[null, [\\\"a\\\"], null, [\\\"b\\\", \\\"c\\\"]]\"]\r\n    493:[:_CRI_IN_OUT, \"[null, \\\"a\\\", null, [\\\"b\\\"], \\\"c\\\"]\", \"[null, [\\\"a\\\"], null, [\\\"b\\\"], \\\"c\\\"]\"]\r\n    527:[:_CRI_IN_OUT, \"[null, h'C0A80061', [\\\"\\\"], [\\\"c\\\"]]\", \"[null, [h'C0A80061'], [\\\"\\\"], [\\\"c\\\"]]\"]\r\n    536:[:_CRI_IN_OUT, \"[null, h'C0A80061', [\\\"\\\"], null, \\\"c\\\"]\", \"[null, [h'C0A80061'], [\\\"\\\"], null, \\\"c\\\"]\"]\r\n    545:[:_CRI_IN_OUT, \"[null, h'C0A80061', [\\\"b\\\", \\\"\\\"]]\", \"[null, [h'C0A80061'], [\\\"b\\\", \\\"\\\"]]\"]\r\n    554:[:_CRI_IN_OUT, \"[null, h'C0A80061', [\\\"b\\\", \\\"c\\\"]]\", \"[null, [h'C0A80061'], [\\\"b\\\", \\\"c\\\"]]\"]\r\n    563:[:_CRI_IN_OUT, \"[null, h'C0A80061', [\\\"b\\\"], [\\\"c\\\"]]\", \"[null, [h'C0A80061'], [\\\"b\\\"], [\\\"c\\\"]]\"]\r\n    572:[:_CRI_IN_OUT, \"[null, h'C0A80061', [\\\"b\\\"], null, \\\"c\\\"]\", \"[null, [h'C0A80061'], [\\\"b\\\"], null, \\\"c\\\"]\"]\r\n    581:[:_CRI_IN_OUT, \"[null, h'C0A80061', null, [\\\"b\\\", \\\"c\\\"]]\", \"[null, [h'C0A80061'], null, [\\\"b\\\", \\\"c\\\"]]\"]\r\n    590:[:_CRI_IN_OUT, \"[null, h'C0A80061', null, [\\\"b\\\"], \\\"c\\\"]\", \"[null, [h'C0A80061'], null, [\\\"b\\\"], \\\"c\\\"]\"]1\r\n```\r\n",
          "createdAt": "2022-01-27T21:21:16Z",
          "updatedAt": "2022-01-27T21:21:16Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "body": "@cabo I am not sure where all these errors come from.  I have extracted all the `cri`s and `resolved-cri`s from the test file:\r\n```\r\n# cri\r\njq '.\"test-vectors\"[].\"cri\"' tests.json | sed -e 's/\"//g' | while read l ; do echo $l | xxd -p -r | cbor2diag.rb ; done > cri.diag\r\n\r\n# resolved-cri\r\njq '.\"test-vectors\"[].\"resolved-cri\"' tests.json | sed -e 's/\"//g' | while read l ; do echo $l | xxd -p -r | cbor2diag.rb ; done > resolved-cri.diag\r\n```\r\nand there's only one error I could find (i.e., the `resolved-cri` in the third entry):\r\n```\r\njq '.\"test-vectors\"[2].\"resolved-cri\"' tests.json | sed -e 's/\"//g' | xxd -p -r | cbor2diag.rb\r\n[-2, h'C0A80061']\r\n```\r\nall the rest looks OK.\r\n\r\n",
          "createdAt": "2022-01-28T16:57:07Z",
          "updatedAt": "2022-01-28T16:57:07Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "Hmm.  I found a bug in my test script; I now get different errors :-)\r\n\r\nThese are still there, anyway:\r\n\r\n```\r\n{\"uri\"=>\"../a\", \"cri\"=>\"8202816161\", \"uri-from-cri\"=>\"a\", \"resolved-cri\"=>\"83218263666f6f191267816161\", \"resolved-uri\"=>\"coaps://foo:4711/a\"}\r\n[\"../a\", \"[2, [\\\"a\\\"]]\", \"a\", \"[-2, [\\\"foo\\\", 4711], [\\\"a\\\"]]\", \"coaps://foo:4711/a\"]\r\n[\"../a\", [2, [\"a\"]], \"a\", [-2, [\"foo\", 4711], [\"a\"]], \"coaps://foo:4711/a\"]\r\n[:norm, \"\\\"../a\\\"\", \"\\\"a\\\"\"]\r\n\"[2, [\\\"a\\\"]]\"\r\n\r\n{\"uri\"=>\"../a/b/../c/.\", \"cri\"=>\"82028261616163\", \"uri-from-cri\"=>\"a/c\", \"resolved-cri\"=>\"83218263666f6f1912678261616163\", \"resolved-uri\"=>\"coaps://foo:4711/a/c\"}\r\n[\"../a/b/../c/.\", \"[2, [\\\"a\\\", \\\"c\\\"]]\", \"a/c\", \"[-2, [\\\"foo\\\", 4711], [\\\"a\\\", \\\"c\\\"]]\", \"coaps://foo:4711/a/c\"]\r\n[\"../a/b/../c/.\", [2, [\"a\", \"c\"]], \"a/c\", [-2, [\"foo\", 4711], [\"a\", \"c\"]], \"coaps://foo:4711/a/c\"]\r\n[:norm, \"\\\"../a/b/../c/.\\\"\", \"\\\"a/c\\\"\"]\r\n\"[2, [\\\"a\\\", \\\"c\\\"]]\"\r\n```\r\n\r\nThe uri and uri-from-cri entries differ, which is OK due to the normalization.\r\nHowever, `[2, [\"a\", \"c\"]]` should turn into `../a/c`, not `a/c`.\r\n\r\nI'll now try to diagnose the other errors.\r\n",
          "createdAt": "2022-01-28T17:07:12Z",
          "updatedAt": "2022-01-28T17:07:12Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "Here is the other problem:\r\n\r\n```\r\n{\"uri\"=>\"//a\", \"cri\"=>\"82f6816161\", \"uri-from-cri\"=>\"//a\", \"resolved-cri\"=>\"82f6816161\", \"resolved-uri\"=>\"coaps://a\"}\r\n[\"//a\", \"[null, [\\\"a\\\"]]\", \"//a\", \"[null, [\\\"a\\\"]]\", \"coaps://a\"]\r\n[\"//a\", [nil, [\"a\"]], \"//a\", [nil, [\"a\"]], \"coaps://a\"]\r\n\"[null, [\\\"a\\\"]]\"\r\n[:_RES_IN_URI, \"\\\"coaps://a\\\"\", \"\\\"//a\\\"\"]\r\n[:_RES_CRI, \"[null, [\\\"a\\\"]]\", \"[-2, [\\\"a\\\"]]\"]\r\n[:_RES_URI_CRI, \"[-2, [\\\"a\\\"]]\", \"[null, [\\\"a\\\"]]\"]\r\n```\r\n\r\n`82f6816161` == `[nil, [\"a\"]]`, which is not a good resolved-cri.\r\n\r\nI find 25 places where resolved-cri is missing the URI scheme.\r\n",
          "createdAt": "2022-01-28T17:13:56Z",
          "updatedAt": "2022-01-28T17:13:56Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "body": "> Here is the other problem:\r\n> \r\n> ```\r\n> {\"uri\"=>\"//a\", \"cri\"=>\"82f6816161\", \"uri-from-cri\"=>\"//a\", \"resolved-cri\"=>\"82f6816161\", \"resolved-uri\"=>\"coaps://a\"}\r\n> [\"//a\", \"[null, [\\\"a\\\"]]\", \"//a\", \"[null, [\\\"a\\\"]]\", \"coaps://a\"]\r\n> [\"//a\", [nil, [\"a\"]], \"//a\", [nil, [\"a\"]], \"coaps://a\"]\r\n> \"[null, [\\\"a\\\"]]\"\r\n> [:_RES_IN_URI, \"\\\"coaps://a\\\"\", \"\\\"//a\\\"\"]\r\n> [:_RES_CRI, \"[null, [\\\"a\\\"]]\", \"[-2, [\\\"a\\\"]]\"]\r\n> [:_RES_URI_CRI, \"[-2, [\\\"a\\\"]]\", \"[null, [\\\"a\\\"]]\"]\r\n> ```\r\n> \r\n> `82f6816161` == `[nil, [\"a\"]]`, which is not a good resolved-cri.\r\n> \r\n> I find 25 places where resolved-cri is missing the URI scheme.\r\n\r\nThis should be now fixed in 071103c\r\n\r\nAll the tests pass in [my implementation](https://github.com/thomas-fossati/href/blob/0f8fd3d81bba00bb52f427716dcb5ca657276d12/Makefile#L14).  Please check yours :-)\r\n\r\n\r\n",
          "createdAt": "2022-03-02T09:23:42Z",
          "updatedAt": "2022-03-02T09:23:42Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "Maybe I don't understand what the \"resolved_cri\" field is.\r\nI would have expected to see a CRI, not a CRI reference.\r\nA CRI should have a scheme.\r\n(Maybe what's in there is also useful as a separate field.)\r\n\r\nFor the 25 cases I don't understand, here's what they are in the test vectors (first on line), and then what I think they should be (second on line).  Sorry for the quote noise.\r\n\r\n```\r\n\"[null, [\\\"a\\\"]]\", \"[-2, [\\\"a\\\"]]\"\r\n\"[null, [\\\"a\\\"], [\\\"\\\"]]\", \"[-2, [\\\"a\\\"], [\\\"\\\"]]\"\r\n\"[null, [\\\"a\\\"], [\\\"b\\\"]]\", \"[-2, [\\\"a\\\"], [\\\"b\\\"]]\"\r\n\"[null, [\\\"a\\\"], null, [\\\"b\\\"]]\", \"[-2, [\\\"a\\\"], null, [\\\"b\\\"]]\"\r\n\"[null, [\\\"a\\\"], null, null, \\\"b\\\"]\", \"[-2, [\\\"a\\\"], null, null, \\\"b\\\"]\"\r\n\"[null, [h'C0A80061'], [\\\"\\\"]]\", \"[-2, [h'C0A80061'], [\\\"\\\"]]\"\r\n\"[null, [h'C0A80061'], [\\\"b\\\"]]\", \"[-2, [h'C0A80061'], [\\\"b\\\"]]\"\r\n\"[null, [h'C0A80061'], null, [\\\"b\\\"]]\", \"[-2, [h'C0A80061'], null, [\\\"b\\\"]]\"\r\n\"[null, [h'C0A80061'], null, null, \\\"b\\\"]\", \"[-2, [h'C0A80061'], null, null, \\\"b\\\"]\"\r\n\"[null, [\\\"a\\\"], [\\\"\\\"], [\\\"c\\\"]]\", \"[-2, [\\\"a\\\"], [\\\"\\\"], [\\\"c\\\"]]\"\r\n\"[null, [\\\"a\\\"], [\\\"\\\"], null, \\\"c\\\"]\", \"[-2, [\\\"a\\\"], [\\\"\\\"], null, \\\"c\\\"]\"\r\n\"[null, [\\\"a\\\"], [\\\"b\\\", \\\"\\\"]]\", \"[-2, [\\\"a\\\"], [\\\"b\\\", \\\"\\\"]]\"\r\n\"[null, [\\\"a\\\"], [\\\"b\\\", \\\"c\\\"]]\", \"[-2, [\\\"a\\\"], [\\\"b\\\", \\\"c\\\"]]\"\r\n\"[null, [\\\"a\\\"], [\\\"b\\\"], [\\\"c\\\"]]\", \"[-2, [\\\"a\\\"], [\\\"b\\\"], [\\\"c\\\"]]\"\r\n\"[null, [\\\"a\\\"], [\\\"b\\\"], null, \\\"c\\\"]\", \"[-2, [\\\"a\\\"], [\\\"b\\\"], null, \\\"c\\\"]\"\r\n\"[null, [\\\"a\\\"], null, [\\\"b\\\", \\\"c\\\"]]\", \"[-2, [\\\"a\\\"], null, [\\\"b\\\", \\\"c\\\"]]\"\r\n\"[null, [\\\"a\\\"], null, [\\\"b\\\"], \\\"c\\\"]\", \"[-2, [\\\"a\\\"], null, [\\\"b\\\"], \\\"c\\\"]\"\r\n\"[null, [h'C0A80061'], [\\\"\\\"], [\\\"c\\\"]]\", \"[-2, [h'C0A80061'], [\\\"\\\"], [\\\"c\\\"]]\"\r\n\"[null, [h'C0A80061'], [\\\"\\\"], null, \\\"c\\\"]\", \"[-2, [h'C0A80061'], [\\\"\\\"], null, \\\"c\\\"]\"\r\n\"[null, [h'C0A80061'], [\\\"b\\\", \\\"\\\"]]\", \"[-2, [h'C0A80061'], [\\\"b\\\", \\\"\\\"]]\"\r\n\"[null, [h'C0A80061'], [\\\"b\\\", \\\"c\\\"]]\", \"[-2, [h'C0A80061'], [\\\"b\\\", \\\"c\\\"]]\"\r\n\"[null, [h'C0A80061'], [\\\"b\\\"], [\\\"c\\\"]]\", \"[-2, [h'C0A80061'], [\\\"b\\\"], [\\\"c\\\"]]\"\r\n\"[null, [h'C0A80061'], [\\\"b\\\"], null, \\\"c\\\"]\", \"[-2, [h'C0A80061'], [\\\"b\\\"], null, \\\"c\\\"]\"\r\n\"[null, [h'C0A80061'], null, [\\\"b\\\", \\\"c\\\"]]\", \"[-2, [h'C0A80061'], null, [\\\"b\\\", \\\"c\\\"]]\"\r\n\"[null, [h'C0A80061'], null, [\\\"b\\\"], \\\"c\\\"]\", \"[-2, [h'C0A80061'], null, [\\\"b\\\"], \\\"c\\\"]\"\r\n```\r\n\r\n",
          "createdAt": "2022-03-02T12:44:32Z",
          "updatedAt": "2022-03-02T12:44:32Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "body": "> Maybe I don't understand what the \"resolved_cri\" field is. I would have expected to see a CRI, not a CRI reference. A CRI should have a scheme. (Maybe what's in there is also useful as a separate field.)\r\n> \r\n> For the 25 cases I don't understand, here's what they are in the test vectors (first on line), and then what I think they should be (second on line). Sorry for the quote noise.\r\n> [...]\r\n\r\nI am not sure we are looking at the same file?\r\n\r\nIf I run:\r\n\r\n```sh\r\njq '.\"test-vectors\"[].\"resolved-cri\"' tests.json | sed -e 's/\"//g' | while read l ; do echo $l | xxd -p -r | cbor2diag.rb ; done\r\n```\r\n\r\nI get:\r\n\r\n```\r\n[-2, [\"foo\", 4711], [\"pa\", \"th\"], [\"query\"], \"frag\"]\r\n[-2, [\"a\"]]\r\n[-2, [h'C0A80061']]\r\n[-2, [\"foo\", 4711], [\"pa\", \"th\"], [\"query\"], \"frag\"]\r\n[-2, [\"foo\", 4711], [\"\"]]\r\n[-2, [\"foo\", 4711], [\"a\"]]\r\n[-2, [\"foo\", 4711], [\"pa\", \"th\"], [\"a\"]]\r\n[-2, [\"foo\", 4711], [\"pa\", \"th\"], [\"query\"], \"a\"]\r\n[-2, [\"foo\", 4711], [\"pa\", \"a\"]]\r\n[-2, [\"foo\", 4711], [\"pa\", \"a\", \"b\"]]\r\n[-2, [\"foo\", 4711], [\"pa\", \"a\", \"b\"]]\r\n[-2, [\"foo\", 4711], [\"pa\", \"a\", \"b\"]]\r\n[-2, [\"foo\", 4711], [\"a\"]]\r\n[-2, [\"foo\", 4711], [\"a\", \"c\"]]\r\n[-2, [\"foo\", 4711], [\"pa\", \"th\"], [\"query\"], \"frag\"]\r\n[\"a\", [\"b\"]]\r\n[\"a\", [h'C0A80062']]\r\n[\"a\"]\r\n[\"a\", true, [\"b\"]]\r\n[\"a\", null, null, [\"b\"]]\r\n[\"a\", null, [\"b\"]]\r\n[\"a\", null, null, null, \"b\"]\r\n[-2, [\"a\", 25186]]\r\n[-2, [\"a\"], [\"\"]]\r\n[-2, [\"a\"], [\"b\"]]\r\n[-2, [\"a\"], null, [\"b\"]]\r\n[-2, [\"a\"], null, null, \"b\"]\r\n[-2, [h'C0A80061', 25186]]\r\n[-2, [h'C0A80061'], [\"\"]]\r\n[-2, [h'C0A80061'], [\"b\"]]\r\n[-2, [h'C0A80061'], null, [\"b\"]]\r\n[-2, [h'C0A80061'], null, null, \"b\"]\r\n[-2, [\"foo\", 4711], [\"pa\", \"th\"], [\"query\"], \"frag\"]\r\n[-2, [\"foo\", 4711], [\"\"], [\"b\"]]\r\n[-2, [\"foo\", 4711], [\"\"], null, \"b\"]\r\n[-2, [\"foo\", 4711], [\"a\", \"\"]]\r\n[-2, [\"foo\", 4711], [\"a\", \"b\"]]\r\n[-2, [\"foo\", 4711], [\"a\"], [\"b\"]]\r\n[-2, [\"foo\", 4711], [\"a\"], null, \"b\"]\r\n[-2, [\"foo\", 4711], [\"pa\", \"th\"], [\"a\", \"b\"]]\r\n[-2, [\"foo\", 4711], [\"pa\", \"th\"], [\"a\"], \"b\"]\r\n[\"a\", [\"b\", 25443]]\r\n[\"a\", [\"b\"], [\"\"]]\r\n[\"a\", [\"b\"], [\"c\"]]\r\n[\"a\", [\"b\"], null, [\"c\"]]\r\n[\"a\", [\"b\"], null, null, \"c\"]\r\n[\"a\", [h'C0A80062', 25443]]\r\n[\"a\", [h'C0A80062'], [\"\"]]\r\n[\"a\", [h'C0A80062'], [\"c\"]]\r\n[\"a\", [h'C0A80062'], null, [\"c\"]]\r\n[\"a\", [h'C0A80062'], null, null, \"c\"]\r\n[-2, [\"foo\", 4711], [\"pa\", \"th\"], [\"query\"], \"frag\"]\r\n[\"a\", null, null, [\"c\"]]\r\n[\"a\", null, null, null, \"c\"]\r\n[\"a\", true, [\"b\", \"\"]]\r\n[\"a\", true, [\"b\", \"c\"]]\r\n[\"a\", true, [\"b?c\"]]\r\n[\"a\", true, [\"b\"], null, \"c\"]\r\n[\"a\", null, null, [\"b\", \"c\"]]\r\n[\"a\", null, null, [\"b\"], \"c\"]\r\n[-2, [\"a\", 25186], [\"\"]]\r\n[-2, [\"a\", 25186], [\"c\"]]\r\n[-2, [\"a\", 25186], null, [\"c\"]]\r\n[-2, [\"a\", 25186], null, null, \"c\"]\r\n[-2, [\"foo\", 4711], [\"pa\", \"th\"], [\"query\"], \"frag\"]\r\n[-2, [\"a\"], [\"\"], [\"c\"]]\r\n[-2, [\"a\"], [\"\"], null, \"c\"]\r\n[-2, [\"a\"], [\"b\", \"\"]]\r\n[-2, [\"a\"], [\"b\", \"c\"]]\r\n[-2, [\"a\"], [\"b\"], [\"c\"]]\r\n[-2, [\"a\"], [\"b\"], null, \"c\"]\r\n[-2, [\"a\"], null, [\"b\", \"c\"]]\r\n[-2, [\"a\"], null, [\"b\"], \"c\"]\r\n[-2, [h'C0A80061', 25186], [\"\"]]\r\n[-2, [h'C0A80061', 25186], [\"c\"]]\r\n[-2, [h'C0A80061', 25186], null, [\"c\"]]\r\n[-2, [h'C0A80061', 25186], null, null, \"c\"]\r\n[-2, [\"foo\", 4711], [\"pa\", \"th\"], [\"query\"], \"frag\"]\r\n[-2, [h'C0A80061'], [\"\"], [\"c\"]]\r\n[-2, [h'C0A80061'], [\"\"], null, \"c\"]\r\n[-2, [h'C0A80061'], [\"b\", \"\"]]\r\n[-2, [h'C0A80061'], [\"b\", \"c\"]]\r\n[-2, [h'C0A80061'], [\"b\"], [\"c\"]]\r\n[-2, [h'C0A80061'], [\"b\"], null, \"c\"]\r\n[-2, [h'C0A80061'], null, [\"b\", \"c\"]]\r\n[-2, [h'C0A80061'], null, [\"b\"], \"c\"]\r\n[-2, [\"foo\", 4711], [\"pa\", \"th\"], [\"query\"], \"frag\"]\r\n[-2, [\"foo\", 4711], [\"\"], [\"b\", \"c\"]]\r\n[-2, [\"foo\", 4711], [\"\"], [\"b\"], \"c\"]\r\n[-2, [\"foo\", 4711], [\"a\", \"\", \"\"]]\r\n[-2, [\"foo\", 4711], [\"a\", \"\", \"c\"]]\r\n[-2, [\"foo\", 4711], [\"a\", \"\"], [\"c\"]]\r\n[-2, [\"foo\", 4711], [\"a\", \"\"], null, \"c\"]\r\n[-2, [\"foo\", 4711], [\"a\", \"b\", \"\"]]\r\n[-2, [\"foo\", 4711], [\"a\", \"b\", \"c\"]]\r\n[-2, [\"foo\", 4711], [\"a\", \"b\"], [\"c\"]]\r\n[-2, [\"foo\", 4711], [\"a\", \"b\"], null, \"c\"]\r\n[-2, [\"foo\", 4711], [\"a\"], [\"b\", \"c\"]]\r\n[-2, [\"foo\", 4711], [\"a\"], [\"b\"], \"c\"]\r\n[-2, [\"foo\", 4711], [\"pa\", \"th\"], [\"a\", \"b\", \"c\"]]\r\n```",
          "createdAt": "2022-03-02T14:56:45Z",
          "updatedAt": "2022-03-02T14:56:45Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM4vptnR",
          "commit": {
            "abbreviatedOid": "8c9ea3e"
          },
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-06T17:51:05Z",
          "updatedAt": "2021-11-06T17:51:06Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "is `[null, h'C0A80061']`\r\nshould be `[null, [h'C0A80061']]`",
              "createdAt": "2021-11-06T17:51:05Z",
              "updatedAt": "2021-11-06T17:51:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM4vpwcw",
          "commit": {
            "abbreviatedOid": "8c9ea3e"
          },
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-06T20:54:36Z",
          "updatedAt": "2021-11-06T20:54:36Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "The missing array around authority seems to be the only problem my tests find.\r\n(Of course, we could add these cases to the syntax, saving one byte.)\r\n\r\nOne limitation is that the test vectors don't have a domain name with a dot.  So I can't test that aspect.\r\n\r\nDo you want me to merge this or do you want to fix the array problem first?",
              "createdAt": "2021-11-06T20:54:36Z",
              "updatedAt": "2021-11-06T20:54:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM4vs_ay",
          "commit": {
            "abbreviatedOid": "8c9ea3e"
          },
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-08T16:10:37Z",
          "updatedAt": "2021-11-08T16:10:38Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "```suggestion\r\n      \"cri\": \"82f68144c0a80061\",\r\n```",
              "createdAt": "2021-11-08T16:10:37Z",
              "updatedAt": "2021-11-08T16:10:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM4wAMms",
          "commit": {
            "abbreviatedOid": "84dfd38"
          },
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-13T10:15:24Z",
          "updatedAt": "2021-11-13T10:15:24Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Well, this wasn't just this one test...\r\nI find 37 more tests hat need this change.\r\n",
              "createdAt": "2021-11-13T10:15:24Z",
              "updatedAt": "2021-11-13T10:15:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM4wa75z",
          "commit": {
            "abbreviatedOid": "84dfd38"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-22T11:00:06Z",
          "updatedAt": "2021-11-22T11:00:07Z",
          "comments": [
            {
              "originalPosition": 99,
              "body": "Both from the URI (up-segment before path) and from the CRI (discad 2), this should be:\r\n\r\n```suggestion\r\n      \"cri\": \"82028261616163\",\r\n      \"uri-from-cri\": \"../a/c\",\r\n```",
              "createdAt": "2021-11-22T11:00:07Z",
              "updatedAt": "2021-11-22T11:00:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM4vs_yh",
          "commit": {
            "abbreviatedOid": "8c9ea3e"
          },
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-11-08T16:11:47Z",
          "updatedAt": "2021-12-03T14:39:36Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "```suggestion\r\n      \"resolved-cri\": \"82218144c0a80061\",\r\n```",
              "createdAt": "2021-11-08T16:11:47Z",
              "updatedAt": "2021-12-03T14:39:36Z"
            },
            {
              "originalPosition": 21,
              "body": "I'd say let's have this merged and use it as baseline",
              "createdAt": "2021-11-08T16:13:50Z",
              "updatedAt": "2021-12-03T14:39:37Z"
            },
            {
              "originalPosition": 17,
              "body": "this seems incorrect in two ways:\r\n1. authority is always an array (it should be `[null, [\"a\"]]`)\r\n2. it should translate to `\"//a/\" (the suppressed `null` is the `noauth-leadingslash`)\r\n\r\n(note copied from the [original](https://notes.ietf.org/2Y2YyFstQ5uenofIGBa4IQ))\r\n",
              "createdAt": "2021-11-22T14:47:39Z",
              "updatedAt": "2021-12-03T14:39:36Z"
            },
            {
              "originalPosition": 94,
              "body": "I think this should be `../a` instead, as per rules in \u00a76.1\r\n\r\n(note copied from the [original](https://notes.ietf.org/2Y2YyFstQ5uenofIGBa4IQ))",
              "createdAt": "2021-11-22T14:56:27Z",
              "updatedAt": "2021-12-03T14:39:37Z"
            },
            {
              "originalPosition": 13,
              "body": "Reading the path rules in \u00a76.1, this should be `\"//a/\"` instead?",
              "createdAt": "2021-11-23T15:52:19Z",
              "updatedAt": "2021-12-03T14:39:37Z"
            }
          ]
        }
      ]
    },
    {
      "number": 13,
      "id": "PR_kwDOFyeisM4uLl1I",
      "title": "Relax the percent-encoded constraint.",
      "url": "https://github.com/core-wg/href/pull/13",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "(This PR assumes DID is -6, see other PR.)",
      "createdAt": "2021-11-06T12:41:07Z",
      "updatedAt": "2024-06-02T16:07:45Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "f4085b5e9632fef6d121b261001f5fcc1713505c",
      "headRepository": "core-wg/href",
      "headRefName": "pet",
      "headRefOid": "7792d4b023bdd745069cabad2ca9d4c9134b31f9",
      "closedAt": "2021-11-06T23:01:54Z",
      "mergedAt": "2021-11-06T23:01:54Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "6c0a1a79cad3c7258f04e645c8e84f0e93594c38"
      },
      "comments": [
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "Merging this new section, which can easily be backed out, as a discussion item for the WG meeting at IETF 112.",
          "createdAt": "2021-11-06T22:57:58Z",
          "updatedAt": "2021-11-06T22:57:58Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 14,
      "id": "PR_kwDOFyeisM4uLmUe",
      "title": "Add URN, DID; URN example; CDDL fixes",
      "url": "https://github.com/core-wg/href/pull/14",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-06T12:57:20Z",
      "updatedAt": "2024-06-02T16:07:48Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "f4085b5e9632fef6d121b261001f5fcc1713505c",
      "headRepository": "core-wg/href",
      "headRefName": "did-urn",
      "headRefOid": "39efe1057b0979cef3249f9ef96340b67ad8de8d",
      "closedAt": "2021-11-06T15:21:55Z",
      "mergedAt": "2021-11-06T15:21:55Z",
      "mergedBy": "chrysn",
      "mergeCommit": {
        "oid": "418aee734b455ae27d5bf56e5358c42e54a8aaad"
      },
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Especially this fixes the true/null mixup I added when naming these, thanks.",
          "createdAt": "2021-11-06T15:21:51Z",
          "updatedAt": "2021-11-06T15:21:51Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM4vptkD",
          "commit": {
            "abbreviatedOid": "39efe10"
          },
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "LGMT",
          "createdAt": "2021-11-06T17:48:08Z",
          "updatedAt": "2021-11-06T17:48:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 15,
      "id": "PR_kwDOFyeisM4uLnUR",
      "title": "Use kramdown-rfc's DRYer \"venue\" feature.",
      "url": "https://github.com/core-wg/href/pull/15",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-06T13:28:46Z",
      "updatedAt": "2024-06-02T16:07:52Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "f4085b5e9632fef6d121b261001f5fcc1713505c",
      "headRepository": "core-wg/href",
      "headRefName": "venue",
      "headRefOid": "d6657d7e7441fb8994c0cb6f8161558bb3ea1320",
      "closedAt": "2021-11-06T15:19:35Z",
      "mergedAt": "2021-11-06T15:19:35Z",
      "mergedBy": "chrysn",
      "mergeCommit": {
        "oid": "a0f8ef57686714f4b1e7838fa63cf5ad42ee4ab4"
      },
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Nice :-)",
          "createdAt": "2021-11-06T15:19:40Z",
          "updatedAt": "2021-11-06T15:19:40Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 19,
      "id": "PR_kwDOFyeisM4uzh3F",
      "title": "pet: Allow bytes, make non-zero",
      "url": "https://github.com/core-wg/href/pull/19",
      "state": "MERGED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Bytes allow covering the full set of URI oddities.\r\n\r\n`.ne ''` is an easy measure against needlessly chunked strings.\r\n\r\nCloses: https://github.com/core-wg/href/issues/17\r\n\r\n---\r\n\r\nSome more could be done in analogy to the non-zeroness for the regular strings (forcing this to be minimally encoded), but not sure it's worth the verbosity. (In particular, the first repetition would become special in that it allows a zero-length zeroth component, and (by being nonoptional) also ensuring the pet doesn't degrade into a single-element array that could just as well have been a text).",
      "createdAt": "2021-11-20T18:56:05Z",
      "updatedAt": "2021-11-22T12:58:39Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "5132ae4ff1879daa926c4a39cbe15ae3bacb640f",
      "headRepository": "core-wg/href",
      "headRefName": "pet-nonzer-binary",
      "headRefOid": "0134b109888c1b2e6c82b71254b34edf958bc247",
      "closedAt": "2021-11-22T12:58:10Z",
      "mergedAt": "2021-11-22T12:58:10Z",
      "mergedBy": "chrysn",
      "mergeCommit": {
        "oid": "f9f4dc925e2cf94f8ef89ca57f0a285a37983168"
      },
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Merging this as I'm about to create some PET vectors, and not doing binary right away would either mean inconsistency between text or examples or needless work.",
          "createdAt": "2021-11-22T12:58:06Z",
          "updatedAt": "2021-11-22T12:58:06Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 23,
      "id": "PR_kwDOFyeisM4xB9sa",
      "title": "Initial empty segment",
      "url": "https://github.com/core-wg/href/pull/23",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This pull request removes the oddity about\r\n\r\nscheme://authority\r\n\r\nvs\r\n\r\nscheme://authority/",
      "createdAt": "2022-01-14T12:18:02Z",
      "updatedAt": "2024-06-02T16:07:55Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "7da3ea5e9d75ecd4f6d5ac7bb582a5469968a7c8",
      "headRepository": "core-wg/href",
      "headRefName": "initial-empty-segment",
      "headRefOid": "d4293a4910ddbb43b3ef1c2731b908f0be37be36",
      "closedAt": "2022-01-15T23:05:56Z",
      "mergedAt": "2022-01-15T23:05:56Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "eccb52e987a59e6df3eb3215a1203367b8d14307"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM4y1rpp",
          "commit": {
            "abbreviatedOid": "44b8e09"
          },
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-14T13:48:08Z",
          "updatedAt": "2022-01-14T14:04:52Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "_\"[...] but not at the URI processing level CRIs operate at.\"_\r\n\r\nWhat does that mean?  Maybe give an example of when the equivalency breaks.",
              "createdAt": "2022-01-14T13:48:08Z",
              "updatedAt": "2022-01-14T14:04:52Z"
            },
            {
              "originalPosition": 7,
              "body": "_\"this is considered equivalent to a path of zero path segments by HTTP and CoAP\"_\r\n\r\nDoes this mean that we need to add special rules for normalisation and comparison of CRIs with scheme = http(s) or coap(s)?\r\n",
              "createdAt": "2022-01-14T14:02:42Z",
              "updatedAt": "2022-01-14T14:05:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM4y1xIf",
          "commit": {
            "abbreviatedOid": "44b8e09"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "I wonder whether it makes sense to (non-normatively) say something about converting CRIs to CoAP options; the conversion steps that if all a CRI's path items are empty, one less is expressed in CoAP is probably not obvious to implementers, especially those that are aware of the document's goals. (I'm not even sure I've phrased it right; URIs like scheme://authority/// are rather weird and Probably Nobody Gets Them Right In URI Space Already).",
          "createdAt": "2022-01-14T14:08:58Z",
          "updatedAt": "2022-01-14T14:21:22Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\n   Note that this includes the zero-length string.\r\n   \r\n   If no authority is present in a CRI, the leading path segment can not be empty.\r\n```\r\n\r\nI'd have hoped for no-corner-cases, but these need to stay excluded or we'd build CRIs that can not be encoded in URIs.",
              "createdAt": "2022-01-14T14:08:58Z",
              "updatedAt": "2022-01-14T14:21:22Z"
            },
            {
              "originalPosition": 60,
              "body": "I was about to add something about two leading nulls being removed, but for that we have discard these days.",
              "createdAt": "2022-01-14T14:13:19Z",
              "updatedAt": "2022-01-14T14:21:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM4y105D",
          "commit": {
            "abbreviatedOid": "44b8e09"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-14T14:23:07Z",
          "updatedAt": "2022-01-14T14:23:07Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Maybe \"but not for CRIs in general as they only perform normalizations on the Syntax-Based Normalization level ({{Section 6.2.2 of RFC3876}})\"?",
              "createdAt": "2022-01-14T14:23:07Z",
              "updatedAt": "2022-01-14T14:23:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM4y11S9",
          "commit": {
            "abbreviatedOid": "44b8e09"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-14T14:24:39Z",
          "updatedAt": "2022-01-14T14:24:39Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Comparing CRIs can always give false negatives at the scheme level because CRIs perform no scheme level normalization. (We've considered prescribing or defining that the port would be elided for comparisons when default, maybe we want to do something similar here.)",
              "createdAt": "2022-01-14T14:24:39Z",
              "updatedAt": "2022-01-14T14:24:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM4y14j8",
          "commit": {
            "abbreviatedOid": "44b8e09"
          },
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-14T14:36:05Z",
          "updatedAt": "2022-01-14T14:36:06Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "We could contort the CDDL to exclude leading nulls.",
              "createdAt": "2022-01-14T14:36:06Z",
              "updatedAt": "2022-01-14T14:36:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM4y2Cjd",
          "commit": {
            "abbreviatedOid": "35c8151"
          },
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-14T15:10:03Z",
          "updatedAt": "2022-01-14T15:10:04Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Maybe just noting the increased chance for false negatives then?",
              "createdAt": "2022-01-14T15:10:04Z",
              "updatedAt": "2022-01-14T15:10:04Z"
            }
          ]
        }
      ]
    },
    {
      "number": 27,
      "id": "PR_kwDOFyeisM4yHocJ",
      "title": "Explain path component construction using the term \"rooted\"",
      "url": "https://github.com/core-wg/href/pull/27",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Close #26 ",
      "createdAt": "2022-02-05T13:02:35Z",
      "updatedAt": "2024-06-02T16:07:56Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "eccb52e987a59e6df3eb3215a1203367b8d14307",
      "headRepository": "core-wg/href",
      "headRefName": "rooted",
      "headRefOid": "1ef3eac2f14211d7b1d64e015089b2d332093b7c",
      "closedAt": "2022-02-21T15:39:43Z",
      "mergedAt": "2022-02-21T15:39:43Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "5a2f8edeeca34cf2ec42a942fc6a689d329cf4f5"
      },
      "comments": [
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "It doesn't look like we'll find the perfect replacement for \"representation\", so I merged this.",
          "createdAt": "2022-02-21T15:40:05Z",
          "updatedAt": "2022-02-21T15:40:05Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM40GKMC",
          "commit": {
            "abbreviatedOid": "1ef3eac"
          },
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Looks like this should work, thanks!",
          "createdAt": "2022-02-06T12:07:48Z",
          "updatedAt": "2022-02-06T12:07:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOFyeisM40drtV",
          "commit": {
            "abbreviatedOid": "1ef3eac"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-11T13:45:20Z",
          "updatedAt": "2022-02-11T13:52:19Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "```suggestion\r\n  serializations of these items.  These serializations generally\r\n```\r\n\r\nNot perfectly happy with \"serializations\" either, but representations rings yet another bell in the REST context.",
              "createdAt": "2022-02-11T13:45:20Z",
              "updatedAt": "2022-02-11T13:52:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM40d8Ma",
          "commit": {
            "abbreviatedOid": "1ef3eac"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-11T14:39:04Z",
          "updatedAt": "2022-02-11T14:39:04Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "Note from chat: this is still between information and data model, so not about wire format yet, so serialization isn't really making it better.",
              "createdAt": "2022-02-11T14:39:04Z",
              "updatedAt": "2022-02-11T14:39:04Z"
            }
          ]
        }
      ]
    },
    {
      "number": 29,
      "id": "PR_kwDOFyeisM4yInIQ",
      "title": "Editorial: Discard is always true after resolving an absolute CRI.",
      "url": "https://github.com/core-wg/href/pull/29",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Close #28 ",
      "createdAt": "2022-02-06T17:39:02Z",
      "updatedAt": "2024-06-02T16:07:59Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "eccb52e987a59e6df3eb3215a1203367b8d14307",
      "headRepository": "core-wg/href",
      "headRefName": "discard",
      "headRefOid": "05484a446420cf776f46c26f6cb4b57c5c0dd8d2",
      "closedAt": "2022-02-07T00:29:38Z",
      "mergedAt": "2022-02-07T00:29:38Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "f2f4b258c7f0c2c34baef6b457748437ac118f27"
      },
      "comments": [
        {
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "body": "on further reflection: should it be given its own bullet?",
          "createdAt": "2022-02-06T18:17:57Z",
          "updatedAt": "2022-02-06T18:17:57Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "Yes, but that causes renumbering",
          "createdAt": "2022-02-06T19:15:53Z",
          "updatedAt": "2022-02-06T19:15:53Z"
        },
        {
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "body": "> Yes, but that causes renumbering\r\n\r\nI hereby withdraw my suggestion :-)\r\n\r\n\ud83d\udea2 it!",
          "createdAt": "2022-02-06T19:23:24Z",
          "updatedAt": "2022-02-06T19:23:42Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM40GTtF",
          "commit": {
            "abbreviatedOid": "05484a4"
          },
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "\ud83d\udc4d ",
          "createdAt": "2022-02-06T18:05:40Z",
          "updatedAt": "2022-02-06T18:05:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 33,
      "id": "PR_kwDOFyeisM4zPezV",
      "title": "Mention that discard is true implicitly for scheme \u2228 authority.",
      "url": "https://github.com/core-wg/href/pull/33",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Closes #31 ",
      "createdAt": "2022-02-21T17:18:09Z",
      "updatedAt": "2024-06-02T16:08:01Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "5a2f8edeeca34cf2ec42a942fc6a689d329cf4f5",
      "headRepository": "core-wg/href",
      "headRefName": "discard-true-implicit",
      "headRefOid": "4ef1d6d802634b00749ba1ceb19a035b3cdd9a68",
      "closedAt": "2022-02-25T14:50:05Z",
      "mergedAt": "2022-02-25T14:50:05Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "2ebe5f2df2e4a2cb4946879d4cd66cc99d0351c7"
      },
      "comments": [
        {
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "body": "LGTM",
          "createdAt": "2022-02-25T14:50:14Z",
          "updatedAt": "2022-02-25T14:50:14Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM40_PAB",
          "commit": {
            "abbreviatedOid": "4ef1d6d"
          },
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-21T18:08:16Z",
          "updatedAt": "2022-02-21T18:08:17Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "What RFC3986 calls a \"network-path reference\" (i.e., `\"//\" authority path-abempty`) in CRI terms should be expressed as `[ null, authority, path / null ]`, right?\r\n\r\nIf so, we could say:\r\n```suggestion\r\n3. If the value of discard is `true` in the CRI reference (which is\r\n   implicitly the case when scheme and authority are present in the reference and scheme is null), replace the\r\n```",
              "createdAt": "2022-02-21T18:08:16Z",
              "updatedAt": "2022-02-21T18:08:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM41Rc9I",
          "commit": {
            "abbreviatedOid": "4ef1d6d"
          },
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-25T14:50:04Z",
          "updatedAt": "2022-02-25T14:50:05Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Drop this.  As discussed, I had misunderstood the whole thing.",
              "createdAt": "2022-02-25T14:50:04Z",
              "updatedAt": "2022-02-25T14:50:05Z"
            }
          ]
        }
      ]
    },
    {
      "number": 35,
      "id": "PR_kwDOFyeisM4z_gDF",
      "title": "add Go implementation",
      "url": "https://github.com/core-wg/href/pull/35",
      "state": "MERGED",
      "author": "thomas-fossati",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-05T15:30:55Z",
      "updatedAt": "2022-03-05T15:44:20Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "2ebe5f2df2e4a2cb4946879d4cd66cc99d0351c7",
      "headRepository": "core-wg/href",
      "headRefName": "go-href",
      "headRefOid": "c56f89882564f1763b4db67b2a8d11cc77de2b68",
      "closedAt": "2022-03-05T15:44:20Z",
      "mergedAt": "2022-03-05T15:44:20Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "6c0a185d5dcb7128f9992172096a75c973c82ce3"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 36,
      "id": "PR_kwDOFyeisM4z_hBm",
      "title": "Clarify fragment clearing; close #30",
      "url": "https://github.com/core-wg/href/pull/36",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-05T15:56:53Z",
      "updatedAt": "2024-06-02T16:08:10Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "d57228de8cbe33ed21d4e39f1c32b242ea4bade1",
      "headRepository": "core-wg/href",
      "headRefName": "i30",
      "headRefOid": "41616651b2646ed2d821883e7c3520669b234876",
      "closedAt": "2022-03-05T22:05:36Z",
      "mergedAt": "2022-03-05T22:05:36Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "cd2cda0da791327b80a076777ca3b6d92e0a895e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM41tD3_",
          "commit": {
            "abbreviatedOid": "4161665"
          },
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-05T19:49:34Z",
          "updatedAt": "2022-03-05T19:49:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 37,
      "id": "PR_kwDOFyeisM4z_iCZ",
      "title": "Fix reg-name constraint (C4), close #25",
      "url": "https://github.com/core-wg/href/pull/37",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Mention that schemes can supply a default for the case of empty\r\nreg-names (3.2.2 of 3986).",
      "createdAt": "2022-03-05T16:22:30Z",
      "updatedAt": "2024-06-02T16:08:12Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "d57228de8cbe33ed21d4e39f1c32b242ea4bade1",
      "headRepository": "core-wg/href",
      "headRefName": "regname-constraint",
      "headRefOid": "20a4a29ec5af1e1abe01c7aa40c484a401924919",
      "closedAt": "2022-03-05T22:05:51Z",
      "mergedAt": "2022-03-05T22:05:51Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "6460f1e9621f13e9844c7b738bbcd1743d64ac2a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM41tD60",
          "commit": {
            "abbreviatedOid": "20a4a29"
          },
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-05T19:52:02Z",
          "updatedAt": "2022-03-05T19:52:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 38,
      "id": "PR_kwDOFyeisM4z_jAA",
      "title": "Provide CDDL for both CRI and CRI-Reference",
      "url": "https://github.com/core-wg/href/pull/38",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Close #32 ",
      "createdAt": "2022-03-05T16:44:27Z",
      "updatedAt": "2024-06-02T16:08:17Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "d57228de8cbe33ed21d4e39f1c32b242ea4bade1",
      "headRepository": "core-wg/href",
      "headRefName": "absolute-cri-cddl",
      "headRefOid": "5c86edbc0ed06d1d0935256a4692cb73e84998b4",
      "closedAt": "2022-03-05T22:06:46Z",
      "mergedAt": "2022-03-05T22:06:46Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "d899c2d915d1e8846ec3e205a78d31aa134f09ff"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM41tEiG",
          "commit": {
            "abbreviatedOid": "5c86edb"
          },
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-05T20:29:31Z",
          "updatedAt": "2022-03-05T20:29:38Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "just a curiosity: why is this an array?",
              "createdAt": "2022-03-05T20:29:31Z",
              "updatedAt": "2022-03-05T20:29:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM41tF13",
          "commit": {
            "abbreviatedOid": "5c86edb"
          },
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-05T22:06:35Z",
          "updatedAt": "2022-03-05T22:06:35Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "It indeed could be anything; for random generation testing, it is best to simply generate one each.",
              "createdAt": "2022-03-05T22:06:35Z",
              "updatedAt": "2022-03-05T22:06:35Z"
            }
          ]
        }
      ]
    },
    {
      "number": 39,
      "id": "PR_kwDOFyeisM4z_jp8",
      "title": "Structure Section 5.1, explain discard better",
      "url": "https://github.com/core-wg/href/pull/39",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-05T17:01:26Z",
      "updatedAt": "2024-06-02T16:08:17Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "d899c2d915d1e8846ec3e205a78d31aa134f09ff",
      "headRepository": "core-wg/href",
      "headRefName": "explain-discard-i34",
      "headRefOid": "f2325a3902c66bed67af7d686421fb83274ef6a4",
      "closedAt": "2022-03-06T12:29:28Z",
      "mergedAt": "2022-03-06T12:29:28Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "ed2b1894ad7fba5a0bbe3b0372c216b2e227eb06"
      },
      "comments": [
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "Meant to close #34 ",
          "createdAt": "2022-03-05T17:02:03Z",
          "updatedAt": "2022-03-05T17:02:03Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM41tFPx",
          "commit": {
            "abbreviatedOid": "b0b158b"
          },
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-05T21:22:59Z",
          "updatedAt": "2022-03-05T21:22:59Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nE.g., a simple URI reference \"foo\" can specify to remove one leading segment\r\nfrom the base URI's path by setting discard to `1` in the equivalent CRI\r\nreference; similarly \"../foo\", two segments,\r\n`2`; and \"/foo\", all segments, is represented in the `discard` section as the value `true`.\r\n```",
              "createdAt": "2022-03-05T21:22:59Z",
              "updatedAt": "2022-03-05T21:22:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM41tFSX",
          "commit": {
            "abbreviatedOid": "b0b158b"
          },
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-05T21:26:06Z",
          "updatedAt": "2022-03-05T21:26:06Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I think the bit of information that's still missing here is a concise explanation of *why* discard is needed at all.",
              "createdAt": "2022-03-05T21:26:06Z",
              "updatedAt": "2022-03-05T21:26:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM41tF33",
          "commit": {
            "abbreviatedOid": "b0b158b"
          },
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-05T22:08:35Z",
          "updatedAt": "2022-03-05T22:08:36Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "Er, no: the URI reference \"foo\"  *does* specify to remove one segment.\r\nSorry for the parameterized semicolon list; please see CMOS what that means :-)",
              "createdAt": "2022-03-05T22:08:35Z",
              "updatedAt": "2022-03-05T22:08:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM41tF6K",
          "commit": {
            "abbreviatedOid": "b0b158b"
          },
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-05T22:11:38Z",
          "updatedAt": "2022-03-05T22:11:38Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Hmm, it says \u00bbIt then expresses the operations performed on a base CRI by CRI references that\r\nare equivalent to URI references with relative paths and path prefixes such as \"/\", \"./\", \"../\", \"../../\", etc.\u00ab\r\n",
              "createdAt": "2022-03-05T22:11:38Z",
              "updatedAt": "2022-03-05T22:11:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM41tF6n",
          "commit": {
            "abbreviatedOid": "b0b158b"
          },
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-05T22:12:03Z",
          "updatedAt": "2022-03-05T22:12:03Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "I redundantify-ized the semicolon list.",
              "createdAt": "2022-03-05T22:12:03Z",
              "updatedAt": "2022-03-05T22:12:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM41tQ2C",
          "commit": {
            "abbreviatedOid": "a2b1704"
          },
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "awesome, thanks!",
          "createdAt": "2022-03-06T10:35:20Z",
          "updatedAt": "2022-03-06T10:35:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 41,
      "id": "PR_kwDOFyeisM4z_lth",
      "title": "More small print (close #24).",
      "url": "https://github.com/core-wg/href/pull/41",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-05T17:53:24Z",
      "updatedAt": "2024-06-02T16:08:19Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "ed2b1894ad7fba5a0bbe3b0372c216b2e227eb06",
      "headRepository": "core-wg/href",
      "headRefName": "small-print",
      "headRefOid": "32365331f70fdc85b1107ca56fae5c56dfb98d3c",
      "closedAt": "2022-03-07T22:16:36Z",
      "mergedAt": "2022-03-07T22:16:36Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "73cc2dae1b9b6ade5e144d0f03e94df34728ac7b"
      },
      "comments": [
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "close #24",
          "createdAt": "2022-03-05T17:54:17Z",
          "updatedAt": "2022-03-05T17:54:17Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 42,
      "id": "PR_kwDOFyeisM4z_umb",
      "title": "Add optional userinfo (feature \"userinfo\").",
      "url": "https://github.com/core-wg/href/pull/42",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Close #40.",
      "createdAt": "2022-03-05T22:20:00Z",
      "updatedAt": "2024-06-02T16:08:23Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "73cc2dae1b9b6ade5e144d0f03e94df34728ac7b",
      "headRepository": "core-wg/href",
      "headRefName": "add-userinfo",
      "headRefOid": "e8fa97f80413c7042da62200539b0859b39ea3f0",
      "closedAt": "2022-03-07T22:17:38Z",
      "mergedAt": "2022-03-07T22:17:37Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "20f0e3c5545e62af8cc09783e72e42b9550db4b6"
      },
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Going with a colon (\":\") for a separator would be the first time we're making an own choice in delimiting components that have no structure per URI or other specs.\r\n\r\nThe slashes between paths are special even in URI references (but not URIs). The ampersands of query parameters come from CoAP, and the dots in the host at least from DNS.\r\n\r\nThe colon is merely pointed out as a deprecated form, and while 3986 talks of special treatment (\"should not render anything after the first colon\"), none of that is normative text.\r\n\r\nWhat is unclear to me at first reading is how a parser can use this without lookahead. A 2-long authority list whose first component is an array could be `[userinfo, host]`, or it could be `[host, port]` if the first element of host uses the pet variant of text-or-pet.",
          "createdAt": "2022-03-06T08:51:54Z",
          "updatedAt": "2022-03-06T08:51:54Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "3986 fails to use 2119 capitalization (*), so the \"should\" is actually quite normative.\r\n\r\nFor me, the \":\" stands out in:\r\n\r\n``` \r\n      userinfo    = *( unreserved / pct-encoded / sub-delims / \":\" )\r\n```\r\n\r\nThe ambiguity between pet for a hostname segment and userinfo is a problem, of course.\r\n\r\n(*) Which seems to be a fad in some circles, https://infra.spec.whatwg.org/#conformance",
          "createdAt": "2022-03-06T09:42:05Z",
          "updatedAt": "2022-03-06T09:42:05Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "\r\n> 3986 says that 'Use the format \"user:password\" is deprecated'. I'm not sure I'd interpret that as \"anything with a colon is deprecated\" or just \"sending a password after a user name is deprecated\".\r\n\r\nThis is all pretty murky, and taking on userinfo is going to be about as clean as zone info.\r\n\r\nWe clearly have moved beyond 3986 in our understanding how deeply user:password is deprecated.  For a sender of foo:bar, there is a strong danger of falling into a black hole due to this deprecation, so I think unadorned colons in userinfo are now essentially unusable.  \r\n(But you still can add them in PET...)\r\n\r\nNext step: Adding userinfo to CoAP :-)\r\n(Note that we already have psk-identity in CoAP over DTLS...)\r\n",
          "createdAt": "2022-03-06T13:04:20Z",
          "updatedAt": "2022-03-06T13:04:20Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 45,
      "id": "PR_kwDOFyeisM40V8bc",
      "title": "tests: questionmarks in paths need to be percent encoded",
      "url": "https://github.com/core-wg/href/pull/45",
      "state": "MERGED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "test vectors"
      ],
      "body": "This splits the example into what the URI said (there is a query\r\nparameter) and what the CRI said (there is a question mark in the path).\r\n\r\n---\r\n\r\nThis is the only error I've identified so far in the tests; note that I'm only resolving CRIs and converting CRIs to URIs so far, so the \"uri\" fields are generally still unchecked by me.",
      "createdAt": "2022-03-12T13:07:38Z",
      "updatedAt": "2022-06-24T14:09:07Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "20f0e3c5545e62af8cc09783e72e42b9550db4b6",
      "headRepository": "core-wg/href",
      "headRefName": "tests-questionmark-in-path",
      "headRefOid": "211cf70daa6a4b6a8315170f83bd5b4d2b9a3d9a",
      "closedAt": "2022-06-24T14:08:32Z",
      "mergedAt": "2022-06-24T14:08:32Z",
      "mergedBy": "chrysn",
      "mergeCommit": {
        "oid": "2d4ccfdeaf77bfab9c1e6f8f024112579a613cfd"
      },
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Is there any discussion necessary on whether these changes are correct, or can we just merge this?",
          "createdAt": "2022-06-16T15:31:00Z",
          "updatedAt": "2022-06-16T15:31:00Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 47,
      "id": "PR_kwDOFyeisM40WArb",
      "title": "Extra test vectors",
      "url": "https://github.com/core-wg/href/pull/47",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "test vectors"
      ],
      "body": "Now for some hard ones...\r\n\r\nThis introduces two things on the mechanism side:\r\n* Test descriptions. Thanks to JSON for not having comments.\r\n* Tests whose uri and uri-from-cri is null. This is on precisely the tests where the reference can not be expressed as a URI. Resolved URIs are still present, because all CRIs are also URIs (just the CRI references are more expressive). Implementations may skip the URI conversion on the references, or attempt to convert the CRI to a URI and require the conversion to fail.\r\n* Tests with an \"invalid\" entry are, in some form, invalid CRIs. Implementations may skip them, or just silence errors but not crashes, or (if they check thoroughly) even require errors to be raised.\r\n\r\nThat being said, these tests are what I needed to get OKish coverage, and to flush out places where I knew my implementation was incomplete. It contains PETs and non-PET things that do or do not need escaping in a lot of places, plus tests for things that will get separate issues shortly (like the last one)",
      "createdAt": "2022-03-12T14:50:04Z",
      "updatedAt": "2024-05-05T22:29:54Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "20f0e3c5545e62af8cc09783e72e42b9550db4b6",
      "headRepository": "core-wg/href",
      "headRefName": "extratests",
      "headRefOid": "679ad26f0165fe28ffcec4299afa555b279ae3bb",
      "closedAt": "2024-05-05T22:29:53Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Is there any discussion necessary on whether these changes are correct, or can we just merge this?",
          "createdAt": "2022-06-16T15:30:36Z",
          "updatedAt": "2022-06-16T15:30:36Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "I've updated my Rust implementation (some cleanup needed before pushing), and it passes with these vectors and I found no new issues from making it work.",
          "createdAt": "2022-06-20T16:04:49Z",
          "updatedAt": "2022-06-20T16:04:49Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "One more commit now adds a test for PET in the host name; I found that necessary for feature coverage in the Rust implementation (but they pass in the Python impl as well).",
          "createdAt": "2022-06-21T11:53:01Z",
          "updatedAt": "2022-06-21T11:53:01Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Takeaway from today's meeting: \"invalid\" should be classified (without ruling out that weird cases stay weird until our mental model of how things can be wrong in a CRI has been enhanced)",
          "createdAt": "2022-06-24T15:03:57Z",
          "updatedAt": "2022-06-24T15:03:57Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Now part of #79 except for https://github.com/core-wg/href/issues/86 -- closing.",
          "createdAt": "2024-05-05T22:29:53Z",
          "updatedAt": "2024-05-05T22:29:53Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM48dJns",
          "commit": {
            "abbreviatedOid": "05602f4"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T21:36:56Z",
          "updatedAt": "2022-06-21T21:36:57Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "This is incorrect: 'As a special case, an empty array is sent in place for a remaining [0] (URI \"\")' -- should check whether that's consistent all over the text / where this interpretation came from.",
              "createdAt": "2022-06-21T21:36:57Z",
              "updatedAt": "2022-06-21T21:36:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM48gGLZ",
          "commit": {
            "abbreviatedOid": "05602f4"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-22T11:58:51Z",
          "updatedAt": "2022-06-22T11:58:51Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "Didn't find any location that indicated something else; the latest update fixes the case in alignment with the Rust implementation.",
              "createdAt": "2022-06-22T11:58:51Z",
              "updatedAt": "2022-06-22T11:58:51Z"
            }
          ]
        }
      ]
    },
    {
      "number": 49,
      "id": "PR_kwDOFyeisM40WBGO",
      "title": "conversion: Never said scheme numbers become text",
      "url": "https://github.com/core-wg/href/pull/49",
      "state": "MERGED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Was probably just missed; natural language is so bad at welldefined casting ;-)",
      "createdAt": "2022-03-12T15:00:51Z",
      "updatedAt": "2022-06-24T13:32:56Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "20f0e3c5545e62af8cc09783e72e42b9550db4b6",
      "headRepository": "core-wg/href",
      "headRefName": "convert-scheme-number",
      "headRefOid": "debc018f5203858174f947ecf7abe6667d28ebd0",
      "closedAt": "2022-06-24T13:32:34Z",
      "mergedAt": "2022-06-24T13:32:34Z",
      "mergedBy": "chrysn",
      "mergeCommit": {
        "oid": "2997738abccf13d5ef600a387832a799c3853e1e"
      },
      "comments": [
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "I updated the PR slightly so that it is clear that a lower case form of that scheme name is required.",
          "createdAt": "2022-06-24T13:01:29Z",
          "updatedAt": "2022-06-24T13:01:29Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 54,
      "id": "PR_kwDOFyeisM460PAz",
      "title": "Add lamentation about PET sequences",
      "url": "https://github.com/core-wg/href/pull/54",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Fix #51 ",
      "createdAt": "2022-07-04T19:31:24Z",
      "updatedAt": "2024-06-02T16:07:09Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "2d4ccfdeaf77bfab9c1e6f8f024112579a613cfd",
      "headRepository": "core-wg/href",
      "headRefName": "pet-lament",
      "headRefOid": "b4db6a8c04929f4a20d772c88631ae6ba64d2c5e",
      "closedAt": "2022-09-07T19:58:19Z",
      "mergedAt": "2022-09-07T19:58:19Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "ef4629a8f2bbbb169048cb0efe25bf9112b45490"
      },
      "comments": [
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "Merging this for a new I-D revision to avoid expiry.",
          "createdAt": "2022-09-07T19:58:13Z",
          "updatedAt": "2022-09-07T19:58:13Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 55,
      "id": "PR_kwDOFyeisM460QbV",
      "title": "./ to protect : in first path element (Fix #48)",
      "url": "https://github.com/core-wg/href/pull/55",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-04T19:42:16Z",
      "updatedAt": "2024-06-02T16:07:06Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "2d4ccfdeaf77bfab9c1e6f8f024112579a613cfd",
      "headRepository": "core-wg/href",
      "headRefName": "path-noscheme",
      "headRefOid": "c447ae32ed926bd59924ecc1a96d71aaaa53483e",
      "closedAt": "2022-09-07T19:57:42Z",
      "mergedAt": "2022-09-07T19:57:42Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "8e0fe780672b12a3c16465d67ce8b0b10eec178b"
      },
      "comments": [
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "Merging this for a new I-D revision to avoid expiry.",
          "createdAt": "2022-09-07T19:57:23Z",
          "updatedAt": "2022-09-07T19:57:23Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 56,
      "id": "PR_kwDOFyeisM48LpIc",
      "title": "Reference cddl-control / RFC9165",
      "url": "https://github.com/core-wg/href/pull/56",
      "state": "MERGED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "We use .feature, so it's normative.\r\n\r\n(Context: I've been looking for drafts that uses .feature, and found nothing in the inbound references of 9165, but should have.)",
      "createdAt": "2022-07-27T13:42:05Z",
      "updatedAt": "2023-03-08T16:51:32Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "2d4ccfdeaf77bfab9c1e6f8f024112579a613cfd",
      "headRepository": "core-wg/href",
      "headRefName": "ref-cddl-control",
      "headRefOid": "e45b19620eb39a280e7ea0c4602d81533074de5b",
      "closedAt": "2022-07-27T15:55:57Z",
      "mergedAt": "2022-07-27T15:55:57Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "fe3d9e3d8eb3ba89ec3f0662ecbae28b9fbb6aee"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM4-vRVq",
          "commit": {
            "abbreviatedOid": "fc33903"
          },
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-27T14:09:52Z",
          "updatedAt": "2022-07-27T14:09:52Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Well, the extensions are part of the language, so maybe \r\n```suggestion\r\n(CDDL)](#RFC8610) [including its control extensions](#RFC9165) as follows: [^replace-xxxx]\r\n```",
              "createdAt": "2022-07-27T14:09:52Z",
              "updatedAt": "2022-07-27T14:09:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM4-v8d_",
          "commit": {
            "abbreviatedOid": "e45b196"
          },
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Thanks!\r\n",
          "createdAt": "2022-07-27T15:55:45Z",
          "updatedAt": "2022-07-27T15:55:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 57,
      "id": "PR_kwDOFyeisM5AqSsi",
      "title": "Draft text for URI-Scheme-ID registry",
      "url": "https://github.com/core-wg/href/pull/57",
      "state": "CLOSED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "As discussed today in the interim",
      "createdAt": "2022-10-12T14:59:39Z",
      "updatedAt": "2024-06-02T16:07:03Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "ce7776b73d78f875584ac93e90db4d7daf8d7331",
      "headRepository": "core-wg/href",
      "headRefName": "scheme-registry",
      "headRefOid": "a733a14357137b07718264e582446a6630108186",
      "closedAt": "2023-03-27T20:23:52Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "In the meeting, we agreed to look at existing URI-schemes to include in the initial content.\r\nA wiki for collecting information we find is set up at https://github.com/core-wg/href/wiki/uri-schemes-that-we-want-numbers-for\r\nThe present PR will leave draft status once the results from that collection activity have found their way into the PR.\r\n",
          "createdAt": "2022-10-12T16:09:06Z",
          "updatedAt": "2022-10-12T16:09:06Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "We are not covering provisional vs. permanent registrations.\r\n\r\nHow do we get people to notice the opportunity to register a negative number?",
          "createdAt": "2022-12-16T15:27:47Z",
          "updatedAt": "2022-12-16T15:27:47Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "In the interim the \"number now or never\" vs. \"numbers later but x- problem\" issue.\r\n\r\nNeither option feels really right for me, both have too grave downsides. Trying to think out of the box here: Can we get around this dilemma by declaring text versions second class citizens from the onset? Like, \"Using the text form is a fallback for when no numeric form has been assigned, and not for when the receiving party may or may not know the numeric form. Users of CRIs other than generic interconverters need to make sure that the protocols they actually dereference have assigned numbers\". And \"Generic converters between URIs and CRIs should be deployed with updatability in mind\" (as all IoT software should be). That'd allow schemes to be assigned numbers later, and while not solving the x-dash problem in full, would at least be very explicit about the expectations that are set, in that nobody should be stuck with text.",
          "createdAt": "2023-01-18T17:43:34Z",
          "updatedAt": "2023-01-18T17:43:34Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "The problem really is that I can't generate nint labels if I don't know whether the recipient understands them.\r\nSo, as a generator, I'm eternally stuck with text labels.\r\n",
          "createdAt": "2023-01-20T12:48:57Z",
          "updatedAt": "2023-01-20T12:48:57Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "We now have converged on a radically different approach: register a nint for everything.",
          "createdAt": "2023-03-27T20:24:59Z",
          "updatedAt": "2023-03-27T20:24:59Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM5D6J57",
          "commit": {
            "abbreviatedOid": "ee01daf"
          },
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "\ud83d\udc4d ",
          "createdAt": "2022-10-12T15:34:45Z",
          "updatedAt": "2022-10-12T15:35:48Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\nRegistry\" in the \"CoRE Parameters\" registry {{!IANA.core-parameters}},\r\n```",
              "createdAt": "2022-10-12T15:34:45Z",
              "updatedAt": "2022-10-12T15:35:48Z"
            }
          ]
        }
      ]
    },
    {
      "number": 58,
      "id": "PR_kwDOFyeisM5Dkcuw",
      "title": "Forbid rootless no-authority CRIs without path",
      "url": "https://github.com/core-wg/href/pull/58",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Closes #46",
      "createdAt": "2022-11-23T14:44:35Z",
      "updatedAt": "2023-07-10T18:28:50Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "ce7776b73d78f875584ac93e90db4d7daf8d7331",
      "headRepository": "core-wg/href",
      "headRefName": "rootless-needs-path",
      "headRefOid": "f62177c251fbb86eabc438178acc3dd933493c7e",
      "closedAt": "2023-01-20T15:06:36Z",
      "mergedAt": "2023-01-20T15:06:36Z",
      "mergedBy": "chrysn",
      "mergeCommit": {
        "oid": "8b7bbd256572d0aee152bc86f49e38bd74baba52"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 62,
      "id": "PR_kwDOFyeisM5LlwcK",
      "title": "Describe recommended error handling, forbid indefinite-length",
      "url": "https://github.com/core-wg/href/pull/62",
      "state": "MERGED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Closes: https://github.com/core-wg/href/issues/61\r\n\r\nRight now this forbids extensions from using indefinite-length CBOR items ... should we forbid them in the base case as well? (It's not technically necessary, for the nesting depth of basic items is limited, but it'd be a tad weird to implement skipping when one is already possibly some levels deep into it).",
      "createdAt": "2023-03-08T17:16:06Z",
      "updatedAt": "2023-05-09T21:09:45Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "65717fa00577b3d90c0a9b5208fab0ad2bcf4686",
      "headRepository": "core-wg/href",
      "headRefName": "nan-like-cri",
      "headRefOid": "3c76c88381fbf33fb1462638db2388548d02d992",
      "closedAt": "2023-05-09T21:09:44Z",
      "mergedAt": "2023-05-09T21:09:44Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "c4719ed1d1c511212f2b586b2ca97814d22e6d8c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 63,
      "id": "PR_kwDOFyeisM5QIf1R",
      "title": "Add rule that empty paths are represented as `[]`",
      "url": "https://github.com/core-wg/href/pull/63",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Fix #59",
      "createdAt": "2023-05-09T21:17:18Z",
      "updatedAt": "2023-05-10T12:36:10Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "c4719ed1d1c511212f2b586b2ca97814d22e6d8c",
      "headRepository": "core-wg/href",
      "headRefName": "fix-59",
      "headRefOid": "2c3f5d67af60bd1b2a9da3d88a36e231f2e8171a",
      "closedAt": "2023-05-10T12:36:09Z",
      "mergedAt": "2023-05-10T12:36:09Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "88cf2cb557b3bde47a75341f7cbe04c4c38e202c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 64,
      "id": "PR_kwDOFyeisM5QMXMJ",
      "title": "Fix issue 43, address parts of issue 44",
      "url": "https://github.com/core-wg/href/pull/64",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-10T13:19:20Z",
      "updatedAt": "2023-05-10T13:25:09Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "88cf2cb557b3bde47a75341f7cbe04c4c38e202c",
      "headRepository": "core-wg/href",
      "headRefName": "fix-43-address-44",
      "headRefOid": "522a03d483fe003c46f5fb192d543050d886a38a",
      "closedAt": "2023-05-10T13:25:08Z",
      "mergedAt": "2023-05-10T13:25:08Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "0afb661723b45a8080981f0d2b7fd316b2ee90c5"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 65,
      "id": "PR_kwDOFyeisM5QMd5Y",
      "title": "Fix #50 item 2",
      "url": "https://github.com/core-wg/href/pull/65",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Rule out empty arrays as CRIs",
      "createdAt": "2023-05-10T13:34:30Z",
      "updatedAt": "2023-05-10T13:37:27Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "0afb661723b45a8080981f0d2b7fd316b2ee90c5",
      "headRepository": "core-wg/href",
      "headRefName": "fix-50-2",
      "headRefOid": "f9734b4a7ce6720f2cbe3fc6c727331a1e82dd3b",
      "closedAt": "2023-05-10T13:37:26Z",
      "mergedAt": "2023-05-10T13:37:26Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "e0bbb4c5adec04c83d817f9e5e876a11b464c49e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 66,
      "id": "PR_kwDOFyeisM5QM-sy",
      "title": "(editorial) use \"representation\" instead of \"serialization\"",
      "url": "https://github.com/core-wg/href/pull/66",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "The actual serialization is one layer below, i.e., it has additional details (e.g., preferred encoding) that are not relevant for this data-model-level specification.",
      "createdAt": "2023-05-10T14:42:07Z",
      "updatedAt": "2023-05-15T08:29:21Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "56a4a6a1aa9cd30023f57661ad021469fa03aabf",
      "headRepository": "core-wg/href",
      "headRefName": "representation-instead-of-serialization",
      "headRefOid": "3a32bd885e1719b84b50f770b96d26bdbcf6e21a",
      "closedAt": "2023-05-15T08:29:20Z",
      "mergedAt": "2023-05-15T08:29:20Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "dfe10793716e3e6a090da57b19432e467489a14e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM5U_acO",
          "commit": {
            "abbreviatedOid": "3a32bd8"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "LGTM.",
          "createdAt": "2023-05-15T07:19:12Z",
          "updatedAt": "2023-05-15T07:19:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 67,
      "id": "PR_kwDOFyeisM5QNFYU",
      "title": "Clarify the statements about definite length",
      "url": "https://github.com/core-wg/href/pull/67",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "(as per discussion at 2023-05-10 interim)",
      "createdAt": "2023-05-10T14:57:58Z",
      "updatedAt": "2023-06-23T13:57:46Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "80c4d44f4c2ba44dd83cef1cc891eb8bcb6e261d",
      "headRepository": "core-wg/href",
      "headRefName": "clarify-definite-length",
      "headRefOid": "1290058f5a527577aaf63ba3f6efd3949421935b",
      "closedAt": "2023-06-23T13:57:45Z",
      "mergedAt": "2023-06-23T13:57:45Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "1fd8c2d4d35da3089ca07563c1cea0a50d098337"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM5U_cSf",
          "commit": {
            "abbreviatedOid": "9e57e30"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "LGTM.\r\n\r\n(Side note for other reviewers: This PR's 2nd commit is relevant, the first is #66, and GitHub still can't do PRs that build on each other)\r\n\r\nI hope that we won't need the relaxation often, because I think that CBOR implementations generally don't use indefinite length encoding on a whim (but only when data comes from a truly indefinite length source) and treat it a bit more like a tag than as a syntax detail.",
          "createdAt": "2023-05-15T07:24:09Z",
          "updatedAt": "2023-05-15T07:24:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 68,
      "id": "PR_kwDOFyeisM5QNQcf",
      "title": "Supply text to fully fix #44",
      "url": "https://github.com/core-wg/href/pull/68",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-10T15:25:55Z",
      "updatedAt": "2023-06-23T10:56:05Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "56a4a6a1aa9cd30023f57661ad021469fa03aabf",
      "headRepository": "core-wg/href",
      "headRefName": "fix-44",
      "headRefOid": "5ceafbee1b2d2917eabc7f6eeefc18a26c1eb82f",
      "closedAt": "2023-06-23T10:56:04Z",
      "mergedAt": "2023-06-23T10:56:04Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "80c4d44f4c2ba44dd83cef1cc891eb8bcb6e261d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM5U_dMN",
          "commit": {
            "abbreviatedOid": "8125173"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-15T07:26:23Z",
          "updatedAt": "2023-05-15T07:26:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 71,
      "id": "PR_kwDOFyeisM5U6dqG",
      "title": "(editorial:) Avoid \"serialize\", prefer \"represent\"",
      "url": "https://github.com/core-wg/href/pull/71",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-07T12:32:24Z",
      "updatedAt": "2023-07-07T12:37:10Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "1fd8c2d4d35da3089ca07563c1cea0a50d098337",
      "headRepository": "core-wg/href",
      "headRefName": "serialize-represent",
      "headRefOid": "7e0258a9d79ec51163752578d42c4318796b6261",
      "closedAt": "2023-07-07T12:37:09Z",
      "mergedAt": "2023-07-07T12:37:08Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "3dac878bd84fee0c4c74eac6450c071a4a28f8a1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM5ahld1",
          "commit": {
            "abbreviatedOid": "7e0258a"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-07T12:35:48Z",
          "updatedAt": "2023-07-07T12:35:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 72,
      "id": "PR_kwDOFyeisM5U668a",
      "title": "fit railroad in 69 columns",
      "url": "https://github.com/core-wg/href/pull/72",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-07T14:01:19Z",
      "updatedAt": "2023-07-08T14:45:33Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "3dac878bd84fee0c4c74eac6450c071a4a28f8a1",
      "headRepository": "core-wg/href",
      "headRefName": "asr33",
      "headRefOid": "709677b16b1ee89d04884c94dbb621eeba849ef9",
      "closedAt": "2023-07-08T14:45:32Z",
      "mergedAt": "2023-07-08T14:45:32Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "8d8d5c1cd3a0e6734305c9b699273c3e2bbfa995"
      },
      "comments": [
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "... and get rid of outer optionality",
          "createdAt": "2023-07-07T14:01:57Z",
          "updatedAt": "2023-07-07T14:01:57Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 73,
      "id": "PR_kwDOFyeisM5VAr11",
      "title": "Expand text on s://x/ vs. s://x anomaly.",
      "url": "https://github.com/core-wg/href/pull/73",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Close #70 ",
      "createdAt": "2023-07-09T09:59:11Z",
      "updatedAt": "2023-07-10T11:27:10Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "8d8d5c1cd3a0e6734305c9b699273c3e2bbfa995",
      "headRepository": "core-wg/href",
      "headRefName": "fix-70",
      "headRefOid": "60e8bf0575c752c583ecee5c7eab4e2d2f87921c",
      "closedAt": "2023-07-10T11:27:09Z",
      "mergedAt": "2023-07-10T11:27:09Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "4510be5b3050a77a78011cd5c07aff9c1f5a308a"
      },
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "https://github.com/core-wg/href/wiki/URIs-and-CRIs-in-CoAP-APIs has been updated with some notes on that topic.",
          "createdAt": "2023-07-09T19:38:04Z",
          "updatedAt": "2023-07-09T19:38:04Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM5ap9Y7",
          "commit": {
            "abbreviatedOid": "60e8bf0"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Good change.\r\n\r\nOther work possibly related to #70 is ensuring we have test vectors with CoAP options (pending on the CSV scaffolding) and text on the direct CoAP-option/CRI conversion (likely a wiki page), but as for being an issue, I think the \"closes\" is justified.",
          "createdAt": "2023-07-09T19:27:13Z",
          "updatedAt": "2023-07-09T19:27:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 74,
      "id": "PR_kwDOFyeisM5VFSVU",
      "title": "Clarify absent vs. explicitly unsetting query",
      "url": "https://github.com/core-wg/href/pull/74",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Close #69",
      "createdAt": "2023-07-10T12:39:24Z",
      "updatedAt": "2023-07-10T18:32:19Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "9caa4f464507a2820b59e4570043cd600297ff25",
      "headRepository": "core-wg/href",
      "headRefName": "fix-69",
      "headRefOid": "d454434795c8af0d843fbe4708b98f4213645e54",
      "closedAt": "2023-07-10T18:32:18Z",
      "mergedAt": "2023-07-10T18:32:18Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "5747690862297911025b54082a7bab288dcad74e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM5awoZG",
          "commit": {
            "abbreviatedOid": "d454434"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "I might have commented about the \"unset the query\" component being odd, but the text does define that unsetting a component means setting it to null, so that's at least consistent.",
          "createdAt": "2023-07-10T18:30:12Z",
          "updatedAt": "2023-07-10T18:30:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 75,
      "id": "PR_kwDOFyeisM5WVDDh",
      "title": "Review by Marco",
      "url": "https://github.com/core-wg/href/pull/75",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-25T12:38:02Z",
      "updatedAt": "2023-09-01T10:34:25Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "6a502d4b20363626b6930e0b8df51e172b88cfc2",
      "headRepository": "core-wg/href",
      "headRefName": "review-marco",
      "headRefOid": "d084a9bbebd06bfe5197b25954d3f5d151e73f08",
      "closedAt": "2023-09-01T10:34:24Z",
      "mergedAt": "2023-09-01T10:34:24Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "423952fe7e2908330fc01b4ee3fef5743d268453"
      },
      "comments": [
        {
          "author": "henkbirkholz",
          "authorAssociation": "COLLABORATOR",
          "body": "null for empty path seems fine\r\n\r\n\"save the bytes\"",
          "createdAt": "2023-07-25T16:57:32Z",
          "updatedAt": "2023-07-25T16:58:12Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 78,
      "id": "PR_kwDOFyeisM5ZVHp8",
      "title": "Add changes from -09 to -14",
      "url": "https://github.com/core-wg/href/pull/78",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Close #76 ",
      "createdAt": "2023-09-01T11:26:46Z",
      "updatedAt": "2023-11-14T13:44:49Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "4aa78c236a9e8eea696fc0b7db438f06d26522f2",
      "headRepository": "core-wg/href",
      "headRefName": "changes-09-14",
      "headRefOid": "2f9902a51977d1ca4baed475b2de22c8313b3098",
      "closedAt": "2023-11-14T13:44:48Z",
      "mergedAt": "2023-11-14T13:44:48Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "34440b88374a7506e6228fe951c7159418892818"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM5fyZRw",
          "commit": {
            "abbreviatedOid": "2f9902a"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-01T14:18:02Z",
          "updatedAt": "2023-09-01T14:18:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 79,
      "id": "PR_kwDOFyeisM5ZVecA",
      "title": "Make tests available as JSON and as CSV (RFC 4180)",
      "url": "https://github.com/core-wg/href/pull/79",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Makefile assumes that editing happens in CSV\r\nmake new-tests.csv can be called manually after an edit to the JSON",
      "createdAt": "2023-09-01T12:39:56Z",
      "updatedAt": "2024-11-22T14:07:45Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "4d0990a6e47194f201cdf0b9340928257862fbbe",
      "headRepository": "core-wg/href",
      "headRefName": "tests-csv",
      "headRefOid": "f533181460d808cdfbb7b3845c956d3e76dd843c",
      "closedAt": "2024-11-22T14:07:29Z",
      "mergedAt": "2024-11-22T14:07:29Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "6b2c435428cc7c4da996d9b83c98c23969d66655"
      },
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Running make gives me\r\n\r\n```\r\nruby csv-to-json.rb tests.csv | diff tests.json -\r\n<internal:/usr/lib/ruby/vendor_ruby/rubygems/core_ext/kernel_require.rb>:85:in `require': cannot load such file -- cbor-cri (LoadError)\r\n        from <internal:/usr/lib/ruby/vendor_ruby/rubygems/core_ext/kernel_require.rb>:85:in `require'\r\n        from csv-to-json.rb:1:in `<main>'\r\n```\r\n\r\nI suppose there is something I should `gem install` here?",
          "createdAt": "2023-09-01T14:32:10Z",
          "updatedAt": "2023-09-01T14:32:10Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "`gem install cbor-diag`\r\n\r\nOr now just:\r\n\r\n`bundle`\r\n",
          "createdAt": "2023-09-01T15:31:13Z",
          "updatedAt": "2023-09-01T15:44:37Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Building still fails for me, but this time it seems to be other dependencies -- I'll focus on the CSV in further testing, and ignore the build process.",
          "createdAt": "2024-04-05T13:35:54Z",
          "updatedAt": "2024-04-05T13:35:54Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Next step: cabo will push an update where everything is in its current shape. CSV will be the source of truth, JSON will stay provided for those who can't process CSV easily.",
          "createdAt": "2024-04-05T14:14:16Z",
          "updatedAt": "2024-04-05T14:14:16Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "Merging now; still need to do https://github.com/core-wg/href/pull/79/files#r1590432580",
          "createdAt": "2024-11-22T14:07:43Z",
          "updatedAt": "2024-11-22T14:07:43Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM5fyr_3",
          "commit": {
            "abbreviatedOid": "aeb96b8"
          },
          "author": "babongo",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "in my local setting (*) I bump into this error:\r\n```\r\n\u279c  tests git:(tests-csv) make\r\nruby csv-to-json.rb tests.csv | diff tests.json -\r\ncsv-to-json.rb:39: syntax error, unexpected in, expecting when\r\n  in [\"base\", baseuri, basecri_di...\r\ncsv-to-json.rb:43: syntax error, unexpected in, expecting end\r\n  in [\"ok\", uri_in, cri_in_diag, ...\r\ncsv-to-json.rb:51: syntax error, unexpected end, expecting end-of-input\r\n  end\r\n1,713d0\r\n< {\r\n<   \"base-uri\": \"coaps://foo:4711/pa/th?query#frag\",\r\n[...]\r\n```\r\nwhich I'm having a bit of trouble decoding...\r\n\r\n(*) Darwin Kernel Version 22.5.0: Mon Apr 24 20:53:19 PDT 2023; root:xnu-8796.121.2~5/RELEASE_ARM64_T6020 arm64",
          "createdAt": "2023-09-01T14:53:56Z",
          "updatedAt": "2023-09-01T15:03:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOFyeisM5fy6s9",
          "commit": {
            "abbreviatedOid": "0bd3157"
          },
          "author": "babongo",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "I have updated ruby to 3.2, fetched [0bd3157](https://github.com/core-wg/href/pull/79/commits/0bd3157475241f2de68c0a008f1998e1c6e2904e) and now I got the same as @chrysn :\r\n\r\n```\r\n\u279c  tests git:(tests-csv) make\r\nruby csv-to-json.rb tests.csv | diff tests.json -\r\n<internal:/opt/homebrew/Cellar/ruby/3.2.2_1/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:85:in `require': cannot load such file -- cbor-diagnostic (LoadError)\r\n\tfrom <internal:/opt/homebrew/Cellar/ruby/3.2.2_1/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:85:in `require'\r\n\tfrom csv-to-json.rb:1:in `<main>'\r\n1,713d0\r\n```\r\n",
          "createdAt": "2023-09-01T15:29:50Z",
          "updatedAt": "2023-09-01T15:29:50Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOFyeisM55lSvQ",
          "commit": {
            "abbreviatedOid": "f533181"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-05T22:18:42Z",
          "updatedAt": "2024-05-05T22:27:47Z",
          "comments": [
            {
              "originalPosition": 829,
              "body": "How does this fare under the CSV-JSON conversion?",
              "createdAt": "2024-05-05T22:18:42Z",
              "updatedAt": "2024-05-05T22:27:48Z"
            },
            {
              "originalPosition": 23,
              "body": "AIU this is optional; in cases when a CRI reference can not be expressed as a URI reference (or the test author didn't care about URIs in this scenario), it is often empty. Is this distinguished from the empty URI reference?",
              "createdAt": "2024-05-05T22:26:01Z",
              "updatedAt": "2024-05-05T22:27:48Z"
            },
            {
              "originalPosition": 16,
              "body": "```suggestion\r\n```\r\n\r\nThere is an example with `\u2026;|a;a|;\u2026` in the latest version.",
              "createdAt": "2024-05-05T22:27:22Z",
              "updatedAt": "2024-05-05T22:27:48Z"
            }
          ]
        }
      ]
    },
    {
      "number": 80,
      "id": "PR_kwDOFyeisM5fawTp",
      "title": "Add EDN cri'' (from edn-literals document)",
      "url": "https://github.com/core-wg/href/pull/80",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Moving over from edn-literals as that is likely to be completed first.",
      "createdAt": "2023-11-14T14:38:57Z",
      "updatedAt": "2023-11-22T05:18:47Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "34440b88374a7506e6228fe951c7159418892818",
      "headRepository": "core-wg/href",
      "headRefName": "edn-cri",
      "headRefOid": "22b7bcb0c0f1ab596e1ecf8780a5cf07dde03462",
      "closedAt": "2023-11-22T05:18:46Z",
      "mergedAt": "2023-11-22T05:18:46Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "d4348559169e7f052910c4a20ab2ef77928d4f40"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM5nJJRO",
          "commit": {
            "abbreviatedOid": "22b7bcb"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-14T18:29:55Z",
          "updatedAt": "2023-11-14T18:29:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 81,
      "id": "PR_kwDOFyeisM5gIAUQ",
      "title": "Add discussion of and CoAP Options for CRI use in CoAP",
      "url": "https://github.com/core-wg/href/pull/81",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-11-22T12:25:15Z",
      "updatedAt": "2024-01-19T15:13:08Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "d4348559169e7f052910c4a20ab2ef77928d4f40",
      "headRepository": "core-wg/href",
      "headRefName": "coap-integration",
      "headRefOid": "aa3a87ab48dce0244e2bb3d3ff79622f816ff21a",
      "closedAt": "2024-01-19T15:13:07Z",
      "mergedAt": "2024-01-19T15:13:07Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "08cd0f03ef61455b3406af510d8d2d05da25aeb0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM5pp9nU",
          "commit": {
            "abbreviatedOid": "35856e0"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-08T15:17:54Z",
          "updatedAt": "2023-12-08T15:17:55Z",
          "comments": [
            {
              "originalPosition": 144,
              "body": "Maybe \"MUST NOT be used with Uri-Host and Proxy-Scheme\" (maybe \"it's an error\", maybe \"one must be ignored\").\r\n\r\nMaybe \"MUST either not have path and query components (in which case Uri-Path and Uri-Query are allowed and just appended semantically), or not occur with those together in a message\".",
              "createdAt": "2023-12-08T15:17:55Z",
              "updatedAt": "2023-12-08T15:17:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM5pp_Wq",
          "commit": {
            "abbreviatedOid": "35856e0"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-08T15:21:27Z",
          "updatedAt": "2023-12-08T15:21:27Z",
          "comments": [
            {
              "originalPosition": 144,
              "body": "Or go full-base, and allow also that there's only the scheme present (at which point Proxy-Scheme-Number becomes somewhat redundant).",
              "createdAt": "2023-12-08T15:21:27Z",
              "updatedAt": "2023-12-08T15:21:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM5pqUfD",
          "commit": {
            "abbreviatedOid": "35856e0"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-08T15:55:29Z",
          "updatedAt": "2023-12-08T15:55:29Z",
          "comments": [
            {
              "originalPosition": 144,
              "body": "Motivation here (because the comments above may sound more convinced of myself as it may sound):\r\n\r\nIn the URI mind set, the difference between sending a request directly and sending it through the proxy is:\r\n* Set the remote address to the proxy's\r\n* Add Proxy-Scheme\r\n* Add Uri-Host\r\n(and personally I've always discouraged Proxy-Uri)\r\n\r\nIf someone wants to do the same trick in the CRI mindset, they can either\r\n* do the same, but beware that IP literals in the URI host need to go through decimal or hex encoding, or\r\n* use Proxy-CRI, and suddenly add another switch where Uri-Path/-Query don't go into the message any more.\r\n\r\nNot great, but also somewhat weird to make this more complicated. A Proxy-CRI that may be just scheme and authority would solve this. (As would having a dedicated CRI-SchemeAndAuthority option or a Cri-Host option that is to be combined with Proxy-SchemeNumber).",
              "createdAt": "2023-12-08T15:55:29Z",
              "updatedAt": "2023-12-08T15:59:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM5pqppR",
          "commit": {
            "abbreviatedOid": "35856e0"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-08T16:38:24Z",
          "updatedAt": "2023-12-08T16:38:25Z",
          "comments": [
            {
              "originalPosition": 144,
              "body": "Examples:\r\n\r\n* Request in CoAP-over-TCP to a CoAP resource on a same-host proxcy as described in transport-indication:\r\n  - GET Uri-Path: \"foo\", \"bar\", Proxy-Scheme: \"coap\" (the existing approach)\r\n  - GET Uri-Path: \"foo\", \"bar\", Proxy-Scheme-Numeric: 0 (0 byte)\r\n  - GET Uri-Path: \"foo\", \"bar', Cri-SchemeAndAuthority: <<-1>> (1 byte)\r\n  - GET Proxy-Cri is not an option b/c it can't implicitly state the authority.\r\n\r\n* Request through a proxy (any transport going forward to UDP literal):\r\n  - GET Uri-Path: \"foo\", \"bar\", Proxy-Scheme: \"coap\", Uri-Host: \"[2001:db8::1]\" (a hex encoding implementers may dislike)\r\n  - GET Uri-Path: \"foo\", \"bar\", Proxy-Scheme-Numeric: 0 (0 byte), Uri-Host: \"[2001:db8::1]\" (still same issue)\r\n  - GET Uri-Path: \"foo\", \"bar', Cri-SchemeAndAuthority: <<-1, h'20010db8...0001'>>\r\n  - GET Proxy-Cri: <<-1, h'20010db8...0001', [\"foo\", \"bar\"]>>\r\n\r\n* Request through a proxy (any transport going forward to host name):\r\n  - GET Uri-Path: \"foo\", \"bar\", Proxy-Scheme: \"coap\", Uri-Host: \"example.com\" (which is a bit string-y but not as bad as the IP literal)\r\n  - GET Uri-Path: \"foo\", \"bar\", Proxy-Scheme-Numeric: 0 (0 byte), Uri-Host: \"example.com\" (still same issue)\r\n  - GET Uri-Path: \"foo\", \"bar', Cri-SchemeAndAuthority: <<-1, \"example\", \"com\">>\r\n  - GET Proxy-Cri: <<-1, \"example\", \"com\", [\"foo\", \"bar\"]>>\r\n\r\n* OSCORE splitting of the Proxy-... options, when hitting Proxy-Cri <<0, \"example\", \"com\", [\"foo\", \"bar\"]>>\r\n  (which this document will probably need to describe to follow the recommendation of OSCORE)\r\n  - could be described as going through conversion to Uri, then split as per 8613, and possibly converted back\r\n  - could be described as splitting the Proxy-Cri into Proxy-Scheme-Numeric: 0, Uri-Host: \"example.com\" (needs stringification of any IP literal, which we don't have in this case), and inner Uri-Path options\r\n  - could be described as splitting the Proxy-Cri into Cri-SchemeAndAuthority <<-1, \"example\", \"com\">> and inner Uri-Path options (provided they even fit in Uri-Scheme, don't know what 8613 says about the equivalent case)\r\n\r\n\r\n",
              "createdAt": "2023-12-08T16:38:24Z",
              "updatedAt": "2023-12-08T16:38:25Z"
            }
          ]
        }
      ]
    },
    {
      "number": 83,
      "id": "PR_kwDOFyeisM5kpnzJ",
      "title": "Redo scheme numbers while negative",
      "url": "https://github.com/core-wg/href/pull/83",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-01-21T11:43:55Z",
      "updatedAt": "2024-01-21T11:53:05Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "08cd0f03ef61455b3406af510d8d2d05da25aeb0",
      "headRepository": "core-wg/href",
      "headRefName": "redo-scheme-numbers-while-negative",
      "headRefOid": "01217c648d43ff0cfa829b5431e5811bc012505f",
      "closedAt": "2024-01-21T11:53:04Z",
      "mergedAt": "2024-01-21T11:53:04Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "0f640e491550fff51b8a094bfc8a8901df844e0f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 84,
      "id": "PR_kwDOFyeisM5kpylV",
      "title": "Unsigned scheme numbers",
      "url": "https://github.com/core-wg/href/pull/84",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This PR moves the scheme number registry to unsigned integers and makes it easier to describe Proxy-Scheme-Number.\r\n\r\nSupport for additional CoAP Options has not yet been added.",
      "createdAt": "2024-01-21T14:12:23Z",
      "updatedAt": "2024-01-29T09:19:27Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "0f640e491550fff51b8a094bfc8a8901df844e0f",
      "headRepository": "core-wg/href",
      "headRefName": "unsigned-scheme-numbers",
      "headRefOid": "255e9e6091d1c3fb66c70a2820814741ac619376",
      "closedAt": "2024-01-29T09:19:26Z",
      "mergedAt": "2024-01-29T09:19:26Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "2c6b22f192b367b3eeff587786fd28b557ab6dcf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM5tZXVp",
          "commit": {
            "abbreviatedOid": "29760ed"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-21T15:29:31Z",
          "updatedAt": "2024-01-21T15:29:32Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "For consistency with the updated names of the registry columns later on, the names of the columns here should be \"CRI scheme number value\" and \"URI scheme name\".",
              "createdAt": "2024-01-21T15:29:32Z",
              "updatedAt": "2024-01-21T15:29:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM5tZXWq",
          "commit": {
            "abbreviatedOid": "29760ed"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-21T15:29:55Z",
          "updatedAt": "2024-01-21T15:29:56Z",
          "comments": [
            {
              "originalPosition": 91,
              "body": "For consistency with the updated names of the registry columns later on, the name of the first column here should be \"CRI scheme number value\".",
              "createdAt": "2024-01-21T15:29:56Z",
              "updatedAt": "2024-01-21T15:29:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM5tZXZy",
          "commit": {
            "abbreviatedOid": "29760ed"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-21T15:31:03Z",
          "updatedAt": "2024-01-21T15:31:04Z",
          "comments": [
            {
              "originalPosition": 113,
              "body": "This covers the case where the scheme section is a scheme-id. Shouldn't this step cover also the case where the scheme section is a scheme-name instead? That would also need to check whether that scheme-name is among those listed in the table above, and, if not, to fail the algorithm.",
              "createdAt": "2024-01-21T15:31:03Z",
              "updatedAt": "2024-01-21T15:31:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM5tZXbG",
          "commit": {
            "abbreviatedOid": "29760ed"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-21T15:31:33Z",
          "updatedAt": "2024-01-21T15:31:33Z",
          "comments": [
            {
              "originalPosition": 165,
              "body": "Maybe add a reference to Section 3.2 of RFC 7252?",
              "createdAt": "2024-01-21T15:31:33Z",
              "updatedAt": "2024-01-21T15:31:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM5tZbb9",
          "commit": {
            "abbreviatedOid": "29760ed"
          },
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-21T17:19:30Z",
          "updatedAt": "2024-01-21T17:19:30Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "I removed the \"value\" from the IANA registry entry definition -- this seems redundant to me.",
              "createdAt": "2024-01-21T17:19:30Z",
              "updatedAt": "2024-01-21T17:19:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM5tZbdG",
          "commit": {
            "abbreviatedOid": "29760ed"
          },
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-21T17:20:11Z",
          "updatedAt": "2024-01-21T17:20:11Z",
          "comments": [
            {
              "originalPosition": 91,
              "body": "(See above)",
              "createdAt": "2024-01-21T17:20:11Z",
              "updatedAt": "2024-01-21T17:20:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM5tZbkU",
          "commit": {
            "abbreviatedOid": "29760ed"
          },
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-21T17:22:59Z",
          "updatedAt": "2024-01-21T17:23:00Z",
          "comments": [
            {
              "originalPosition": 113,
              "body": "Didn't we want to make the use of the scheme-id mandatory if that exists?\r\nFor all entries in the table, scheme-name is not allowed then; so it seems scheme-name is never allowed in this procedure.",
              "createdAt": "2024-01-21T17:22:59Z",
              "updatedAt": "2024-01-21T17:23:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM5tZby0",
          "commit": {
            "abbreviatedOid": "29760ed"
          },
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-21T17:30:33Z",
          "updatedAt": "2024-01-21T17:30:33Z",
          "comments": [
            {
              "originalPosition": 165,
              "body": "Sure!",
              "createdAt": "2024-01-21T17:30:33Z",
              "updatedAt": "2024-01-21T17:30:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM5tZc50",
          "commit": {
            "abbreviatedOid": "255e9e6"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-21T17:58:28Z",
          "updatedAt": "2024-01-21T17:58:29Z",
          "comments": [
            {
              "originalPosition": 113,
              "body": "I don't remember considering this detail before but it makes sense, as now also in the latest text.",
              "createdAt": "2024-01-21T17:58:29Z",
              "updatedAt": "2024-01-21T17:58:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM5tZc7F",
          "commit": {
            "abbreviatedOid": "255e9e6"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-21T17:59:27Z",
          "updatedAt": "2024-01-21T17:59:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 85,
      "id": "PR_kwDOFyeisM5sHWrO",
      "title": "Prepare post-119 \u201315",
      "url": "https://github.com/core-wg/href/pull/85",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-04-09T10:39:50Z",
      "updatedAt": "2024-04-21T13:06:16Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "2c6b22f192b367b3eeff587786fd28b557ab6dcf",
      "headRepository": "core-wg/href",
      "headRefName": "dash15",
      "headRefOid": "5a1b872e2fb6c022d4374c009683748935d9bf87",
      "closedAt": "2024-04-21T13:06:15Z",
      "mergedAt": "2024-04-21T13:06:15Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "2c7ee00ab84bc665ea04a7103c899fff5731237c"
      },
      "comments": [
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "Hi Marco,\r\n\r\nOn 2024-04-19, at 10:18, marco-tiloca-sics ***@***.***> wrote:\r\n> \r\n> @marco-tiloca-sics commented on this pull request.\r\n> \r\n> In code/schemes-numbers.md:\r\n> \r\n> > @@ -1,15 +1,15 @@\r\n> -| CRI scheme number | URI scheme | Reference   |\r\n> \r\n> In Section 8.1 \"Converting Between CoAP CRIs and Sets of CoAP Options\", the second column in Table 1 is currently \"URI scheme\u201d.\r\n\r\nNot in\r\nhttps://core-wg.github.io/href/draft-ietf-core-href.html#name-converting-between-coap-cri\r\n\r\nThis was fixed for scheme-numbers.md in 0de0710: * Regenerate scheme numbers\r\n\r\n> That should also be \"URI scheme name\", for consistency with the present Table 6 of Appendix A and with the text in Section 8.1.\r\n\r\nDefinitely, and that\u2019s what it is for me\u2026\r\nWhere are you seeing the old text?\r\n\r\nGr\u00fc\u00dfe, Carsten\r\n\r\n",
          "createdAt": "2024-04-19T08:50:44Z",
          "updatedAt": "2024-04-19T08:50:44Z"
        },
        {
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "body": "Ouch, I didn't think of the early fix and just checked version -14 on the Datatracker. Looks good then. Thanks!",
          "createdAt": "2024-04-19T08:54:54Z",
          "updatedAt": "2024-04-19T08:54:54Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM532spb",
          "commit": {
            "abbreviatedOid": "4a72d1f"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-19T08:18:03Z",
          "updatedAt": "2024-04-19T08:18:03Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "In Section 8.1 \"Converting Between CoAP CRIs and Sets of CoAP Options\", the second column in Table 1 is currently \"URI scheme\". That should also be \"URI scheme name\", for consistency with the present Table 6 of Appendix A and with the text in Section 8.1.",
              "createdAt": "2024-04-19T08:18:03Z",
              "updatedAt": "2024-04-19T08:18:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM532-Dl",
          "commit": {
            "abbreviatedOid": "4a72d1f"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-19T08:55:19Z",
          "updatedAt": "2024-04-19T08:55:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 87,
      "id": "PR_kwDOFyeisM5xNFdp",
      "title": "balun example: Use two artworks",
      "url": "https://github.com/core-wg/href/pull/87",
      "state": "MERGED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "If annotated as cbor-diag, the artwork should be valid EDN (at least for a CBOR sequence), but the two lines on their own are not.",
      "createdAt": "2024-06-01T19:47:39Z",
      "updatedAt": "2024-06-02T15:59:31Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "4d0990a6e47194f201cdf0b9340928257862fbbe",
      "headRepository": "core-wg/href",
      "headRefName": "no-two-edn",
      "headRefOid": "e0571e9cc6a2eb9b3ff41cb3d83ed467cc203c6e",
      "closedAt": "2024-06-02T15:59:31Z",
      "mergedAt": "2024-06-02T15:59:30Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "b3bf59af49c73407c9c5c07c49732d4881c5a8a1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM58t8dK",
          "commit": {
            "abbreviatedOid": "e0571e9"
          },
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Necessary for correctness.\r\nText around the examples already works with this change.",
          "createdAt": "2024-06-02T15:59:17Z",
          "updatedAt": "2024-06-02T15:59:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 88,
      "id": "PR_kwDOFyeisM51-paX",
      "title": "Cri scheme oblivious",
      "url": "https://github.com/core-wg/href/pull/88",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Based on an IANA note on -15",
      "createdAt": "2024-07-20T08:25:04Z",
      "updatedAt": "2024-07-22T01:05:18Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "b3bf59af49c73407c9c5c07c49732d4881c5a8a1",
      "headRepository": "core-wg/href",
      "headRefName": "cri-scheme-oblivious",
      "headRefOid": "a8c07f9b28c4256b2cb6d6aa6ac8f438a352c02c",
      "closedAt": "2024-07-22T01:05:16Z",
      "mergedAt": "2024-07-22T01:05:16Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "805b8e794486856e117f069624aa19a70e67f98d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM6Cjwdo",
          "commit": {
            "abbreviatedOid": "a8c07f9"
          },
          "author": "henkbirkholz",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-21T22:47:36Z",
          "updatedAt": "2024-07-21T22:47:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 94,
      "id": "PR_kwDOFyeisM6I8RUD",
      "title": "Close #89 (zoneids)",
      "url": "https://github.com/core-wg/href/pull/94",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-01-24T19:32:54Z",
      "updatedAt": "2025-02-03T12:23:08Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "dash17",
      "baseRefOid": "e96ca0d64ceca5f774c2813f90464e8f4cd45fef",
      "headRepository": "core-wg/href",
      "headRefName": "address-89",
      "headRefOid": "bb5f338eab8e6d9d1fa7c812514361cfe7778037",
      "closedAt": "2025-02-03T12:23:06Z",
      "mergedAt": "2025-02-03T12:23:06Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "b715529436d30c47aa2cd1473f2ef2d8837bd177"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 95,
      "id": "PR_kwDOFyeisM6I8X2X",
      "title": "Close #86: test vector for zone ids",
      "url": "https://github.com/core-wg/href/pull/95",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-01-24T19:54:06Z",
      "updatedAt": "2025-02-03T12:22:42Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "dash17",
      "baseRefOid": "e96ca0d64ceca5f774c2813f90464e8f4cd45fef",
      "headRepository": "core-wg/href",
      "headRefName": "address86",
      "headRefOid": "172c08287618ee26dc7ac483b184b6c50b435179",
      "closedAt": "2025-02-03T12:22:40Z",
      "mergedAt": "2025-02-03T12:22:40Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "6146ad1ad2bd7f390949825a0073ed8845236543"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 96,
      "id": "PR_kwDOFyeisM6I8dkj",
      "title": "Close #82: Mention determinism goals (without using the word)",
      "url": "https://github.com/core-wg/href/pull/96",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-01-24T20:12:38Z",
      "updatedAt": "2025-02-03T12:24:02Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "dash17",
      "baseRefOid": "e96ca0d64ceca5f774c2813f90464e8f4cd45fef",
      "headRepository": "core-wg/href",
      "headRefName": "address82",
      "headRefOid": "ab5605ba988b830d0beb94c4ef4d1082db88c9da",
      "closedAt": "2025-02-03T12:24:00Z",
      "mergedAt": "2025-02-03T12:24:00Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "a7c523c6e16f4dc81aceb625103a951dedc2fdbb"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 97,
      "id": "PR_kwDOFyeisM6I8p39",
      "title": "Close #90: Mention ToASCII and when it should not be used",
      "url": "https://github.com/core-wg/href/pull/97",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-01-24T20:54:06Z",
      "updatedAt": "2025-02-03T13:17:38Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "dash17",
      "baseRefOid": "e96ca0d64ceca5f774c2813f90464e8f4cd45fef",
      "headRepository": "core-wg/href",
      "headRefName": "address90",
      "headRefOid": "8652d407a098cb535ac0a5dfc750c60e3b470ab6",
      "closedAt": "2025-02-03T13:17:35Z",
      "mergedAt": "2025-02-03T13:17:35Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "8f16b0ca8aa1b8cc268cbfe652715164586dcbf1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 98,
      "id": "PR_kwDOFyeisM6I8zbP",
      "title": "Close #91: Mention stand-in items",
      "url": "https://github.com/core-wg/href/pull/98",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-01-24T21:26:26Z",
      "updatedAt": "2025-02-03T13:18:02Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "dash17",
      "baseRefOid": "e96ca0d64ceca5f774c2813f90464e8f4cd45fef",
      "headRepository": "core-wg/href",
      "headRefName": "address91",
      "headRefOid": "7ba921037b870c17ef291470e7e0413f6be5ebd7",
      "closedAt": "2025-02-03T13:18:01Z",
      "mergedAt": "2025-02-03T13:18:01Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "b95fb66fd73f1356427898c2b96e0c38a87bedeb"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 99,
      "id": "PR_kwDOFyeisM6I9Aw-",
      "title": "Close #92: Add ACE AIF Toid for CRI",
      "url": "https://github.com/core-wg/href/pull/99",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-01-24T22:08:03Z",
      "updatedAt": "2025-02-03T13:18:46Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "dash17",
      "baseRefOid": "e96ca0d64ceca5f774c2813f90464e8f4cd45fef",
      "headRepository": "core-wg/href",
      "headRefName": "address92",
      "headRefOid": "244e6c58983e8b274687e94c8da264223f0512e7",
      "closedAt": "2025-02-03T13:18:45Z",
      "mergedAt": "2025-02-03T13:18:45Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "715384095b46380177d0f895e992d6a431b96a3e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 100,
      "id": "PR_kwDOFyeisM6J2VYW",
      "title": "Merge Changes for dash17 to main",
      "url": "https://github.com/core-wg/href/pull/100",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-02-03T13:19:16Z",
      "updatedAt": "2025-02-03T13:21:51Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "ebcff416684689bc3dc5d77bc87ff4d9c2986861",
      "headRepository": "core-wg/href",
      "headRefName": "dash17",
      "headRefOid": "715384095b46380177d0f895e992d6a431b96a3e",
      "closedAt": "2025-02-03T13:21:48Z",
      "mergedAt": "2025-02-03T13:21:48Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "f15f48e50a13de1489cabb830d2c63d640976b9a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 101,
      "id": "PR_kwDOFyeisM6J2k2H",
      "title": "Editorial fixes from CoRE interim 2025-01-29 for dash18",
      "url": "https://github.com/core-wg/href/pull/101",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-02-03T13:48:42Z",
      "updatedAt": "2025-02-14T09:49:06Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "a0b194723b41b19e095547d115b0928d91e73f83",
      "headRepository": "core-wg/href",
      "headRefName": "dash18",
      "headRefOid": "df0ed34e3430fdf8db019d5aadd41a112b4b3cce",
      "closedAt": "2025-02-14T09:49:03Z",
      "mergedAt": "2025-02-14T09:49:03Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "f265ea01000ffc9aa76c3393af3bd0050f457d26"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM6aYL6D",
          "commit": {
            "abbreviatedOid": "6918820"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-03T14:14:46Z",
          "updatedAt": "2025-02-03T14:14:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 106,
      "id": "PR_kwDOFyeisM6LOWNK",
      "title": "Clerical fixes from Esko Dijk's comments",
      "url": "https://github.com/core-wg/href/pull/106",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-02-14T10:35:27Z",
      "updatedAt": "2025-02-20T16:01:55Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "f265ea01000ffc9aa76c3393af3bd0050f457d26",
      "headRepository": "core-wg/href",
      "headRefName": "ed-clerical",
      "headRefOid": "0377c7895e5fe0678d7e9efc2377e6e91f85b84a",
      "closedAt": "2025-02-20T16:01:52Z",
      "mergedAt": "2025-02-20T16:01:52Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "2b53a789a61e815464a2703c58a825e57f864a93"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 107,
      "id": "PR_kwDOFyeisM6LvwMX",
      "title": "Nits around SP2",
      "url": "https://github.com/core-wg/href/pull/107",
      "state": "MERGED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "There's some extra context in my upcoming review mail, but those should reasonably stand on their own.",
      "createdAt": "2025-02-19T13:00:07Z",
      "updatedAt": "2025-02-26T12:51:19Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "f265ea01000ffc9aa76c3393af3bd0050f457d26",
      "headRepository": "core-wg/href",
      "headRefName": "nits-sp2",
      "headRefOid": "6fa72ceaf8bedbfe55a058491b87e5723a0de446",
      "closedAt": "2025-02-26T12:51:18Z",
      "mergedAt": "2025-02-26T12:51:18Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "65538d758d7c70dd4e0af443f177897aff5ede82"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM6cyO-7",
          "commit": {
            "abbreviatedOid": "6fa72ce"
          },
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "These changes look good to me.\r\n\r\nI'm wondering if we need more text about URI components that carry non-text (or text-in-random-legacy-charset) sequences of bytes.",
          "createdAt": "2025-02-20T16:14:09Z",
          "updatedAt": "2025-02-20T16:14:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 108,
      "id": "PR_kwDOFyeisM6Lwjma",
      "title": "Wglc: comments from Thomas Fossati",
      "url": "https://github.com/core-wg/href/pull/108",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-02-19T14:19:43Z",
      "updatedAt": "2025-02-20T16:01:17Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "f265ea01000ffc9aa76c3393af3bd0050f457d26",
      "headRepository": "core-wg/href",
      "headRefName": "wglc-tf",
      "headRefOid": "8a37c05e814d1ca8243082ad76d2a94d3f5df99f",
      "closedAt": "2025-02-20T16:01:14Z",
      "mergedAt": "2025-02-20T16:01:14Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "feab4b9359b9742701fd641c6a2f3b162adaa032"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM6cm_vU",
          "commit": {
            "abbreviatedOid": "688c092"
          },
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Thanks mucho.  (I've left a couple of small editorial nits, feel free to ignore the second one.)",
          "createdAt": "2025-02-19T17:09:11Z",
          "updatedAt": "2025-02-19T17:18:05Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "typo `pathg`",
              "createdAt": "2025-02-19T17:09:12Z",
              "updatedAt": "2025-02-19T17:17:32Z"
            },
            {
              "originalPosition": 105,
              "body": "```suggestion\r\nNote that this objective exclusively applies to (absolute) CRIs, not\r\nto CRI references: these need to be resolved relative to a base URI,\r\n```",
              "createdAt": "2025-02-19T17:12:45Z",
              "updatedAt": "2025-02-19T17:17:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM6cwP7P",
          "commit": {
            "abbreviatedOid": "8a37c05"
          },
          "author": "thomas-fossati",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "\ud83d\udea2 it!",
          "createdAt": "2025-02-20T13:42:34Z",
          "updatedAt": "2025-02-20T13:42:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 109,
      "id": "PR_kwDOFyeisM6LxZV0",
      "title": "chrysn's nits collected during review",
      "url": "https://github.com/core-wg/href/pull/109",
      "state": "CLOSED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-02-19T15:51:27Z",
      "updatedAt": "2025-03-07T14:14:58Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "f265ea01000ffc9aa76c3393af3bd0050f457d26",
      "headRepository": "core-wg/href",
      "headRefName": "nits",
      "headRefOid": "ddbed00cb96d3a1888bf937a5d4d6835c22e8bde",
      "closedAt": "2025-03-07T14:14:57Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Closing because the one discussion has resolved the issue, and there were no more nits so far.",
          "createdAt": "2025-03-07T14:14:58Z",
          "updatedAt": "2025-03-07T14:14:58Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM6cyIxL",
          "commit": {
            "abbreviatedOid": "ddbed00"
          },
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-20T16:04:49Z",
          "updatedAt": "2025-02-20T16:04:49Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I'm not sure what \"already in use\" would mean here...",
              "createdAt": "2025-02-20T16:04:49Z",
              "updatedAt": "2025-02-20T16:04:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM6c8oo8",
          "commit": {
            "abbreviatedOid": "ddbed00"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-21T14:06:51Z",
          "updatedAt": "2025-02-21T14:06:51Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "What I meant was \"in the CRI grammar\" -- but indeed those are not stand-in items, so maybe let's just drop that change. (Like, true and false)",
              "createdAt": "2025-02-21T14:06:51Z",
              "updatedAt": "2025-02-21T14:07:04Z"
            }
          ]
        }
      ]
    },
    {
      "number": 110,
      "id": "PR_kwDOFyeisM6Lxd3t",
      "title": "no indefinite lengths: Suggest that formats including this still do it",
      "url": "https://github.com/core-wg/href/pull/110",
      "state": "MERGED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "I'm aware we can't add any mandate on this, but downstream protocol designers might. For consumers, it is tremendously helpful: It allows them to use CRI references in memory references and pass them on.\r\n\r\nI'll definitely consider doing this for CoRAL -- indefinite length might be allowed there, eg. for embedded representations, but for CRIs it'd still follow this recommendation.",
      "createdAt": "2025-02-19T15:59:51Z",
      "updatedAt": "2025-02-21T14:03:37Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "f265ea01000ffc9aa76c3393af3bd0050f457d26",
      "headRepository": "core-wg/href",
      "headRefName": "suggest-indefinite-length",
      "headRefOid": "dcfb4d336db0f4f3da967a98628c537893748b75",
      "closedAt": "2025-02-21T14:03:34Z",
      "mergedAt": "2025-02-21T14:03:34Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "a0a9c21b4e3ae446e562e7b5ca8e6c86bbe12cc3"
      },
      "comments": [
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "Encoding decisions typically aren't local, so I'm not sure I like this a lot.\r\nWe don't have a lot of experience with applications that use indefinite length encoding internally in specific places (much has shifted over to CBOR sequences where that matters).\r\nI do like the old text.\r\n",
          "createdAt": "2025-02-19T16:19:43Z",
          "updatedAt": "2025-02-19T16:19:43Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Ultimately it is up to the top-level format to steer encoding decisions; it can do that in any way, but some may be harder or easier to enforce using generic tools.\r\n\r\n\"No indefinite length encodings in particular places\" sounds like something it should well be able to do -- worst thing, an easy way for an implementation of that top-level format to comply with it is to not use indefinite length at all.\r\n\r\nI do think that interoperability will be easier if this recommendation is followed, but don't have much energy to spend on fighting for it.",
          "createdAt": "2025-02-19T21:38:21Z",
          "updatedAt": "2025-02-19T21:38:21Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "Sorry for pushing to your branch, but that is most expedient.\r\nI sharpened this a bit, with both a stronger and a more selective recommendation.\r\nWould like to merge this if you agree with the new text.\r\n",
          "createdAt": "2025-02-21T13:32:36Z",
          "updatedAt": "2025-02-21T13:32:36Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Good text, thanks.",
          "createdAt": "2025-02-21T13:44:05Z",
          "updatedAt": "2025-02-21T13:44:05Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 111,
      "id": "PR_kwDOFyeisM6Mo-7a",
      "title": "Trim 16 pages by referencing initial IANA table from previous I-D.",
      "url": "https://github.com/core-wg/href/pull/111",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-02-26T13:08:23Z",
      "updatedAt": "2025-02-26T21:47:45Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "65538d758d7c70dd4e0af443f177897aff5ede82",
      "headRepository": "core-wg/href",
      "headRefName": "trim-fat",
      "headRefOid": "0ad48c57edee0e0a784f83a5691b816ca5cbd7d8",
      "closedAt": "2025-02-26T21:47:43Z",
      "mergedAt": "2025-02-26T21:47:43Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "ebb0e523cf79e8e30eaaf63056002d4453b9b6b5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM6dr7Wb",
          "commit": {
            "abbreviatedOid": "0ad48c5"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-26T18:53:38Z",
          "updatedAt": "2025-02-26T18:53:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 112,
      "id": "PR_kwDOFyeisM6MpYQ4",
      "title": "Clerical errors and gaps pointed out by Marco Tiloca",
      "url": "https://github.com/core-wg/href/pull/112",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Deviations:\r\n\r\n[Nits]\r\n\r\n* Abstract (similar) - s/URI Schemes registry/\"URI Schemes registry\" (similar) - s/RFC 7595 describes cooperates/described by RFC 7595 cooperates\r\n\r\n* Section 5.1 (don't agree) - s/query, fragment/query, and fragment\r\n\r\n* Section 5.2.1 (don't agree) - s/as a CRI,/as a CRI, or\r\n\r\n[Section 5.3]\r\n\r\n* Step 3 says:\r\n\r\n  > and set a true authority to null.\r\n\r\n  I guess it means the following.\r\n\r\n  > and set authority in the buffer to null.\r\n\r\n-> We previously made that \u00bband set a `true` authority to `null`\u00ab\r\n\r\nMaybe that is not perfect for the plaintext rendering.",
      "createdAt": "2025-02-26T13:43:42Z",
      "updatedAt": "2025-02-26T21:48:14Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "65538d758d7c70dd4e0af443f177897aff5ede82",
      "headRepository": "core-wg/href",
      "headRefName": "mt-clerical",
      "headRefOid": "9dc42dc3d0b7a32678640e2bddf9cdbf3cd0f328",
      "closedAt": "2025-02-26T21:48:12Z",
      "mergedAt": "2025-02-26T21:48:12Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "2c523a18358b5dd89a6db66720cb553c27430c8c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM6dr3rv",
          "commit": {
            "abbreviatedOid": "9dc42dc"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me. Thanks!",
          "createdAt": "2025-02-26T18:46:46Z",
          "updatedAt": "2025-02-26T18:46:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 113,
      "id": "PR_kwDOFyeisM6ND9BW",
      "title": "Wglc comments from Marco Tiloca",
      "url": "https://github.com/core-wg/href/pull/113",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-02T12:00:21Z",
      "updatedAt": "2025-03-02T13:29:20Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "2c523a18358b5dd89a6db66720cb553c27430c8c",
      "headRepository": "core-wg/href",
      "headRefName": "wglc-mt",
      "headRefOid": "097b96351934b3e64658f1785382affb49a74621",
      "closedAt": "2025-03-02T13:29:19Z",
      "mergedAt": "2025-03-02T13:29:19Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "6bd6f63b361fedd56704e31a6b22dbe8d27cd54b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM6eHUul",
          "commit": {
            "abbreviatedOid": "097b963"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-02T13:10:27Z",
          "updatedAt": "2025-03-02T13:10:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 115,
      "id": "PR_kwDOFyeisM6NHymu",
      "title": "Close #114 (NFC expectation)",
      "url": "https://github.com/core-wg/href/pull/115",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-03T09:35:56Z",
      "updatedAt": "2025-03-03T21:50:18Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "dca9245233adb4fd638af32a6513f2074a76fe10",
      "headRepository": "core-wg/href",
      "headRefName": "nfc-explanation",
      "headRefOid": "59edb47e0bfbcaedc6bd5bc621e0f4cda5a85a8a",
      "closedAt": "2025-03-03T21:50:17Z",
      "mergedAt": "2025-03-03T21:50:17Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "a54dcac4d94aab09378d0617d850cefb5c96db5d"
      },
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "This addresses the letter of #114 but not the spirit. It is technically correct, but adds more text to an already large section, while effectively telling the consumer of a CRI that they can't rely on the property anyway.\r\n\r\nThere is *already* text at the point where CRIs in \"creation and normalization\" where the creator MAY perform this normalization; I'd rather suggest removing the details of what the text string is (it's a CBOR text string in the model, after all) from the constraints, and if needed, emphasize what is in the existing section.",
          "createdAt": "2025-03-03T09:52:22Z",
          "updatedAt": "2025-03-03T09:52:22Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "The new text makes it explicit that the recipient of a CRI MAY expect NFC.\r\nThis is a very different interoperability requirement from just stating the fact that the creator MAY pay its dues to this expectation by performing normalization.\r\nThe point here is that it normally doesn't.",
          "createdAt": "2025-03-03T09:57:28Z",
          "updatedAt": "2025-03-03T10:00:23Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Is that how we should describe a standard? If the sender MAY do something (but also MAY NOT), and a the receiver MAY rely on that, who gets to keep the parts when it breaks?\r\n\r\nThere are constraints that the recipient needs to apply because it can't use the CRI otherwise (it may not recognize some extensions, or it may need to store the CRI for some time and it simply exceeds its buffer size); isn't this one more of that same kind (and then why does it warrant 4 mentions in the constraints section)?\r\n\r\n(And of course that is all only for the original source and final recipient: intermediaries are, in a different section, even softly absolved from verifying that bytes are even really UTF-8 encoded).\r\n\r\nAnd what does it mean for the text-or-PET extension? I doubt that converting a URI into a CRI where the input is not NFC warrants starting a PET block for those characters.",
          "createdAt": "2025-03-03T10:57:54Z",
          "updatedAt": "2025-03-03T10:57:54Z"
        },
        {
          "author": "core-bot",
          "authorAssociation": "NONE",
          "body": "> Is that how we should describe a standard? If the sender MAY do something (but also MAY NOT), and a the receiver MAY rely on that, who gets to keep the parts when it breaks?\r\n\r\nIf you make NFC a hard requirement, you end up in a \u201cnormalize everywhere again\u201d world.  I think the progress we had in the last five years or so in understanding the problem is that we are indeed better off with a soft requirement, even if that cannot guarantee anything (spoiler: the hard requirement cannot really guarantee anything either, but by putting a large onus on everyone it will detect errors earlier).\r\n\r\n> There are constraints that the recipient needs to apply because it can't use the CRI otherwise (it may not recognize some extensions, or it may need to store the CRI for some time and it simply exceeds its buffer size); isn't this one more of that same kind\r\n\r\nNFC is a an expectation that a sender needs to be reasonably sure it can meet.\r\nBut it is allowed to have other components do the work (such as an input framework).\r\n\r\n> (and then why does it warrant 4 mentions in the constraints section)?\r\n\r\nI\u2019d like to do editorial cleanups after we have agreed on content.\r\n\r\n> (And of course that is all only for the original source and final recipient: intermediaries are, in a different section, even softly absolved from verifying that bytes are even really UTF-8 encoded).\r\n\r\nWhile that is correct, there is a big difference between valid UTF-8 (hard requirement) and NFC (soft requirement).\r\n\r\n> And what does it mean for the text-or-PET extension? I doubt that converting a URI into a CRI where the input is not NFC warrants starting a PET block for those characters.\r\n\r\nPET is for tunneling non-UTF-8 (and, the way we have defined it, it really cannot do anything else).\r\nWe don\u2019t have an extension yet for \u201chere\u2019s UTF-8 that might not be NFC\u201d.\r\n\r\nGr\u00fc\u00dfe, Carsten\r\n\r\n",
          "createdAt": "2025-03-03T12:48:44Z",
          "updatedAt": "2025-03-03T12:48:44Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "I agree we shouldn't make NFC a requirement; I doubt it even makes sense as a soft requirement.\r\n\r\nRecipients may have soft requirements about all sorts of things -- I don't understand why the possibility of requiring NFC is any more special than any other expectations they might have. (The conversion to CoAP options is the strongest I see, but a) it doesn't even say \"net-unicode\" here, and b) I haven't ever seen a CoAP impelementation that enforces this).\r\n\r\nIf this is all about *displaying* CRIs, that's a different business \u2013 for example, a link viewer that explicitly highlights places with possibly confusing characters, non-NFC text or unexpected ZWJs spread in the text would be a welcome thing[^1]. But generic clients refusing to fetch a URI just because it is not NFC, is that desirable?\r\n\r\n[^1]: Even those are hard to detect these days, because whether \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 contains unexpected ZWJ depends on what the font can render, but I digress.\r\n\r\n> We don\u2019t have an extension yet for \u201chere\u2019s UTF-8 that might not be NFC\u201d.\r\n\r\nWell, for example, CBOR calls those \"text strings\".",
          "createdAt": "2025-03-03T13:09:04Z",
          "updatedAt": "2025-03-03T13:09:04Z"
        },
        {
          "author": "core-bot",
          "authorAssociation": "NONE",
          "body": "On 2025-03-03, at 14:09, chrysn ***@***.***> wrote:\r\n> I agree we shouldn't make NFC a requirement; I doubt it even makes sense as a soft requirement.\r\n\r\nIt makes a lot of sense when server implementers know how they should offer a resource called \u00fcbergr\u00f6\u00dfentr\u00e4ger.\r\n\r\n> Recipients may have soft requirements about all sorts of things -- I don't understand why the possibility of requiring NFC is any more special than any other expectations they might have.\r\n\r\nWell, this has been in the document for five years.\r\n\r\n> (The conversion to CoAP options is the strongest I see, but a) it doesn't even say \"net-unicode\" here, and b) I haven't ever seen a CoAP impelementation that enforces this).\r\n\r\nAgain, this is not about enforcement, but about nudging choices into a common direction.\r\n\r\n> If this is all about displaying CRIs, that's a different business \u2013 for example, a link viewer that explicitly highlights places with possibly confusing characters, non-NFC text or unexpected ZWJs spread in the text would be a welcome thing1.\r\n\r\nConfusing characters are a whole other set of issues...\r\n\r\n> But generic clients refusing to fetch a URI just because it is not NFC, is that desirable?\r\n\r\nHow did the client get the URI?\r\nIf the server made it up and the client discovered it, then the client should use it as it is.\r\nIf the client\u2019s user typed it in, the client should send NFC (that is the point here); probably the input method already normalizes towards NFC anyway.\r\n\r\n>> We don\u2019t have an extension yet for \u201chere\u2019s UTF-8 that might not be NFC\u201d.\r\n> \r\n> Well, for example, CBOR calls those \"text strings\".\r\n\r\nCBOR indeed doesn\u2019t help at all with Unicode normalization.\r\nThat\u2019s why it is a great idea to address it in the application layer.\r\n\r\nGr\u00fc\u00dfe, Carsten\r\n\r\n",
          "createdAt": "2025-03-03T13:20:22Z",
          "updatedAt": "2025-03-03T13:20:22Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Nudging is good, let's do nudging. (It's already in -18, and I'd be happy to read \"If a naming authority creates a CRI from user input, it MAY apply\" becoming a \"SHOULD\"). The quadruple repetition in the constraints is exercising a lot of textual force than I'd expect from nudging.\r\n\r\nThe \"MAY\" in the proposed text can be read as \"client implementations can start refusing non-NFC text just because\"; what I think we want is \"issuers of CRIs beware that addresses can traverse media changes, so they better be chosen such that they can be entered by a human (and that might entail using existing printable characters, and then the user entering them through a keyboard with NFC applied)\" (and if that fails even though the user typed it correctly, it's the server's fault for issuing the CRI in a context where this might happen).\r\n\r\nFrankly, if that original creation-and-normalization MAY becomes a SHOULD, and we do end up with an effective \"client implementation MAY refusing non-NFC\" (as can be read in the PR), I'm fine with that too, with the caveat that when text-or-pet is allowed, exercising that MAY becomes nonsensical (because the non-NFC can come from binary PET that just happens to be UTF-8). But \"MAY normalize\" and \"MAY refuse\" causes a situation where two parties both just exercise a MAY and can then not interoperate, and AIU, non-interoperability should only happen if at least one party violates at least a SHOULD.",
          "createdAt": "2025-03-03T13:39:51Z",
          "updatedAt": "2025-03-03T13:39:51Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "\"SHOULD\" is too strong.   I'd settle for \"may need to\".",
          "createdAt": "2025-03-03T17:52:21Z",
          "updatedAt": "2025-03-03T17:52:21Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM6eKrID",
          "commit": {
            "abbreviatedOid": "63e4d4a"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-03T09:50:51Z",
          "updatedAt": "2025-03-03T17:50:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 116,
      "id": "PR_kwDOFyeisM6NJ6S-",
      "title": "Some Wglc comments from Christian Ams\u00fcss",
      "url": "https://github.com/core-wg/href/pull/116",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-03T13:41:00Z",
      "updatedAt": "2025-03-03T13:57:08Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "6bd6f63b361fedd56704e31a6b22dbe8d27cd54b",
      "headRepository": "core-wg/href",
      "headRefName": "wglc-ca",
      "headRefOid": "7dbb1e2de62b1894dcb955a41ac4eddbc9165ee4",
      "closedAt": "2025-03-03T13:57:07Z",
      "mergedAt": "2025-03-03T13:57:06Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "df6fecbdefc8193361a3921d861a808d8120bd5e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM6eM216",
          "commit": {
            "abbreviatedOid": "5c28ffc"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Thanks, LGTM; one minor factual correction suggested.",
          "createdAt": "2025-03-03T13:45:01Z",
          "updatedAt": "2025-03-03T13:50:12Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "```suggestion\r\n  includes the value 0 which cannot be expressed in URI references that then add any path component);\r\n```\r\n\r\ndiscard=0 is what happens in `?foo=bar` or `#baz`.",
              "createdAt": "2025-03-03T13:45:01Z",
              "updatedAt": "2025-03-03T13:50:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM6eM9eT",
          "commit": {
            "abbreviatedOid": "5c28ffc"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-03T13:55:58Z",
          "updatedAt": "2025-03-03T13:55:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 117,
      "id": "PR_kwDOFyeisM6NKFVY",
      "title": "Don't allow null path for CRI in CDDL",
      "url": "https://github.com/core-wg/href/pull/117",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "What's next?\r\nA table of Defaults would be great, but these seem to differ for CRIs and CRI References.",
      "createdAt": "2025-03-03T14:01:49Z",
      "updatedAt": "2025-03-03T21:44:30Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "df6fecbdefc8193361a3921d861a808d8120bd5e",
      "headRepository": "core-wg/href",
      "headRefName": "null-path-cri",
      "headRefOid": "5d6c6cd59eb8a8600d04e2f87c6a74bf4446dd6d",
      "closedAt": "2025-03-03T21:44:29Z",
      "mergedAt": "2025-03-03T21:44:29Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "f126758f2f89c58aae1df0472094e36659939cc6"
      },
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "I think we can take the same defaults for CRIs and CRI references: scheme, authority and discard have no default, and it's `[]` for path, and `null` for query and fragment. (Technically by the words of the tail truncation rules, authority also has null as a default, because `urn:` / `[\"urn\", /null, [], null, null/]` has that null truncated, but I don't know whether it is even preferable to have a default for that very special case).",
          "createdAt": "2025-03-03T14:23:15Z",
          "updatedAt": "2025-03-03T14:23:46Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "Shouldn't the default for path be null for CRI-References?",
          "createdAt": "2025-03-03T15:15:42Z",
          "updatedAt": "2025-03-03T15:15:42Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "I don't think so: it barely makes any difference. The vast majority of CRIs where something is stripped either have a path anyway (so it's not the default), or they then append a query and/or a fragment (in which case there is no benefit to \"being the default\", because the tail stripping doesn't get there anyway).\r\n\r\nThe two CRI references that have the option of actually using the default are `[0, [] /, null, null/]` and `[0, null /, null, null/]` (because for any larger number of discard, esp. when true by the presence of an authority, query and fragment get set to null anyway). And among those two, I wouldn't even know which of them I'd prefer `[0]` to mean, so whatever is more consistent should be fine.\r\n\r\n(Also I'm not sure off my head what they even mean; both leave the path alone, and I think `[0, []]` sets query and fragment to null, while `[0, null]` sets only the fragment to null and leaves the query in place, neither of which is expressible in a URI reference)",
          "createdAt": "2025-03-03T15:33:05Z",
          "updatedAt": "2025-03-03T15:33:05Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "\u2026 and come to think of it, I'd even prefer `[0]` to mean `[0, []]` because it refers back to the \"unqueried\" form of the current resource, which probably works for an \"up\" after \"digging down\" into a resource whose inner structure is explored by the use of query parameters.",
          "createdAt": "2025-03-03T15:36:05Z",
          "updatedAt": "2025-03-03T15:36:05Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "I would like to keep some symmetry between URI-Reference \"\" and CRI-Reference []",
          "createdAt": "2025-03-03T17:08:30Z",
          "updatedAt": "2025-03-03T17:08:30Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Good point: that *is* `[0, null /null, null /]`, so that does have an equivalent URI reference. But is that symmetry really worth having different default handling?",
          "createdAt": "2025-03-03T17:18:00Z",
          "updatedAt": "2025-03-03T17:18:00Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "MEMBER",
          "body": "`a:` is `[\"a\", null, [], null, null]`, I think.  If the authority default were null, this could be represented as `[\"a\"]` instead of `[\"a\", null]`.",
          "createdAt": "2025-03-03T17:33:10Z",
          "updatedAt": "2025-03-03T17:33:10Z"
        },
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "Yes. That's a byte saved for very rare URIs that'll need to stand against all the firmwares in the world, but I don't have any intuition let alone numbers on whether makes a difference there.",
          "createdAt": "2025-03-03T17:36:17Z",
          "updatedAt": "2025-03-03T17:36:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM6eRGDy",
          "commit": {
            "abbreviatedOid": "3eaf976"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "One comment on the precise value; with either outcome, fine with me (as the `[]` can just as well be argued to be an explicit rule).",
          "createdAt": "2025-03-03T21:03:20Z",
          "updatedAt": "2025-03-03T21:04:14Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Given the line above on the empty array, isn't it \r\n\r\n```suggestion\r\n| discard   | 0             |\r\n```\r\n\r\nbecause that is the value that gets removed from the tail?",
              "createdAt": "2025-03-03T21:03:21Z",
              "updatedAt": "2025-03-03T21:04:14Z"
            }
          ]
        }
      ]
    },
    {
      "number": 118,
      "id": "PR_kwDOFyeisM6NKMb8",
      "title": "Close #105 (Reference column in Scheme Numbers registry)",
      "url": "https://github.com/core-wg/href/pull/118",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Give more guidance for what should be in the Reference field for different types of Scheme Numbers registrations",
      "createdAt": "2025-03-03T14:15:18Z",
      "updatedAt": "2025-03-03T16:45:20Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "df6fecbdefc8193361a3921d861a808d8120bd5e",
      "headRepository": "core-wg/href",
      "headRefName": "close-105",
      "headRefOid": "112f2a7632a6971712923c473ec9d73e8b9156d6",
      "closedAt": "2025-03-03T16:45:18Z",
      "mergedAt": "2025-03-03T16:45:18Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "dca9245233adb4fd638af32a6513f2074a76fe10"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM6eOK2p",
          "commit": {
            "abbreviatedOid": "112f2a7"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-03T15:42:53Z",
          "updatedAt": "2025-03-03T15:42:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 119,
      "id": "PR_kwDOFyeisM6NKV_n",
      "title": "Close #104: Proxy-Scheme-Number takes precedence over Proxy-Scheme",
      "url": "https://github.com/core-wg/href/pull/119",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-03T14:30:45Z",
      "updatedAt": "2025-03-03T21:49:15Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "df6fecbdefc8193361a3921d861a808d8120bd5e",
      "headRepository": "core-wg/href",
      "headRefName": "close-104",
      "headRefOid": "03086579b3b19c5d7b12923e46dcc5d2d62c60ee",
      "closedAt": "2025-03-03T21:49:14Z",
      "mergedAt": "2025-03-03T21:49:14Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "1e8fc659c3f6861f2a2c2040fea51dff04ceb15f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 120,
      "id": "PR_kwDOFyeisM6N3yrM",
      "title": "WGLC processing by coral design team",
      "url": "https://github.com/core-wg/href/pull/120",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-08T14:09:54Z",
      "updatedAt": "2025-03-09T14:06:31Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "065c10cf8c80e176e54e463a049325b6eab44dd7",
      "headRepository": "core-wg/href",
      "headRefName": "wglc-coral",
      "headRefOid": "88398b19dd9a702640ae5c7e15e2672d9dca080c",
      "closedAt": "2025-03-09T14:06:29Z",
      "mergedAt": "2025-03-09T14:06:29Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "84efcdbfc26563f77e594f8a59d5c526d3fa69ad"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM6fGG1Y",
          "commit": {
            "abbreviatedOid": "88398b1"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-08T14:30:49Z",
          "updatedAt": "2025-03-08T14:30:49Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOFyeisM6fG_dY",
          "commit": {
            "abbreviatedOid": "88398b1"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "I like how together with \"extensions relax this\", the NFC becomes more explicit as a default, but with a no-syntax-change way to keep non-NFC texts (along with syntax changes to support even non-Unicode strings for complete URI coverage).",
          "createdAt": "2025-03-09T12:12:07Z",
          "updatedAt": "2025-03-09T12:12:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 121,
      "id": "PR_kwDOFyeisM6N5gjC",
      "title": "implementations: Add Rust implementation, note Python impl's age.",
      "url": "https://github.com/core-wg/href/pull/121",
      "state": "MERGED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "The text that was there on missing features is obsolete because those were just not in the version that was current at the time of writing. (IIRC, that text was accurate at the time of writing: then, it was on the latest version but just did not implement all the WIP features of the editor's copy).",
      "createdAt": "2025-03-09T12:43:31Z",
      "updatedAt": "2025-03-09T14:20:53Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "065c10cf8c80e176e54e463a049325b6eab44dd7",
      "headRepository": "core-wg/href",
      "headRefName": "update-impls",
      "headRefOid": "3e79238c04a981f315e65f4b8df2ad589444f20a",
      "closedAt": "2025-03-09T14:20:52Z",
      "mergedAt": "2025-03-09T14:20:52Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "be31d89579745cf1ea58cbe7a9bbdd56ecb54027"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 122,
      "id": "PR_kwDOFyeisM6N5lhF",
      "title": "Extend test metadata and fix tests",
      "url": "https://github.com/core-wg/href/pull/122",
      "state": "MERGED",
      "author": "chrysn",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "So far, this only adds the \"features\" column and doesn't populate it yet.\r\n\r\nMore things I'd yet like to do here:\r\n* [ ] Actually populate that column\r\n* [ ] Add tests with URI references that don't have a corresponding URI\r\n* [x] Introduce as a new type \"onlycri\", where the uri column is empty\r\n* [ ] Fix the empty URI references examples based on the changes in the editor's copy (happy to take anything you have on that already, @cabo).",
      "createdAt": "2025-03-09T13:34:16Z",
      "updatedAt": "2025-03-15T05:27:08Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "be31d89579745cf1ea58cbe7a9bbdd56ecb54027",
      "headRepository": "core-wg/href",
      "headRefName": "test-extensions",
      "headRefOid": "138f62833abc87bc4543805cfa5d73904c6293c4",
      "closedAt": "2025-03-15T05:27:06Z",
      "mergedAt": "2025-03-15T05:27:06Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "6af9a2ac6d362ee8434223f13b98d40531d36ad8"
      },
      "comments": [
        {
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "body": "The current state passes through [cri-ref](https://codeberg.org/chrysn/cri-ref)'s tests.\r\n\r\nThat can be enough to merge; either way, I'll stick with it some more (esp. around the recent changes to the defaults).",
          "createdAt": "2025-03-12T10:32:43Z",
          "updatedAt": "2025-03-12T10:32:43Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM6gLZ77",
          "commit": {
            "abbreviatedOid": "138f628"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-15T04:33:01Z",
          "updatedAt": "2025-03-15T04:33:01Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "Right now the information that this is broken is not written down as part of the constraints but only as part of the conversion rules; C5 should say that.",
              "createdAt": "2025-03-15T04:33:01Z",
              "updatedAt": "2025-03-15T04:33:01Z"
            }
          ]
        }
      ]
    },
    {
      "number": 123,
      "id": "PR_kwDOFyeisM6ODmtF",
      "title": "Addressing Christian's WGLC comments, part deux",
      "url": "https://github.com/core-wg/href/pull/123",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "In Progress...",
      "createdAt": "2025-03-10T21:15:28Z",
      "updatedAt": "2025-03-14T18:50:27Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "be31d89579745cf1ea58cbe7a9bbdd56ecb54027",
      "headRepository": "core-wg/href",
      "headRefName": "wglc-ca2",
      "headRefOid": "3a65bdb94020075fe0d81d48e8c395580b09feae",
      "closedAt": "2025-03-14T18:50:25Z",
      "mergedAt": "2025-03-14T18:50:25Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "5badd1e2733ae307a460584dd808074908256016"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM6fuylr",
          "commit": {
            "abbreviatedOid": "434da51"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "LGTM; suggestion covers a copy-paste issue.",
          "createdAt": "2025-03-12T20:54:53Z",
          "updatedAt": "2025-03-12T21:02:39Z",
          "comments": [
            {
              "originalPosition": 344,
              "body": "```suggestion\r\n| CPA99 | array     | CRI Reference | RFC-XXXX  |\r\n```",
              "createdAt": "2025-03-12T20:54:53Z",
              "updatedAt": "2025-03-12T21:02:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM6fyLpK",
          "commit": {
            "abbreviatedOid": "3a65bdb"
          },
          "author": "marco-tiloca-sics",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-13T06:54:15Z",
          "updatedAt": "2025-03-13T06:54:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 126,
      "id": "PR_kwDOFyeisM6OxEYB",
      "title": "Clarify labels (close #125)",
      "url": "https://github.com/core-wg/href/pull/126",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-15T10:23:23Z",
      "updatedAt": "2025-03-15T13:26:13Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "6af9a2ac6d362ee8434223f13b98d40531d36ad8",
      "headRepository": "core-wg/href",
      "headRefName": "define-label",
      "headRefOid": "0d24ad0b94771f703b75c9d5b15c0e373125b787",
      "closedAt": "2025-03-15T13:26:11Z",
      "mergedAt": "2025-03-15T13:26:11Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "17508c0350bc316629c6e990ef6730a3fa21406b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM6gMqns",
          "commit": {
            "abbreviatedOid": "0d24ad0"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-15T12:11:53Z",
          "updatedAt": "2025-03-15T12:11:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 127,
      "id": "PR_kwDOFyeisM6OxfBc",
      "title": "Use [] for absent queries, fix terms (close #124)",
      "url": "https://github.com/core-wg/href/pull/127",
      "state": "MERGED",
      "author": "cabo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-15T13:23:53Z",
      "updatedAt": "2025-03-16T14:49:47Z",
      "baseRepository": "core-wg/href",
      "baseRefName": "main",
      "baseRefOid": "17508c0350bc316629c6e990ef6730a3fa21406b",
      "headRepository": "core-wg/href",
      "headRefName": "wglc-ca3",
      "headRefOid": "63458bc827a9ec3fbeee78c8bf8cd26cabc01cee",
      "closedAt": "2025-03-16T14:49:45Z",
      "mergedAt": "2025-03-16T14:49:45Z",
      "mergedBy": "cabo",
      "mergeCommit": {
        "oid": "d46d2be450836b16e54cde0af7ed8093b63d9326"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFyeisM6gP_No",
          "commit": {
            "abbreviatedOid": "e0fd7da"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "Thanks for applying the technical change; the terminology with absent and set isn't quite managing the balancing act between using URI terminology and making it mean something here.",
          "createdAt": "2025-03-16T07:45:22Z",
          "updatedAt": "2025-03-16T07:47:58Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I don't even think it's \"most\":\r\n* scheme can not be absent\r\n* authority, if it is absent, is either ROOTBASED (null) or ROOTLESS (true), is that really absence? (Just because one is expressed with a null?)\r\n* query and path really behave the same in simple CRIs (in that they correspond to an empty string in a URI if they are an empty array, and a trailing delimiter is indicated by a single empty value (especially when that is also the leading delimiter)); I'd rather call them both unconditionally present (but possibly empty)\r\n* the fragment can legitimately be absent in a CRI\r\n\r\nGranted, that's what absence is called in a URI, but that *only* works for that PoV.",
              "createdAt": "2025-03-16T07:45:22Z",
              "updatedAt": "2025-03-16T07:47:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM6gP_xM",
          "commit": {
            "abbreviatedOid": "e0fd7da"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-16T07:56:01Z",
          "updatedAt": "2025-03-16T07:56:01Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Maybe this can be starting point:\r\n\r\n> All components are part of all CRIs; some can have values that are `null` or empty arrays, with their default values being elided at the tail of the serialized form.\r\n> In a CRI reference, components can be *not set* (indicated by the discard value `0` for scheme and authority, or by `null` for the scheme, path and query components that can otherwise not have that value).\r\n>\r\n> In URIs, some components are said to be \"absent\". This term is not used for CRIs, and the mapping between a CRI component's value and whether it is absent depends on the component, and is not generally a useful comparison. (For example, a URI reference's authority is absent for CRI references where authority is either not set or has either of the NOAUTHORITY values; a URI reference's query is absent if the CRI's query is an empty list or not set).",
              "createdAt": "2025-03-16T07:56:01Z",
              "updatedAt": "2025-03-16T07:56:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFyeisM6gQoC_",
          "commit": {
            "abbreviatedOid": "69313f1"
          },
          "author": "chrysn",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-16T14:30:20Z",
          "updatedAt": "2025-03-16T14:33:03Z",
          "comments": [
            {
              "originalPosition": 106,
              "body": "This has become a factual statement now (when previously there was some choice that required force):\r\n\r\n```suggestion\r\n* An empty path in a `CRI` is be represented as the empty array\r\n```\r\n\r\n(Not a blocking comment: it's not wrong, just IMO unnecessary)",
              "createdAt": "2025-03-16T14:30:20Z",
              "updatedAt": "2025-03-16T14:33:03Z"
            },
            {
              "originalPosition": 112,
              "body": "```suggestion\r\n  string) is represented as the empty array\r\n```\r\n\r\nSame as above (the syntax does not allow anything else).",
              "createdAt": "2025-03-16T14:31:46Z",
              "updatedAt": "2025-03-16T14:33:03Z"
            }
          ]
        }
      ]
    }
  ]
}